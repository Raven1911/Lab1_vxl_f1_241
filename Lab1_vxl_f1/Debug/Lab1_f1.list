
Lab1_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021e0  080001d0  080001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080023b0  080023b0  000033b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002408  08002408  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002408  08002408  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002408  08002408  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002408  08002408  00003408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800240c  0800240c  0000340c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002410  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000010  08002420  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002420  000040c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084bf  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001923  00000000  00000000  0000c4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0000de20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000763  00000000  00000000  0000e7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010c84  00000000  00000000  0000ef23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1ce  00000000  00000000  0001fba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006733b  00000000  00000000  0002ad75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000920b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000270c  00000000  00000000  000920f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00094800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002398 	.word	0x08002398

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08002398 	.word	0x08002398

08000210 <System_init_Lab1>:
 */
#include "Lab1.h"

///////         SYSTEM INIT  	////////////////////////////

void System_init_Lab1(){
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	timer_init();
 8000214:	f000 fc94 	bl	8000b40 <timer_init>
	setTimer(0, 3000);
 8000218:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800021c:	2000      	movs	r0, #0
 800021e:	f000 fc99 	bl	8000b54 <setTimer>
	setTimer(1, 1000); // step led 7 segment
 8000222:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000226:	2001      	movs	r0, #1
 8000228:	f000 fc94 	bl	8000b54 <setTimer>

}
 800022c:	bf00      	nop
 800022e:	bd80      	pop	{r7, pc}

08000230 <calculator_BCD_to_7SEG>:
// 4bit [3:0] -> [A:B]
uint8_t A, B, C, D;
// f(ABCD)
bool a, b, c, d, e, f, g;

void calculator_BCD_to_7SEG(int num){
 8000230:	b4b0      	push	{r4, r5, r7}
 8000232:	b08f      	sub	sp, #60	@ 0x3c
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	uint8_t  buffer;
	unsigned int LED_4bit[] = {
 8000238:	4b9a      	ldr	r3, [pc, #616]	@ (80004a4 <calculator_BCD_to_7SEG+0x274>)
 800023a:	f107 040c 	add.w	r4, r7, #12
 800023e:	461d      	mov	r5, r3
 8000240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000248:	e895 0003 	ldmia.w	r5, {r0, r1}
 800024c:	e884 0003 	stmia.w	r4, {r0, r1}
		    0b0110, //  6
		    0b0111, //  7
		    0b1000, //  8
		    0b1001  //  9
		};
	buffer = LED_4bit[num];
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	009b      	lsls	r3, r3, #2
 8000254:	3338      	adds	r3, #56	@ 0x38
 8000256:	443b      	add	r3, r7
 8000258:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800025c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	// 4bit [3:0] -> [A:B]
	A = (buffer >> 3) & 1;
 8000260:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000264:	08db      	lsrs	r3, r3, #3
 8000266:	b2db      	uxtb	r3, r3
 8000268:	f003 0301 	and.w	r3, r3, #1
 800026c:	b2da      	uxtb	r2, r3
 800026e:	4b8e      	ldr	r3, [pc, #568]	@ (80004a8 <calculator_BCD_to_7SEG+0x278>)
 8000270:	701a      	strb	r2, [r3, #0]
	B = (buffer >> 2) & 1;
 8000272:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000276:	089b      	lsrs	r3, r3, #2
 8000278:	b2db      	uxtb	r3, r3
 800027a:	f003 0301 	and.w	r3, r3, #1
 800027e:	b2da      	uxtb	r2, r3
 8000280:	4b8a      	ldr	r3, [pc, #552]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 8000282:	701a      	strb	r2, [r3, #0]
	C = (buffer >> 1) & 1;
 8000284:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000288:	085b      	lsrs	r3, r3, #1
 800028a:	b2db      	uxtb	r3, r3
 800028c:	f003 0301 	and.w	r3, r3, #1
 8000290:	b2da      	uxtb	r2, r3
 8000292:	4b87      	ldr	r3, [pc, #540]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 8000294:	701a      	strb	r2, [r3, #0]
	D = (buffer >> 0) & 1;
 8000296:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800029a:	f003 0301 	and.w	r3, r3, #1
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	4b84      	ldr	r3, [pc, #528]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 80002a2:	701a      	strb	r2, [r3, #0]

	// f(ABCD)
	a = (!B&!D) | C | (B&D) | A ;
 80002a4:	4b81      	ldr	r3, [pc, #516]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 80002a6:	781a      	ldrb	r2, [r3, #0]
 80002a8:	4b82      	ldr	r3, [pc, #520]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4313      	orrs	r3, r2
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	bf0c      	ite	eq
 80002b4:	2301      	moveq	r3, #1
 80002b6:	2300      	movne	r3, #0
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	461a      	mov	r2, r3
 80002bc:	4b7c      	ldr	r3, [pc, #496]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	4313      	orrs	r3, r2
 80002c2:	4a7a      	ldr	r2, [pc, #488]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 80002c4:	7811      	ldrb	r1, [r2, #0]
 80002c6:	4a7b      	ldr	r2, [pc, #492]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 80002c8:	7812      	ldrb	r2, [r2, #0]
 80002ca:	400a      	ands	r2, r1
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	4313      	orrs	r3, r2
 80002d0:	4a75      	ldr	r2, [pc, #468]	@ (80004a8 <calculator_BCD_to_7SEG+0x278>)
 80002d2:	7812      	ldrb	r2, [r2, #0]
 80002d4:	4313      	orrs	r3, r2
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	bf14      	ite	ne
 80002da:	2301      	movne	r3, #1
 80002dc:	2300      	moveq	r3, #0
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	4b75      	ldr	r3, [pc, #468]	@ (80004b8 <calculator_BCD_to_7SEG+0x288>)
 80002e2:	701a      	strb	r2, [r3, #0]
	b = (!B) | (!C&!D) | (C&D);
 80002e4:	4b71      	ldr	r3, [pc, #452]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	bf0c      	ite	eq
 80002ec:	2301      	moveq	r3, #1
 80002ee:	2300      	movne	r3, #0
 80002f0:	b2da      	uxtb	r2, r3
 80002f2:	4b6f      	ldr	r3, [pc, #444]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 80002f4:	7819      	ldrb	r1, [r3, #0]
 80002f6:	4b6f      	ldr	r3, [pc, #444]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	430b      	orrs	r3, r1
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	2b00      	cmp	r3, #0
 8000300:	bf0c      	ite	eq
 8000302:	2301      	moveq	r3, #1
 8000304:	2300      	movne	r3, #0
 8000306:	b2db      	uxtb	r3, r3
 8000308:	4313      	orrs	r3, r2
 800030a:	b2db      	uxtb	r3, r3
 800030c:	4619      	mov	r1, r3
 800030e:	4b68      	ldr	r3, [pc, #416]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 8000310:	781a      	ldrb	r2, [r3, #0]
 8000312:	4b68      	ldr	r3, [pc, #416]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	4013      	ands	r3, r2
 8000318:	b2db      	uxtb	r3, r3
 800031a:	430b      	orrs	r3, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	bf14      	ite	ne
 8000320:	2301      	movne	r3, #1
 8000322:	2300      	moveq	r3, #0
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4b65      	ldr	r3, [pc, #404]	@ (80004bc <calculator_BCD_to_7SEG+0x28c>)
 8000328:	701a      	strb	r2, [r3, #0]
	c = (!C) | D | B;
 800032a:	4b61      	ldr	r3, [pc, #388]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	bf0c      	ite	eq
 8000332:	2301      	moveq	r3, #1
 8000334:	2300      	movne	r3, #0
 8000336:	b2db      	uxtb	r3, r3
 8000338:	461a      	mov	r2, r3
 800033a:	4b5e      	ldr	r3, [pc, #376]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	4313      	orrs	r3, r2
 8000340:	4a5a      	ldr	r2, [pc, #360]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 8000342:	7812      	ldrb	r2, [r2, #0]
 8000344:	4313      	orrs	r3, r2
 8000346:	2b00      	cmp	r3, #0
 8000348:	bf14      	ite	ne
 800034a:	2301      	movne	r3, #1
 800034c:	2300      	moveq	r3, #0
 800034e:	b2da      	uxtb	r2, r3
 8000350:	4b5b      	ldr	r3, [pc, #364]	@ (80004c0 <calculator_BCD_to_7SEG+0x290>)
 8000352:	701a      	strb	r2, [r3, #0]
	d = (!B&!D) | ((!B)&C) | (B&!C&D) | (C&!D) | A;
 8000354:	4b55      	ldr	r3, [pc, #340]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 8000356:	781a      	ldrb	r2, [r3, #0]
 8000358:	4b56      	ldr	r3, [pc, #344]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	4313      	orrs	r3, r2
 800035e:	b2db      	uxtb	r3, r3
 8000360:	2b00      	cmp	r3, #0
 8000362:	bf0c      	ite	eq
 8000364:	2301      	moveq	r3, #1
 8000366:	2300      	movne	r3, #0
 8000368:	b2db      	uxtb	r3, r3
 800036a:	461a      	mov	r2, r3
 800036c:	4b4f      	ldr	r3, [pc, #316]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b00      	cmp	r3, #0
 8000372:	bf0c      	ite	eq
 8000374:	2301      	moveq	r3, #1
 8000376:	2300      	movne	r3, #0
 8000378:	b2db      	uxtb	r3, r3
 800037a:	4619      	mov	r1, r3
 800037c:	4b4c      	ldr	r3, [pc, #304]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	400b      	ands	r3, r1
 8000382:	431a      	orrs	r2, r3
 8000384:	4b49      	ldr	r3, [pc, #292]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	4619      	mov	r1, r3
 800038a:	4b49      	ldr	r3, [pc, #292]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	bf0c      	ite	eq
 8000392:	2301      	moveq	r3, #1
 8000394:	2300      	movne	r3, #0
 8000396:	b2db      	uxtb	r3, r3
 8000398:	400b      	ands	r3, r1
 800039a:	4946      	ldr	r1, [pc, #280]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 800039c:	7809      	ldrb	r1, [r1, #0]
 800039e:	400b      	ands	r3, r1
 80003a0:	431a      	orrs	r2, r3
 80003a2:	4b43      	ldr	r3, [pc, #268]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	4619      	mov	r1, r3
 80003a8:	4b42      	ldr	r3, [pc, #264]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	bf0c      	ite	eq
 80003b0:	2301      	moveq	r3, #1
 80003b2:	2300      	movne	r3, #0
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	400b      	ands	r3, r1
 80003b8:	4313      	orrs	r3, r2
 80003ba:	4a3b      	ldr	r2, [pc, #236]	@ (80004a8 <calculator_BCD_to_7SEG+0x278>)
 80003bc:	7812      	ldrb	r2, [r2, #0]
 80003be:	4313      	orrs	r3, r2
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	bf14      	ite	ne
 80003c4:	2301      	movne	r3, #1
 80003c6:	2300      	moveq	r3, #0
 80003c8:	b2da      	uxtb	r2, r3
 80003ca:	4b3e      	ldr	r3, [pc, #248]	@ (80004c4 <calculator_BCD_to_7SEG+0x294>)
 80003cc:	701a      	strb	r2, [r3, #0]
	e = (!B&!D) | (C&!D);
 80003ce:	4b37      	ldr	r3, [pc, #220]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 80003d0:	781a      	ldrb	r2, [r3, #0]
 80003d2:	4b38      	ldr	r3, [pc, #224]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	4313      	orrs	r3, r2
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	2b00      	cmp	r3, #0
 80003dc:	bf0c      	ite	eq
 80003de:	2301      	moveq	r3, #1
 80003e0:	2300      	movne	r3, #0
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	461a      	mov	r2, r3
 80003e6:	4b32      	ldr	r3, [pc, #200]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	4619      	mov	r1, r3
 80003ec:	4b31      	ldr	r3, [pc, #196]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	bf0c      	ite	eq
 80003f4:	2301      	moveq	r3, #1
 80003f6:	2300      	movne	r3, #0
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	400b      	ands	r3, r1
 80003fc:	4313      	orrs	r3, r2
 80003fe:	2b00      	cmp	r3, #0
 8000400:	bf14      	ite	ne
 8000402:	2301      	movne	r3, #1
 8000404:	2300      	moveq	r3, #0
 8000406:	b2da      	uxtb	r2, r3
 8000408:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <calculator_BCD_to_7SEG+0x298>)
 800040a:	701a      	strb	r2, [r3, #0]
	f = (!C&!D) | (B&!C) | (B&!D) | A;
 800040c:	4b28      	ldr	r3, [pc, #160]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 800040e:	781a      	ldrb	r2, [r3, #0]
 8000410:	4b28      	ldr	r3, [pc, #160]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	4313      	orrs	r3, r2
 8000416:	b2db      	uxtb	r3, r3
 8000418:	2b00      	cmp	r3, #0
 800041a:	bf0c      	ite	eq
 800041c:	2301      	moveq	r3, #1
 800041e:	2300      	movne	r3, #0
 8000420:	b2db      	uxtb	r3, r3
 8000422:	461a      	mov	r2, r3
 8000424:	4b21      	ldr	r3, [pc, #132]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	4619      	mov	r1, r3
 800042a:	4b21      	ldr	r3, [pc, #132]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	bf0c      	ite	eq
 8000432:	2301      	moveq	r3, #1
 8000434:	2300      	movne	r3, #0
 8000436:	b2db      	uxtb	r3, r3
 8000438:	400b      	ands	r3, r1
 800043a:	431a      	orrs	r2, r3
 800043c:	4b1b      	ldr	r3, [pc, #108]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	4619      	mov	r1, r3
 8000442:	4b1c      	ldr	r3, [pc, #112]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b00      	cmp	r3, #0
 8000448:	bf0c      	ite	eq
 800044a:	2301      	moveq	r3, #1
 800044c:	2300      	movne	r3, #0
 800044e:	b2db      	uxtb	r3, r3
 8000450:	400b      	ands	r3, r1
 8000452:	4313      	orrs	r3, r2
 8000454:	4a14      	ldr	r2, [pc, #80]	@ (80004a8 <calculator_BCD_to_7SEG+0x278>)
 8000456:	7812      	ldrb	r2, [r2, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	2b00      	cmp	r3, #0
 800045c:	bf14      	ite	ne
 800045e:	2301      	movne	r3, #1
 8000460:	2300      	moveq	r3, #0
 8000462:	b2da      	uxtb	r2, r3
 8000464:	4b19      	ldr	r3, [pc, #100]	@ (80004cc <calculator_BCD_to_7SEG+0x29c>)
 8000466:	701a      	strb	r2, [r3, #0]
	g = ((!B)&C) | (B&(!C)) | A | (B&(!D));
 8000468:	4b10      	ldr	r3, [pc, #64]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	bf0c      	ite	eq
 8000470:	2301      	moveq	r3, #1
 8000472:	2300      	movne	r3, #0
 8000474:	b2db      	uxtb	r3, r3
 8000476:	461a      	mov	r2, r3
 8000478:	4b0d      	ldr	r3, [pc, #52]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	401a      	ands	r2, r3
 800047e:	4b0b      	ldr	r3, [pc, #44]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	4619      	mov	r1, r3
 8000484:	4b0a      	ldr	r3, [pc, #40]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	bf0c      	ite	eq
 800048c:	2301      	moveq	r3, #1
 800048e:	2300      	movne	r3, #0
 8000490:	b2db      	uxtb	r3, r3
 8000492:	400b      	ands	r3, r1
 8000494:	4313      	orrs	r3, r2
 8000496:	4a04      	ldr	r2, [pc, #16]	@ (80004a8 <calculator_BCD_to_7SEG+0x278>)
 8000498:	7812      	ldrb	r2, [r2, #0]
 800049a:	431a      	orrs	r2, r3
 800049c:	4b03      	ldr	r3, [pc, #12]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	4619      	mov	r1, r3
 80004a2:	e015      	b.n	80004d0 <calculator_BCD_to_7SEG+0x2a0>
 80004a4:	080023b0 	.word	0x080023b0
 80004a8:	2000002c 	.word	0x2000002c
 80004ac:	2000002d 	.word	0x2000002d
 80004b0:	2000002e 	.word	0x2000002e
 80004b4:	2000002f 	.word	0x2000002f
 80004b8:	20000030 	.word	0x20000030
 80004bc:	20000031 	.word	0x20000031
 80004c0:	20000032 	.word	0x20000032
 80004c4:	20000033 	.word	0x20000033
 80004c8:	20000034 	.word	0x20000034
 80004cc:	20000035 	.word	0x20000035
 80004d0:	4b0a      	ldr	r3, [pc, #40]	@ (80004fc <calculator_BCD_to_7SEG+0x2cc>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	bf0c      	ite	eq
 80004d8:	2301      	moveq	r3, #1
 80004da:	2300      	movne	r3, #0
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	400b      	ands	r3, r1
 80004e0:	4313      	orrs	r3, r2
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	bf14      	ite	ne
 80004e6:	2301      	movne	r3, #1
 80004e8:	2300      	moveq	r3, #0
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	4b04      	ldr	r3, [pc, #16]	@ (8000500 <calculator_BCD_to_7SEG+0x2d0>)
 80004ee:	701a      	strb	r2, [r3, #0]
//	printf("d: %d \n", !d);
//	printf("e: %d \n", !e);
//	printf("f: %d \n", !f);
//	printf("g: %d \n", !g);
//	printf("-------------- \n");
}
 80004f0:	bf00      	nop
 80004f2:	373c      	adds	r7, #60	@ 0x3c
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bcb0      	pop	{r4, r5, r7}
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000002f 	.word	0x2000002f
 8000500:	20000036 	.word	0x20000036

08000504 <display7SEG>:


void display7SEG(int index, int num){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
	calculator_BCD_to_7SEG(num);
 800050e:	6838      	ldr	r0, [r7, #0]
 8000510:	f7ff fe8e 	bl	8000230 <calculator_BCD_to_7SEG>
	switch (index) {
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d003      	beq.n	8000522 <display7SEG+0x1e>
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d04c      	beq.n	80005ba <display7SEG+0xb6>
		    HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, !e);
		    HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, !f);
		    HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, !g);
			break;
		default:
			break;
 8000520:	e093      	b.n	800064a <display7SEG+0x146>
		    HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, !a);
 8000522:	4b4c      	ldr	r3, [pc, #304]	@ (8000654 <display7SEG+0x150>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	f083 0301 	eor.w	r3, r3, #1
 800052a:	b2db      	uxtb	r3, r3
 800052c:	461a      	mov	r2, r3
 800052e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000532:	4849      	ldr	r0, [pc, #292]	@ (8000658 <display7SEG+0x154>)
 8000534:	f000 ff22 	bl	800137c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, !b);
 8000538:	4b48      	ldr	r3, [pc, #288]	@ (800065c <display7SEG+0x158>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	f083 0301 	eor.w	r3, r3, #1
 8000540:	b2db      	uxtb	r3, r3
 8000542:	461a      	mov	r2, r3
 8000544:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000548:	4843      	ldr	r0, [pc, #268]	@ (8000658 <display7SEG+0x154>)
 800054a:	f000 ff17 	bl	800137c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, !c);
 800054e:	4b44      	ldr	r3, [pc, #272]	@ (8000660 <display7SEG+0x15c>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	f083 0301 	eor.w	r3, r3, #1
 8000556:	b2db      	uxtb	r3, r3
 8000558:	461a      	mov	r2, r3
 800055a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800055e:	483e      	ldr	r0, [pc, #248]	@ (8000658 <display7SEG+0x154>)
 8000560:	f000 ff0c 	bl	800137c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, !d);
 8000564:	4b3f      	ldr	r3, [pc, #252]	@ (8000664 <display7SEG+0x160>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	f083 0301 	eor.w	r3, r3, #1
 800056c:	b2db      	uxtb	r3, r3
 800056e:	461a      	mov	r2, r3
 8000570:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000574:	4838      	ldr	r0, [pc, #224]	@ (8000658 <display7SEG+0x154>)
 8000576:	f000 ff01 	bl	800137c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, !e);
 800057a:	4b3b      	ldr	r3, [pc, #236]	@ (8000668 <display7SEG+0x164>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	f083 0301 	eor.w	r3, r3, #1
 8000582:	b2db      	uxtb	r3, r3
 8000584:	461a      	mov	r2, r3
 8000586:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800058a:	4833      	ldr	r0, [pc, #204]	@ (8000658 <display7SEG+0x154>)
 800058c:	f000 fef6 	bl	800137c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, !f);
 8000590:	4b36      	ldr	r3, [pc, #216]	@ (800066c <display7SEG+0x168>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	f083 0301 	eor.w	r3, r3, #1
 8000598:	b2db      	uxtb	r3, r3
 800059a:	461a      	mov	r2, r3
 800059c:	2101      	movs	r1, #1
 800059e:	4834      	ldr	r0, [pc, #208]	@ (8000670 <display7SEG+0x16c>)
 80005a0:	f000 feec 	bl	800137c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, !g);
 80005a4:	4b33      	ldr	r3, [pc, #204]	@ (8000674 <display7SEG+0x170>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	f083 0301 	eor.w	r3, r3, #1
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	461a      	mov	r2, r3
 80005b0:	2102      	movs	r1, #2
 80005b2:	482f      	ldr	r0, [pc, #188]	@ (8000670 <display7SEG+0x16c>)
 80005b4:	f000 fee2 	bl	800137c <HAL_GPIO_WritePin>
			break;
 80005b8:	e047      	b.n	800064a <display7SEG+0x146>
		    HAL_GPIO_WritePin(SEG1_0_GPIO_Port, SEG1_0_Pin, !a);
 80005ba:	4b26      	ldr	r3, [pc, #152]	@ (8000654 <display7SEG+0x150>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	f083 0301 	eor.w	r3, r3, #1
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	461a      	mov	r2, r3
 80005c6:	2104      	movs	r1, #4
 80005c8:	4829      	ldr	r0, [pc, #164]	@ (8000670 <display7SEG+0x16c>)
 80005ca:	f000 fed7 	bl	800137c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, !b);
 80005ce:	4b23      	ldr	r3, [pc, #140]	@ (800065c <display7SEG+0x158>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	f083 0301 	eor.w	r3, r3, #1
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	461a      	mov	r2, r3
 80005da:	2108      	movs	r1, #8
 80005dc:	4824      	ldr	r0, [pc, #144]	@ (8000670 <display7SEG+0x16c>)
 80005de:	f000 fecd 	bl	800137c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, !c);
 80005e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000660 <display7SEG+0x15c>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	f083 0301 	eor.w	r3, r3, #1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	461a      	mov	r2, r3
 80005ee:	2110      	movs	r1, #16
 80005f0:	481f      	ldr	r0, [pc, #124]	@ (8000670 <display7SEG+0x16c>)
 80005f2:	f000 fec3 	bl	800137c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, !d);
 80005f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000664 <display7SEG+0x160>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	f083 0301 	eor.w	r3, r3, #1
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	461a      	mov	r2, r3
 8000602:	2120      	movs	r1, #32
 8000604:	481a      	ldr	r0, [pc, #104]	@ (8000670 <display7SEG+0x16c>)
 8000606:	f000 feb9 	bl	800137c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, !e);
 800060a:	4b17      	ldr	r3, [pc, #92]	@ (8000668 <display7SEG+0x164>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	f083 0301 	eor.w	r3, r3, #1
 8000612:	b2db      	uxtb	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	2140      	movs	r1, #64	@ 0x40
 8000618:	4815      	ldr	r0, [pc, #84]	@ (8000670 <display7SEG+0x16c>)
 800061a:	f000 feaf 	bl	800137c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, !f);
 800061e:	4b13      	ldr	r3, [pc, #76]	@ (800066c <display7SEG+0x168>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	f083 0301 	eor.w	r3, r3, #1
 8000626:	b2db      	uxtb	r3, r3
 8000628:	461a      	mov	r2, r3
 800062a:	2180      	movs	r1, #128	@ 0x80
 800062c:	4810      	ldr	r0, [pc, #64]	@ (8000670 <display7SEG+0x16c>)
 800062e:	f000 fea5 	bl	800137c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, !g);
 8000632:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <display7SEG+0x170>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	f083 0301 	eor.w	r3, r3, #1
 800063a:	b2db      	uxtb	r3, r3
 800063c:	461a      	mov	r2, r3
 800063e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000642:	480b      	ldr	r0, [pc, #44]	@ (8000670 <display7SEG+0x16c>)
 8000644:	f000 fe9a 	bl	800137c <HAL_GPIO_WritePin>
			break;
 8000648:	bf00      	nop
	}

}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000030 	.word	0x20000030
 8000658:	40010800 	.word	0x40010800
 800065c:	20000031 	.word	0x20000031
 8000660:	20000032 	.word	0x20000032
 8000664:	20000033 	.word	0x20000033
 8000668:	20000034 	.word	0x20000034
 800066c:	20000035 	.word	0x20000035
 8000670:	40010c00 	.word	0x40010c00
 8000674:	20000036 	.word	0x20000036

08000678 <decoder_Led>:



//////////////////////
void decoder_Led(int R, int Y, int G, int R2, int Y2, int G2){
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
 8000684:	603b      	str	r3, [r7, #0]
	//traffic light 1
	HAL_GPIO_WritePin(Led_Red_GPIO_Port, Led_Red_Pin, R);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	461a      	mov	r2, r3
 800068c:	2120      	movs	r1, #32
 800068e:	4816      	ldr	r0, [pc, #88]	@ (80006e8 <decoder_Led+0x70>)
 8000690:	f000 fe74 	bl	800137c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Yellow_GPIO_Port, Led_Yellow_Pin, Y);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	461a      	mov	r2, r3
 800069a:	2140      	movs	r1, #64	@ 0x40
 800069c:	4812      	ldr	r0, [pc, #72]	@ (80006e8 <decoder_Led+0x70>)
 800069e:	f000 fe6d 	bl	800137c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Green_GPIO_Port, Led_Green_Pin, G);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	461a      	mov	r2, r3
 80006a8:	2180      	movs	r1, #128	@ 0x80
 80006aa:	480f      	ldr	r0, [pc, #60]	@ (80006e8 <decoder_Led+0x70>)
 80006ac:	f000 fe66 	bl	800137c <HAL_GPIO_WritePin>

	//traffic light 2
	HAL_GPIO_WritePin(Led_Red2_GPIO_Port, Led_Red2_Pin, R2);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006ba:	480b      	ldr	r0, [pc, #44]	@ (80006e8 <decoder_Led+0x70>)
 80006bc:	f000 fe5e 	bl	800137c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port, Led_Yellow2_Pin, Y2);
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ca:	4807      	ldr	r0, [pc, #28]	@ (80006e8 <decoder_Led+0x70>)
 80006cc:	f000 fe56 	bl	800137c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Green2_GPIO_Port, Led_Green2_Pin, G2);
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	461a      	mov	r2, r3
 80006d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006da:	4803      	ldr	r0, [pc, #12]	@ (80006e8 <decoder_Led+0x70>)
 80006dc:	f000 fe4e 	bl	800137c <HAL_GPIO_WritePin>
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40010800 	.word	0x40010800

080006ec <Exercise_5>:
typedef enum {state_0, state_1, state_2, state_3} state;
state pre_state = state_0;

uint8_t count_7seg = 3;
uint8_t count_7seg1 = 5;
void Exercise_5(){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af02      	add	r7, sp, #8
	switch (pre_state) {
 80006f2:	4b96      	ldr	r3, [pc, #600]	@ (800094c <Exercise_5+0x260>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	f200 811c 	bhi.w	8000934 <Exercise_5+0x248>
 80006fc:	a201      	add	r2, pc, #4	@ (adr r2, 8000704 <Exercise_5+0x18>)
 80006fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000702:	bf00      	nop
 8000704:	08000715 	.word	0x08000715
 8000708:	08000797 	.word	0x08000797
 800070c:	08000827 	.word	0x08000827
 8000710:	080008a7 	.word	0x080008a7

		case state_0:
			//7segment display
			display7SEG(0, count_7seg);
 8000714:	4b8e      	ldr	r3, [pc, #568]	@ (8000950 <Exercise_5+0x264>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	2000      	movs	r0, #0
 800071c:	f7ff fef2 	bl	8000504 <display7SEG>
			display7SEG(1, count_7seg1);
 8000720:	4b8c      	ldr	r3, [pc, #560]	@ (8000954 <Exercise_5+0x268>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff feec 	bl	8000504 <display7SEG>
			//traffic
			decoder_Led(0, 1, 1, 1, 1, 0);
 800072c:	2300      	movs	r3, #0
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	2301      	movs	r3, #1
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	2301      	movs	r3, #1
 8000736:	2201      	movs	r2, #1
 8000738:	2101      	movs	r1, #1
 800073a:	2000      	movs	r0, #0
 800073c:	f7ff ff9c 	bl	8000678 <decoder_Led>

			if(flag_timer[0]){
 8000740:	4b85      	ldr	r3, [pc, #532]	@ (8000958 <Exercise_5+0x26c>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00a      	beq.n	800075e <Exercise_5+0x72>
				pre_state = state_1;
 8000748:	4b80      	ldr	r3, [pc, #512]	@ (800094c <Exercise_5+0x260>)
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
				flag_timer[0] = 0;
 800074e:	4b82      	ldr	r3, [pc, #520]	@ (8000958 <Exercise_5+0x26c>)
 8000750:	2200      	movs	r2, #0
 8000752:	801a      	strh	r2, [r3, #0]
				setTimer(0, 2000);
 8000754:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000758:	2000      	movs	r0, #0
 800075a:	f000 f9fb 	bl	8000b54 <setTimer>
			}

			if(flag_timer[1]){
 800075e:	4b7e      	ldr	r3, [pc, #504]	@ (8000958 <Exercise_5+0x26c>)
 8000760:	885b      	ldrh	r3, [r3, #2]
 8000762:	2b00      	cmp	r3, #0
 8000764:	f000 80e8 	beq.w	8000938 <Exercise_5+0x24c>
				count_7seg--;
 8000768:	4b79      	ldr	r3, [pc, #484]	@ (8000950 <Exercise_5+0x264>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	3b01      	subs	r3, #1
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b77      	ldr	r3, [pc, #476]	@ (8000950 <Exercise_5+0x264>)
 8000772:	701a      	strb	r2, [r3, #0]
				if(count_7seg < 1) count_7seg = 2;
 8000774:	4b76      	ldr	r3, [pc, #472]	@ (8000950 <Exercise_5+0x264>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d102      	bne.n	8000782 <Exercise_5+0x96>
 800077c:	4b74      	ldr	r3, [pc, #464]	@ (8000950 <Exercise_5+0x264>)
 800077e:	2202      	movs	r2, #2
 8000780:	701a      	strb	r2, [r3, #0]
				count_7seg1--;
 8000782:	4b74      	ldr	r3, [pc, #464]	@ (8000954 <Exercise_5+0x268>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	3b01      	subs	r3, #1
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b72      	ldr	r3, [pc, #456]	@ (8000954 <Exercise_5+0x268>)
 800078c:	701a      	strb	r2, [r3, #0]

				flag_timer[1] = 0;
 800078e:	4b72      	ldr	r3, [pc, #456]	@ (8000958 <Exercise_5+0x26c>)
 8000790:	2200      	movs	r2, #0
 8000792:	805a      	strh	r2, [r3, #2]
			}
			break;
 8000794:	e0d0      	b.n	8000938 <Exercise_5+0x24c>

		case state_1:
			//7segment display
			display7SEG(0, count_7seg);
 8000796:	4b6e      	ldr	r3, [pc, #440]	@ (8000950 <Exercise_5+0x264>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	4619      	mov	r1, r3
 800079c:	2000      	movs	r0, #0
 800079e:	f7ff feb1 	bl	8000504 <display7SEG>
			display7SEG(1, count_7seg1);
 80007a2:	4b6c      	ldr	r3, [pc, #432]	@ (8000954 <Exercise_5+0x268>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	4619      	mov	r1, r3
 80007a8:	2001      	movs	r0, #1
 80007aa:	f7ff feab 	bl	8000504 <display7SEG>
			//traffic
			decoder_Led(0, 1, 1, 1, 0, 1);
 80007ae:	2301      	movs	r3, #1
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	2300      	movs	r3, #0
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	2201      	movs	r2, #1
 80007ba:	2101      	movs	r1, #1
 80007bc:	2000      	movs	r0, #0
 80007be:	f7ff ff5b 	bl	8000678 <decoder_Led>

			if(flag_timer[0]){
 80007c2:	4b65      	ldr	r3, [pc, #404]	@ (8000958 <Exercise_5+0x26c>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d00a      	beq.n	80007e0 <Exercise_5+0xf4>
				pre_state = state_2;
 80007ca:	4b60      	ldr	r3, [pc, #384]	@ (800094c <Exercise_5+0x260>)
 80007cc:	2202      	movs	r2, #2
 80007ce:	701a      	strb	r2, [r3, #0]
				flag_timer[0] = 0;
 80007d0:	4b61      	ldr	r3, [pc, #388]	@ (8000958 <Exercise_5+0x26c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	801a      	strh	r2, [r3, #0]
				setTimer(0, 3000);
 80007d6:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80007da:	2000      	movs	r0, #0
 80007dc:	f000 f9ba 	bl	8000b54 <setTimer>
			}
			if(flag_timer[1]){
 80007e0:	4b5d      	ldr	r3, [pc, #372]	@ (8000958 <Exercise_5+0x26c>)
 80007e2:	885b      	ldrh	r3, [r3, #2]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	f000 80a9 	beq.w	800093c <Exercise_5+0x250>
				count_7seg--;
 80007ea:	4b59      	ldr	r3, [pc, #356]	@ (8000950 <Exercise_5+0x264>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b57      	ldr	r3, [pc, #348]	@ (8000950 <Exercise_5+0x264>)
 80007f4:	701a      	strb	r2, [r3, #0]
				if(count_7seg < 1) count_7seg = 5;
 80007f6:	4b56      	ldr	r3, [pc, #344]	@ (8000950 <Exercise_5+0x264>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d102      	bne.n	8000804 <Exercise_5+0x118>
 80007fe:	4b54      	ldr	r3, [pc, #336]	@ (8000950 <Exercise_5+0x264>)
 8000800:	2205      	movs	r2, #5
 8000802:	701a      	strb	r2, [r3, #0]
				count_7seg1--;
 8000804:	4b53      	ldr	r3, [pc, #332]	@ (8000954 <Exercise_5+0x268>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	3b01      	subs	r3, #1
 800080a:	b2da      	uxtb	r2, r3
 800080c:	4b51      	ldr	r3, [pc, #324]	@ (8000954 <Exercise_5+0x268>)
 800080e:	701a      	strb	r2, [r3, #0]
				if(count_7seg1 < 1) count_7seg1 = 3;
 8000810:	4b50      	ldr	r3, [pc, #320]	@ (8000954 <Exercise_5+0x268>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d102      	bne.n	800081e <Exercise_5+0x132>
 8000818:	4b4e      	ldr	r3, [pc, #312]	@ (8000954 <Exercise_5+0x268>)
 800081a:	2203      	movs	r2, #3
 800081c:	701a      	strb	r2, [r3, #0]
				flag_timer[1] = 0;
 800081e:	4b4e      	ldr	r3, [pc, #312]	@ (8000958 <Exercise_5+0x26c>)
 8000820:	2200      	movs	r2, #0
 8000822:	805a      	strh	r2, [r3, #2]
			}
			break;
 8000824:	e08a      	b.n	800093c <Exercise_5+0x250>

		case state_2:
			//7segment display
			display7SEG(0, count_7seg);
 8000826:	4b4a      	ldr	r3, [pc, #296]	@ (8000950 <Exercise_5+0x264>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	4619      	mov	r1, r3
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff fe69 	bl	8000504 <display7SEG>
			display7SEG(1, count_7seg1);
 8000832:	4b48      	ldr	r3, [pc, #288]	@ (8000954 <Exercise_5+0x268>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	4619      	mov	r1, r3
 8000838:	2001      	movs	r0, #1
 800083a:	f7ff fe63 	bl	8000504 <display7SEG>
			//traffic
			decoder_Led(1, 1, 0, 0, 1, 1);
 800083e:	2301      	movs	r3, #1
 8000840:	9301      	str	r3, [sp, #4]
 8000842:	2301      	movs	r3, #1
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2300      	movs	r3, #0
 8000848:	2200      	movs	r2, #0
 800084a:	2101      	movs	r1, #1
 800084c:	2001      	movs	r0, #1
 800084e:	f7ff ff13 	bl	8000678 <decoder_Led>

			if(flag_timer[0]){
 8000852:	4b41      	ldr	r3, [pc, #260]	@ (8000958 <Exercise_5+0x26c>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00a      	beq.n	8000870 <Exercise_5+0x184>
				pre_state = state_3;
 800085a:	4b3c      	ldr	r3, [pc, #240]	@ (800094c <Exercise_5+0x260>)
 800085c:	2203      	movs	r2, #3
 800085e:	701a      	strb	r2, [r3, #0]
				flag_timer[0] = 0;
 8000860:	4b3d      	ldr	r3, [pc, #244]	@ (8000958 <Exercise_5+0x26c>)
 8000862:	2200      	movs	r2, #0
 8000864:	801a      	strh	r2, [r3, #0]
				setTimer(0, 2000);
 8000866:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800086a:	2000      	movs	r0, #0
 800086c:	f000 f972 	bl	8000b54 <setTimer>
			}
			if(flag_timer[1]){
 8000870:	4b39      	ldr	r3, [pc, #228]	@ (8000958 <Exercise_5+0x26c>)
 8000872:	885b      	ldrh	r3, [r3, #2]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d063      	beq.n	8000940 <Exercise_5+0x254>
				count_7seg--;
 8000878:	4b35      	ldr	r3, [pc, #212]	@ (8000950 <Exercise_5+0x264>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	3b01      	subs	r3, #1
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b33      	ldr	r3, [pc, #204]	@ (8000950 <Exercise_5+0x264>)
 8000882:	701a      	strb	r2, [r3, #0]
				//if(count_7seg < 1) count_7seg = 2;
				count_7seg1--;
 8000884:	4b33      	ldr	r3, [pc, #204]	@ (8000954 <Exercise_5+0x268>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	3b01      	subs	r3, #1
 800088a:	b2da      	uxtb	r2, r3
 800088c:	4b31      	ldr	r3, [pc, #196]	@ (8000954 <Exercise_5+0x268>)
 800088e:	701a      	strb	r2, [r3, #0]
				if(count_7seg1 < 1) count_7seg1 = 2;
 8000890:	4b30      	ldr	r3, [pc, #192]	@ (8000954 <Exercise_5+0x268>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d102      	bne.n	800089e <Exercise_5+0x1b2>
 8000898:	4b2e      	ldr	r3, [pc, #184]	@ (8000954 <Exercise_5+0x268>)
 800089a:	2202      	movs	r2, #2
 800089c:	701a      	strb	r2, [r3, #0]
				flag_timer[1] = 0;
 800089e:	4b2e      	ldr	r3, [pc, #184]	@ (8000958 <Exercise_5+0x26c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	805a      	strh	r2, [r3, #2]
			}
			break;
 80008a4:	e04c      	b.n	8000940 <Exercise_5+0x254>

		case state_3:
			//7segment display
			display7SEG(0, count_7seg);
 80008a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000950 <Exercise_5+0x264>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	4619      	mov	r1, r3
 80008ac:	2000      	movs	r0, #0
 80008ae:	f7ff fe29 	bl	8000504 <display7SEG>
			display7SEG(1, count_7seg1);
 80008b2:	4b28      	ldr	r3, [pc, #160]	@ (8000954 <Exercise_5+0x268>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	4619      	mov	r1, r3
 80008b8:	2001      	movs	r0, #1
 80008ba:	f7ff fe23 	bl	8000504 <display7SEG>
			//traffic
			decoder_Led(1, 0, 1, 0, 1, 1);;
 80008be:	2301      	movs	r3, #1
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	2301      	movs	r3, #1
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	2300      	movs	r3, #0
 80008c8:	2201      	movs	r2, #1
 80008ca:	2100      	movs	r1, #0
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff fed3 	bl	8000678 <decoder_Led>

			if(flag_timer[0]){
 80008d2:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <Exercise_5+0x26c>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d00a      	beq.n	80008f0 <Exercise_5+0x204>
				pre_state = state_0;
 80008da:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <Exercise_5+0x260>)
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
				flag_timer[0] = 0;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <Exercise_5+0x26c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	801a      	strh	r2, [r3, #0]
				setTimer(0, 3000);
 80008e6:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 f932 	bl	8000b54 <setTimer>
			}
			if(flag_timer[1]){
 80008f0:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <Exercise_5+0x26c>)
 80008f2:	885b      	ldrh	r3, [r3, #2]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d025      	beq.n	8000944 <Exercise_5+0x258>
				count_7seg--;
 80008f8:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <Exercise_5+0x264>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	3b01      	subs	r3, #1
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <Exercise_5+0x264>)
 8000902:	701a      	strb	r2, [r3, #0]
				if(count_7seg < 1) count_7seg = 3;
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <Exercise_5+0x264>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d102      	bne.n	8000912 <Exercise_5+0x226>
 800090c:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <Exercise_5+0x264>)
 800090e:	2203      	movs	r2, #3
 8000910:	701a      	strb	r2, [r3, #0]
				count_7seg1--;
 8000912:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <Exercise_5+0x268>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	3b01      	subs	r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <Exercise_5+0x268>)
 800091c:	701a      	strb	r2, [r3, #0]
				if(count_7seg1 < 1) count_7seg1 = 5;
 800091e:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <Exercise_5+0x268>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d102      	bne.n	800092c <Exercise_5+0x240>
 8000926:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <Exercise_5+0x268>)
 8000928:	2205      	movs	r2, #5
 800092a:	701a      	strb	r2, [r3, #0]
				flag_timer[1] = 0;
 800092c:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <Exercise_5+0x26c>)
 800092e:	2200      	movs	r2, #0
 8000930:	805a      	strh	r2, [r3, #2]
			}
			break;
 8000932:	e007      	b.n	8000944 <Exercise_5+0x258>
		default:
			break;
 8000934:	bf00      	nop
 8000936:	e006      	b.n	8000946 <Exercise_5+0x25a>
			break;
 8000938:	bf00      	nop
 800093a:	e004      	b.n	8000946 <Exercise_5+0x25a>
			break;
 800093c:	bf00      	nop
 800093e:	e002      	b.n	8000946 <Exercise_5+0x25a>
			break;
 8000940:	bf00      	nop
 8000942:	e000      	b.n	8000946 <Exercise_5+0x25a>
			break;
 8000944:	bf00      	nop
	}
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000037 	.word	0x20000037
 8000950:	20000000 	.word	0x20000000
 8000954:	20000001 	.word	0x20000001
 8000958:	20000080 	.word	0x20000080

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000960:	f000 fa21 	bl	8000da6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000964:	f000 f809 	bl	800097a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000968:	f000 f88e 	bl	8000a88 <MX_GPIO_Init>
  MX_TIM2_Init();
 800096c:	f000 f840 	bl	80009f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  System_init_Lab1();
 8000970:	f7ff fc4e 	bl	8000210 <System_init_Lab1>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Exercise_5();
 8000974:	f7ff feba 	bl	80006ec <Exercise_5>
 8000978:	e7fc      	b.n	8000974 <main+0x18>

0800097a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b090      	sub	sp, #64	@ 0x40
 800097e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000980:	f107 0318 	add.w	r3, r7, #24
 8000984:	2228      	movs	r2, #40	@ 0x28
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f001 fcd9 	bl	8002340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800099c:	2302      	movs	r3, #2
 800099e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a0:	2301      	movs	r3, #1
 80009a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a4:	2310      	movs	r3, #16
 80009a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0318 	add.w	r3, r7, #24
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fcfb 	bl	80013ac <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009bc:	f000 f8ba 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	230f      	movs	r3, #15
 80009c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 ff69 	bl	80018b0 <HAL_RCC_ClockConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009e4:	f000 f8a6 	bl	8000b34 <Error_Handler>
  }
}
 80009e8:	bf00      	nop
 80009ea:	3740      	adds	r7, #64	@ 0x40
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a04:	463b      	mov	r3, r7
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a84 <MX_TIM2_Init+0x94>)
 8000a0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	@ (8000a84 <MX_TIM2_Init+0x94>)
 8000a16:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000a1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	@ (8000a84 <MX_TIM2_Init+0x94>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000a22:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <MX_TIM2_Init+0x94>)
 8000a24:	2209      	movs	r2, #9
 8000a26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <MX_TIM2_Init+0x94>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2e:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <MX_TIM2_Init+0x94>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a34:	4813      	ldr	r0, [pc, #76]	@ (8000a84 <MX_TIM2_Init+0x94>)
 8000a36:	f001 f863 	bl	8001b00 <HAL_TIM_Base_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a40:	f000 f878 	bl	8000b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480c      	ldr	r0, [pc, #48]	@ (8000a84 <MX_TIM2_Init+0x94>)
 8000a52:	f001 f9ef 	bl	8001e34 <HAL_TIM_ConfigClockSource>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a5c:	f000 f86a 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a60:	2300      	movs	r3, #0
 8000a62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a68:	463b      	mov	r3, r7
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <MX_TIM2_Init+0x94>)
 8000a6e:	f001 fbef 	bl	8002250 <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a78:	f000 f85c 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000038 	.word	0x20000038

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	4b22      	ldr	r3, [pc, #136]	@ (8000b28 <MX_GPIO_Init+0xa0>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a21      	ldr	r2, [pc, #132]	@ (8000b28 <MX_GPIO_Init+0xa0>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <MX_GPIO_Init+0xa0>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <MX_GPIO_Init+0xa0>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b28 <MX_GPIO_Init+0xa0>)
 8000aba:	f043 0308 	orr.w	r3, r3, #8
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <MX_GPIO_Init+0xa0>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_Red_Pin|Led_Yellow_Pin|Led_Green_Pin|Led_Red2_Pin
 8000acc:	2200      	movs	r2, #0
 8000ace:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
 8000ad2:	4816      	ldr	r0, [pc, #88]	@ (8000b2c <MX_GPIO_Init+0xa4>)
 8000ad4:	f000 fc52 	bl	800137c <HAL_GPIO_WritePin>
                          |Led_Yellow2_Pin|Led_Green2_Pin|SEG_0_Pin|SEG_1_Pin
                          |SEG_2_Pin|SEG_3_Pin|SEG_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_5_Pin|SEG_6_Pin|SEG1_0_Pin|SEG1_1_Pin
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000ade:	4814      	ldr	r0, [pc, #80]	@ (8000b30 <MX_GPIO_Init+0xa8>)
 8000ae0:	f000 fc4c 	bl	800137c <HAL_GPIO_WritePin>
                          |SEG1_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Led_Red_Pin Led_Yellow_Pin Led_Green_Pin Led_Red2_Pin
                           Led_Yellow2_Pin Led_Green2_Pin SEG_0_Pin SEG_1_Pin
                           SEG_2_Pin SEG_3_Pin SEG_4_Pin */
  GPIO_InitStruct.Pin = Led_Red_Pin|Led_Yellow_Pin|Led_Green_Pin|Led_Red2_Pin
 8000ae4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000ae8:	60bb      	str	r3, [r7, #8]
                          |Led_Yellow2_Pin|Led_Green2_Pin|SEG_0_Pin|SEG_1_Pin
                          |SEG_2_Pin|SEG_3_Pin|SEG_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2302      	movs	r3, #2
 8000af4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	4619      	mov	r1, r3
 8000afc:	480b      	ldr	r0, [pc, #44]	@ (8000b2c <MX_GPIO_Init+0xa4>)
 8000afe:	f000 fab9 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_5_Pin SEG_6_Pin SEG1_0_Pin SEG1_1_Pin
                           SEG1_2_Pin SEG1_3_Pin SEG1_4_Pin SEG1_5_Pin
                           SEG1_6_Pin */
  GPIO_InitStruct.Pin = SEG_5_Pin|SEG_6_Pin|SEG1_0_Pin|SEG1_1_Pin
 8000b02:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8000b06:	60bb      	str	r3, [r7, #8]
                          |SEG1_2_Pin|SEG1_3_Pin|SEG1_4_Pin|SEG1_5_Pin
                          |SEG1_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2302      	movs	r3, #2
 8000b12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_GPIO_Init+0xa8>)
 8000b1c:	f000 faaa 	bl	8001074 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b20:	bf00      	nop
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40010800 	.word	0x40010800
 8000b30:	40010c00 	.word	0x40010c00

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <Error_Handler+0x8>

08000b40 <timer_init>:
uint16_t timer_counter[10];
uint16_t timer_MUL[10];



void timer_init(){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000b44:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <timer_init+0x10>)
 8000b46:	f001 f82b 	bl	8001ba0 <HAL_TIM_Base_Start_IT>
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000038 	.word	0x20000038

08000b54 <setTimer>:
/////////////////////////////////////////////////////////////
void setTimer(uint8_t index, uint16_t duration){
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	71fb      	strb	r3, [r7, #7]
 8000b60:	4613      	mov	r3, r2
 8000b62:	80bb      	strh	r3, [r7, #4]
	timer_MUL[index] = duration/TIMER_CYCLE;
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	88ba      	ldrh	r2, [r7, #4]
 8000b68:	490c      	ldr	r1, [pc, #48]	@ (8000b9c <setTimer+0x48>)
 8000b6a:	fba1 1202 	umull	r1, r2, r1, r2
 8000b6e:	08d2      	lsrs	r2, r2, #3
 8000b70:	b291      	uxth	r1, r2
 8000b72:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba0 <setTimer+0x4c>)
 8000b74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	flag_timer[index] = 0;
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba4 <setTimer+0x50>)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	timer_counter[index] = timer_MUL[index];
 8000b82:	79fa      	ldrb	r2, [r7, #7]
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	4906      	ldr	r1, [pc, #24]	@ (8000ba0 <setTimer+0x4c>)
 8000b88:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000b8c:	4a06      	ldr	r2, [pc, #24]	@ (8000ba8 <setTimer+0x54>)
 8000b8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	cccccccd 	.word	0xcccccccd
 8000ba0:	200000a8 	.word	0x200000a8
 8000ba4:	20000080 	.word	0x20000080
 8000ba8:	20000094 	.word	0x20000094

08000bac <timer_run>:

void timer_run(uint8_t index){
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
	if(timer_counter[index] > 0){
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4a12      	ldr	r2, [pc, #72]	@ (8000c04 <timer_run+0x58>)
 8000bba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d01b      	beq.n	8000bfa <timer_run+0x4e>
		timer_counter[index]--;
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	4a0f      	ldr	r2, [pc, #60]	@ (8000c04 <timer_run+0x58>)
 8000bc6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000bca:	3a01      	subs	r2, #1
 8000bcc:	b291      	uxth	r1, r2
 8000bce:	4a0d      	ldr	r2, [pc, #52]	@ (8000c04 <timer_run+0x58>)
 8000bd0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(timer_counter[index] <= 0){
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8000c04 <timer_run+0x58>)
 8000bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d10c      	bne.n	8000bfa <timer_run+0x4e>
			flag_timer[index] = 1;
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	4a09      	ldr	r2, [pc, #36]	@ (8000c08 <timer_run+0x5c>)
 8000be4:	2101      	movs	r1, #1
 8000be6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			timer_counter[index] = timer_MUL[index];
 8000bea:	79fa      	ldrb	r2, [r7, #7]
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	4907      	ldr	r1, [pc, #28]	@ (8000c0c <timer_run+0x60>)
 8000bf0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000bf4:	4a03      	ldr	r2, [pc, #12]	@ (8000c04 <timer_run+0x58>)
 8000bf6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
	}

}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	20000094 	.word	0x20000094
 8000c08:	20000080 	.word	0x20000080
 8000c0c:	200000a8 	.word	0x200000a8

08000c10 <HAL_TIM_PeriodElapsedCallback>:

///////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c20:	d105      	bne.n	8000c2e <HAL_TIM_PeriodElapsedCallback+0x1e>
//		for(int i = 0; i <= (sizeof(flag_timer) / sizeof(flag_timer[0])); i++){
//			timer_run(i);
//		}
		timer_run(0);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff ffc2 	bl	8000bac <timer_run>
		timer_run(1);
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f7ff ffbf 	bl	8000bac <timer_run>
	}


}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c3e:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <HAL_MspInit+0x5c>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	4a14      	ldr	r2, [pc, #80]	@ (8000c94 <HAL_MspInit+0x5c>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6193      	str	r3, [r2, #24]
 8000c4a:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <HAL_MspInit+0x5c>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <HAL_MspInit+0x5c>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c94 <HAL_MspInit+0x5c>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c60:	61d3      	str	r3, [r2, #28]
 8000c62:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <HAL_MspInit+0x5c>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <HAL_MspInit+0x60>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <HAL_MspInit+0x60>)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40010000 	.word	0x40010000

08000c9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cac:	d113      	bne.n	8000cd6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <HAL_TIM_Base_MspInit+0x44>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce0 <HAL_TIM_Base_MspInit+0x44>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	61d3      	str	r3, [r2, #28]
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <HAL_TIM_Base_MspInit+0x44>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	201c      	movs	r0, #28
 8000ccc:	f000 f99b 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cd0:	201c      	movs	r0, #28
 8000cd2:	f000 f9b4 	bl	800103e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <NMI_Handler+0x4>

08000cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f874 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d40:	4802      	ldr	r0, [pc, #8]	@ (8000d4c <TIM2_IRQHandler+0x10>)
 8000d42:	f000 ff87 	bl	8001c54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000038 	.word	0x20000038

08000d50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d5c:	f7ff fff8 	bl	8000d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d60:	480b      	ldr	r0, [pc, #44]	@ (8000d90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d62:	490c      	ldr	r1, [pc, #48]	@ (8000d94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d64:	4a0c      	ldr	r2, [pc, #48]	@ (8000d98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a09      	ldr	r2, [pc, #36]	@ (8000d9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d78:	4c09      	ldr	r4, [pc, #36]	@ (8000da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d86:	f001 fae3 	bl	8002350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d8a:	f7ff fde7 	bl	800095c <main>
  bx lr
 8000d8e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d98:	08002410 	.word	0x08002410
  ldr r2, =_sbss
 8000d9c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000da0:	200000c0 	.word	0x200000c0

08000da4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC1_IRQHandler>

08000da6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000daa:	2003      	movs	r0, #3
 8000dac:	f000 f920 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db0:	200f      	movs	r0, #15
 8000db2:	f000 f805 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db6:	f7ff ff3f 	bl	8000c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <HAL_InitTick+0x54>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <HAL_InitTick+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f93b 	bl	800105a <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 f903 	bl	8001006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	@ (8000e1c <HAL_InitTick+0x5c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000004 	.word	0x20000004
 8000e18:	2000000c 	.word	0x2000000c
 8000e1c:	20000008 	.word	0x20000008

08000e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <HAL_IncTick+0x1c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a03      	ldr	r2, [pc, #12]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	2000000c 	.word	0x2000000c
 8000e40:	200000bc 	.word	0x200000bc

08000e44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b02      	ldr	r3, [pc, #8]	@ (8000e54 <HAL_GetTick+0x10>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	200000bc 	.word	0x200000bc

08000e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e68:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8a:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	60d3      	str	r3, [r2, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	@ (8000eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	f003 0307 	and.w	r3, r3, #7
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	db0b      	blt.n	8000ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f003 021f 	and.w	r2, r3, #31
 8000ed4:	4906      	ldr	r1, [pc, #24]	@ (8000ef0 <__NVIC_EnableIRQ+0x34>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	2001      	movs	r0, #1
 8000ede:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db0a      	blt.n	8000f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	490c      	ldr	r1, [pc, #48]	@ (8000f40 <__NVIC_SetPriority+0x4c>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	0112      	lsls	r2, r2, #4
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	440b      	add	r3, r1
 8000f18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f1c:	e00a      	b.n	8000f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4908      	ldr	r1, [pc, #32]	@ (8000f44 <__NVIC_SetPriority+0x50>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	3b04      	subs	r3, #4
 8000f2c:	0112      	lsls	r2, r2, #4
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	440b      	add	r3, r1
 8000f32:	761a      	strb	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	@ 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f1c3 0307 	rsb	r3, r3, #7
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	bf28      	it	cs
 8000f66:	2304      	movcs	r3, #4
 8000f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d902      	bls.n	8000f78 <NVIC_EncodePriority+0x30>
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3b03      	subs	r3, #3
 8000f76:	e000      	b.n	8000f7a <NVIC_EncodePriority+0x32>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43da      	mvns	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43d9      	mvns	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	4313      	orrs	r3, r2
         );
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3724      	adds	r7, #36	@ 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fbc:	d301      	bcc.n	8000fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00f      	b.n	8000fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <SysTick_Config+0x40>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fca:	210f      	movs	r1, #15
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f7ff ff90 	bl	8000ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <SysTick_Config+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <SysTick_Config+0x40>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff2d 	bl	8000e58 <__NVIC_SetPriorityGrouping>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001018:	f7ff ff42 	bl	8000ea0 <__NVIC_GetPriorityGrouping>
 800101c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff ff90 	bl	8000f48 <NVIC_EncodePriority>
 8001028:	4602      	mov	r2, r0
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff5f 	bl	8000ef4 <__NVIC_SetPriority>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff35 	bl	8000ebc <__NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffa2 	bl	8000fac <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001074:	b480      	push	{r7}
 8001076:	b08b      	sub	sp, #44	@ 0x2c
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001086:	e169      	b.n	800135c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001088:	2201      	movs	r2, #1
 800108a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	69fa      	ldr	r2, [r7, #28]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	f040 8158 	bne.w	8001356 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	4a9a      	ldr	r2, [pc, #616]	@ (8001314 <HAL_GPIO_Init+0x2a0>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d05e      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010b0:	4a98      	ldr	r2, [pc, #608]	@ (8001314 <HAL_GPIO_Init+0x2a0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d875      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010b6:	4a98      	ldr	r2, [pc, #608]	@ (8001318 <HAL_GPIO_Init+0x2a4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d058      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010bc:	4a96      	ldr	r2, [pc, #600]	@ (8001318 <HAL_GPIO_Init+0x2a4>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d86f      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010c2:	4a96      	ldr	r2, [pc, #600]	@ (800131c <HAL_GPIO_Init+0x2a8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d052      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010c8:	4a94      	ldr	r2, [pc, #592]	@ (800131c <HAL_GPIO_Init+0x2a8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d869      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010ce:	4a94      	ldr	r2, [pc, #592]	@ (8001320 <HAL_GPIO_Init+0x2ac>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d04c      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010d4:	4a92      	ldr	r2, [pc, #584]	@ (8001320 <HAL_GPIO_Init+0x2ac>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d863      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010da:	4a92      	ldr	r2, [pc, #584]	@ (8001324 <HAL_GPIO_Init+0x2b0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d046      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010e0:	4a90      	ldr	r2, [pc, #576]	@ (8001324 <HAL_GPIO_Init+0x2b0>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d85d      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010e6:	2b12      	cmp	r3, #18
 80010e8:	d82a      	bhi.n	8001140 <HAL_GPIO_Init+0xcc>
 80010ea:	2b12      	cmp	r3, #18
 80010ec:	d859      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010ee:	a201      	add	r2, pc, #4	@ (adr r2, 80010f4 <HAL_GPIO_Init+0x80>)
 80010f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f4:	0800116f 	.word	0x0800116f
 80010f8:	08001149 	.word	0x08001149
 80010fc:	0800115b 	.word	0x0800115b
 8001100:	0800119d 	.word	0x0800119d
 8001104:	080011a3 	.word	0x080011a3
 8001108:	080011a3 	.word	0x080011a3
 800110c:	080011a3 	.word	0x080011a3
 8001110:	080011a3 	.word	0x080011a3
 8001114:	080011a3 	.word	0x080011a3
 8001118:	080011a3 	.word	0x080011a3
 800111c:	080011a3 	.word	0x080011a3
 8001120:	080011a3 	.word	0x080011a3
 8001124:	080011a3 	.word	0x080011a3
 8001128:	080011a3 	.word	0x080011a3
 800112c:	080011a3 	.word	0x080011a3
 8001130:	080011a3 	.word	0x080011a3
 8001134:	080011a3 	.word	0x080011a3
 8001138:	08001151 	.word	0x08001151
 800113c:	08001165 	.word	0x08001165
 8001140:	4a79      	ldr	r2, [pc, #484]	@ (8001328 <HAL_GPIO_Init+0x2b4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001146:	e02c      	b.n	80011a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	623b      	str	r3, [r7, #32]
          break;
 800114e:	e029      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	3304      	adds	r3, #4
 8001156:	623b      	str	r3, [r7, #32]
          break;
 8001158:	e024      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	3308      	adds	r3, #8
 8001160:	623b      	str	r3, [r7, #32]
          break;
 8001162:	e01f      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	330c      	adds	r3, #12
 800116a:	623b      	str	r3, [r7, #32]
          break;
 800116c:	e01a      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d102      	bne.n	800117c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001176:	2304      	movs	r3, #4
 8001178:	623b      	str	r3, [r7, #32]
          break;
 800117a:	e013      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d105      	bne.n	8001190 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001184:	2308      	movs	r3, #8
 8001186:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	611a      	str	r2, [r3, #16]
          break;
 800118e:	e009      	b.n	80011a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001190:	2308      	movs	r3, #8
 8001192:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	615a      	str	r2, [r3, #20]
          break;
 800119a:	e003      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
          break;
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          break;
 80011a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	2bff      	cmp	r3, #255	@ 0xff
 80011a8:	d801      	bhi.n	80011ae <HAL_GPIO_Init+0x13a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	e001      	b.n	80011b2 <HAL_GPIO_Init+0x13e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3304      	adds	r3, #4
 80011b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	2bff      	cmp	r3, #255	@ 0xff
 80011b8:	d802      	bhi.n	80011c0 <HAL_GPIO_Init+0x14c>
 80011ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	e002      	b.n	80011c6 <HAL_GPIO_Init+0x152>
 80011c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c2:	3b08      	subs	r3, #8
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	210f      	movs	r1, #15
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	401a      	ands	r2, r3
 80011d8:	6a39      	ldr	r1, [r7, #32]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	431a      	orrs	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 80b1 	beq.w	8001356 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011f4:	4b4d      	ldr	r3, [pc, #308]	@ (800132c <HAL_GPIO_Init+0x2b8>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a4c      	ldr	r2, [pc, #304]	@ (800132c <HAL_GPIO_Init+0x2b8>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b4a      	ldr	r3, [pc, #296]	@ (800132c <HAL_GPIO_Init+0x2b8>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800120c:	4a48      	ldr	r2, [pc, #288]	@ (8001330 <HAL_GPIO_Init+0x2bc>)
 800120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001210:	089b      	lsrs	r3, r3, #2
 8001212:	3302      	adds	r3, #2
 8001214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001218:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800121a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	220f      	movs	r2, #15
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	4013      	ands	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a40      	ldr	r2, [pc, #256]	@ (8001334 <HAL_GPIO_Init+0x2c0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d013      	beq.n	8001260 <HAL_GPIO_Init+0x1ec>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a3f      	ldr	r2, [pc, #252]	@ (8001338 <HAL_GPIO_Init+0x2c4>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d00d      	beq.n	800125c <HAL_GPIO_Init+0x1e8>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a3e      	ldr	r2, [pc, #248]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d007      	beq.n	8001258 <HAL_GPIO_Init+0x1e4>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a3d      	ldr	r2, [pc, #244]	@ (8001340 <HAL_GPIO_Init+0x2cc>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d101      	bne.n	8001254 <HAL_GPIO_Init+0x1e0>
 8001250:	2303      	movs	r3, #3
 8001252:	e006      	b.n	8001262 <HAL_GPIO_Init+0x1ee>
 8001254:	2304      	movs	r3, #4
 8001256:	e004      	b.n	8001262 <HAL_GPIO_Init+0x1ee>
 8001258:	2302      	movs	r3, #2
 800125a:	e002      	b.n	8001262 <HAL_GPIO_Init+0x1ee>
 800125c:	2301      	movs	r3, #1
 800125e:	e000      	b.n	8001262 <HAL_GPIO_Init+0x1ee>
 8001260:	2300      	movs	r3, #0
 8001262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001264:	f002 0203 	and.w	r2, r2, #3
 8001268:	0092      	lsls	r2, r2, #2
 800126a:	4093      	lsls	r3, r2
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	4313      	orrs	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001272:	492f      	ldr	r1, [pc, #188]	@ (8001330 <HAL_GPIO_Init+0x2bc>)
 8001274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800128c:	4b2d      	ldr	r3, [pc, #180]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	492c      	ldr	r1, [pc, #176]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	608b      	str	r3, [r1, #8]
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800129a:	4b2a      	ldr	r3, [pc, #168]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	4928      	ldr	r1, [pc, #160]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d006      	beq.n	80012c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012b4:	4b23      	ldr	r3, [pc, #140]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	4922      	ldr	r1, [pc, #136]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	60cb      	str	r3, [r1, #12]
 80012c0:	e006      	b.n	80012d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012c2:	4b20      	ldr	r3, [pc, #128]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	491e      	ldr	r1, [pc, #120]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d006      	beq.n	80012ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012dc:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	4918      	ldr	r1, [pc, #96]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012ea:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	4914      	ldr	r1, [pc, #80]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d021      	beq.n	8001348 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	490e      	ldr	r1, [pc, #56]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	600b      	str	r3, [r1, #0]
 8001310:	e021      	b.n	8001356 <HAL_GPIO_Init+0x2e2>
 8001312:	bf00      	nop
 8001314:	10320000 	.word	0x10320000
 8001318:	10310000 	.word	0x10310000
 800131c:	10220000 	.word	0x10220000
 8001320:	10210000 	.word	0x10210000
 8001324:	10120000 	.word	0x10120000
 8001328:	10110000 	.word	0x10110000
 800132c:	40021000 	.word	0x40021000
 8001330:	40010000 	.word	0x40010000
 8001334:	40010800 	.word	0x40010800
 8001338:	40010c00 	.word	0x40010c00
 800133c:	40011000 	.word	0x40011000
 8001340:	40011400 	.word	0x40011400
 8001344:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001348:	4b0b      	ldr	r3, [pc, #44]	@ (8001378 <HAL_GPIO_Init+0x304>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	43db      	mvns	r3, r3
 8001350:	4909      	ldr	r1, [pc, #36]	@ (8001378 <HAL_GPIO_Init+0x304>)
 8001352:	4013      	ands	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001358:	3301      	adds	r3, #1
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001362:	fa22 f303 	lsr.w	r3, r2, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	f47f ae8e 	bne.w	8001088 <HAL_GPIO_Init+0x14>
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	372c      	adds	r7, #44	@ 0x2c
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	40010400 	.word	0x40010400

0800137c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
 8001388:	4613      	mov	r3, r2
 800138a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001398:	e003      	b.n	80013a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800139a:	887b      	ldrh	r3, [r7, #2]
 800139c:	041a      	lsls	r2, r3, #16
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	611a      	str	r2, [r3, #16]
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e272      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 8087 	beq.w	80014da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013cc:	4b92      	ldr	r3, [pc, #584]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 030c 	and.w	r3, r3, #12
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	d00c      	beq.n	80013f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013d8:	4b8f      	ldr	r3, [pc, #572]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 030c 	and.w	r3, r3, #12
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d112      	bne.n	800140a <HAL_RCC_OscConfig+0x5e>
 80013e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013f0:	d10b      	bne.n	800140a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f2:	4b89      	ldr	r3, [pc, #548]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d06c      	beq.n	80014d8 <HAL_RCC_OscConfig+0x12c>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d168      	bne.n	80014d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e24c      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001412:	d106      	bne.n	8001422 <HAL_RCC_OscConfig+0x76>
 8001414:	4b80      	ldr	r3, [pc, #512]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a7f      	ldr	r2, [pc, #508]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 800141a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	e02e      	b.n	8001480 <HAL_RCC_OscConfig+0xd4>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10c      	bne.n	8001444 <HAL_RCC_OscConfig+0x98>
 800142a:	4b7b      	ldr	r3, [pc, #492]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a7a      	ldr	r2, [pc, #488]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b78      	ldr	r3, [pc, #480]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a77      	ldr	r2, [pc, #476]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 800143c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e01d      	b.n	8001480 <HAL_RCC_OscConfig+0xd4>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0xbc>
 800144e:	4b72      	ldr	r3, [pc, #456]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a71      	ldr	r2, [pc, #452]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001454:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b6f      	ldr	r3, [pc, #444]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a6e      	ldr	r2, [pc, #440]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e00b      	b.n	8001480 <HAL_RCC_OscConfig+0xd4>
 8001468:	4b6b      	ldr	r3, [pc, #428]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a6a      	ldr	r2, [pc, #424]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 800146e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b68      	ldr	r3, [pc, #416]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a67      	ldr	r2, [pc, #412]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 800147a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800147e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d013      	beq.n	80014b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fcdc 	bl	8000e44 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fcd8 	bl	8000e44 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	@ 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e200      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0xe4>
 80014ae:	e014      	b.n	80014da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fcc8 	bl	8000e44 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fcc4 	bl	8000e44 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	@ 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e1ec      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ca:	4b53      	ldr	r3, [pc, #332]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x10c>
 80014d6:	e000      	b.n	80014da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d063      	beq.n	80015ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00b      	beq.n	800150a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014f2:	4b49      	ldr	r3, [pc, #292]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 030c 	and.w	r3, r3, #12
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d11c      	bne.n	8001538 <HAL_RCC_OscConfig+0x18c>
 80014fe:	4b46      	ldr	r3, [pc, #280]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d116      	bne.n	8001538 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150a:	4b43      	ldr	r3, [pc, #268]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <HAL_RCC_OscConfig+0x176>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d001      	beq.n	8001522 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e1c0      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	4b3d      	ldr	r3, [pc, #244]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4939      	ldr	r1, [pc, #228]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001536:	e03a      	b.n	80015ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d020      	beq.n	8001582 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001540:	4b36      	ldr	r3, [pc, #216]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001546:	f7ff fc7d 	bl	8000e44 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800154e:	f7ff fc79 	bl	8000e44 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e1a1      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001560:	4b2d      	ldr	r3, [pc, #180]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4927      	ldr	r1, [pc, #156]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
 8001580:	e015      	b.n	80015ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001582:	4b26      	ldr	r3, [pc, #152]	@ (800161c <HAL_RCC_OscConfig+0x270>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fc5c 	bl	8000e44 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001590:	f7ff fc58 	bl	8000e44 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e180      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d03a      	beq.n	8001630 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d019      	beq.n	80015f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c2:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <HAL_RCC_OscConfig+0x274>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c8:	f7ff fc3c 	bl	8000e44 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff fc38 	bl	8000e44 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e160      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001618 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f000 fa68 	bl	8001ac4 <RCC_Delay>
 80015f4:	e01c      	b.n	8001630 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <HAL_RCC_OscConfig+0x274>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fc:	f7ff fc22 	bl	8000e44 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001602:	e00f      	b.n	8001624 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001604:	f7ff fc1e 	bl	8000e44 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d908      	bls.n	8001624 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e146      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	42420000 	.word	0x42420000
 8001620:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001624:	4b92      	ldr	r3, [pc, #584]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1e9      	bne.n	8001604 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80a6 	beq.w	800178a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001642:	4b8b      	ldr	r3, [pc, #556]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10d      	bne.n	800166a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4b88      	ldr	r3, [pc, #544]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a87      	ldr	r2, [pc, #540]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001658:	61d3      	str	r3, [r2, #28]
 800165a:	4b85      	ldr	r3, [pc, #532]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001666:	2301      	movs	r3, #1
 8001668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166a:	4b82      	ldr	r3, [pc, #520]	@ (8001874 <HAL_RCC_OscConfig+0x4c8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001672:	2b00      	cmp	r3, #0
 8001674:	d118      	bne.n	80016a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001676:	4b7f      	ldr	r3, [pc, #508]	@ (8001874 <HAL_RCC_OscConfig+0x4c8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a7e      	ldr	r2, [pc, #504]	@ (8001874 <HAL_RCC_OscConfig+0x4c8>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001682:	f7ff fbdf 	bl	8000e44 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168a:	f7ff fbdb 	bl	8000e44 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b64      	cmp	r3, #100	@ 0x64
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e103      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169c:	4b75      	ldr	r3, [pc, #468]	@ (8001874 <HAL_RCC_OscConfig+0x4c8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d106      	bne.n	80016be <HAL_RCC_OscConfig+0x312>
 80016b0:	4b6f      	ldr	r3, [pc, #444]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4a6e      	ldr	r2, [pc, #440]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6213      	str	r3, [r2, #32]
 80016bc:	e02d      	b.n	800171a <HAL_RCC_OscConfig+0x36e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x334>
 80016c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4a69      	ldr	r2, [pc, #420]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	f023 0301 	bic.w	r3, r3, #1
 80016d0:	6213      	str	r3, [r2, #32]
 80016d2:	4b67      	ldr	r3, [pc, #412]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	4a66      	ldr	r2, [pc, #408]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	f023 0304 	bic.w	r3, r3, #4
 80016dc:	6213      	str	r3, [r2, #32]
 80016de:	e01c      	b.n	800171a <HAL_RCC_OscConfig+0x36e>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d10c      	bne.n	8001702 <HAL_RCC_OscConfig+0x356>
 80016e8:	4b61      	ldr	r3, [pc, #388]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4a60      	ldr	r2, [pc, #384]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6213      	str	r3, [r2, #32]
 80016f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	4a5d      	ldr	r2, [pc, #372]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6213      	str	r3, [r2, #32]
 8001700:	e00b      	b.n	800171a <HAL_RCC_OscConfig+0x36e>
 8001702:	4b5b      	ldr	r3, [pc, #364]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	4a5a      	ldr	r2, [pc, #360]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6213      	str	r3, [r2, #32]
 800170e:	4b58      	ldr	r3, [pc, #352]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	4a57      	ldr	r2, [pc, #348]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	f023 0304 	bic.w	r3, r3, #4
 8001718:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d015      	beq.n	800174e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001722:	f7ff fb8f 	bl	8000e44 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001728:	e00a      	b.n	8001740 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172a:	f7ff fb8b 	bl	8000e44 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001738:	4293      	cmp	r3, r2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e0b1      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001740:	4b4b      	ldr	r3, [pc, #300]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0ee      	beq.n	800172a <HAL_RCC_OscConfig+0x37e>
 800174c:	e014      	b.n	8001778 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174e:	f7ff fb79 	bl	8000e44 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff fb75 	bl	8000e44 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e09b      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176c:	4b40      	ldr	r3, [pc, #256]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1ee      	bne.n	8001756 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001778:	7dfb      	ldrb	r3, [r7, #23]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d105      	bne.n	800178a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177e:	4b3c      	ldr	r3, [pc, #240]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	4a3b      	ldr	r2, [pc, #236]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001788:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 8087 	beq.w	80018a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001794:	4b36      	ldr	r3, [pc, #216]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	d061      	beq.n	8001864 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d146      	bne.n	8001836 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a8:	4b33      	ldr	r3, [pc, #204]	@ (8001878 <HAL_RCC_OscConfig+0x4cc>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ae:	f7ff fb49 	bl	8000e44 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b6:	f7ff fb45 	bl	8000e44 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e06d      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c8:	4b29      	ldr	r3, [pc, #164]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f0      	bne.n	80017b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017dc:	d108      	bne.n	80017f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017de:	4b24      	ldr	r3, [pc, #144]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e2:	f023 020f 	bic.w	r2, r3, #15
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	4921      	ldr	r1, [pc, #132]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a19      	ldr	r1, [r3, #32]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001800:	430b      	orrs	r3, r1
 8001802:	491b      	ldr	r1, [pc, #108]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001808:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <HAL_RCC_OscConfig+0x4cc>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff fb19 	bl	8000e44 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001816:	f7ff fb15 	bl	8000e44 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e03d      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001828:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x46a>
 8001834:	e035      	b.n	80018a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001836:	4b10      	ldr	r3, [pc, #64]	@ (8001878 <HAL_RCC_OscConfig+0x4cc>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fb02 	bl	8000e44 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff fafe 	bl	8000e44 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e026      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001856:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x498>
 8001862:	e01e      	b.n	80018a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d107      	bne.n	800187c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e019      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
 8001870:	40021000 	.word	0x40021000
 8001874:	40007000 	.word	0x40007000
 8001878:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800187c:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <HAL_RCC_OscConfig+0x500>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	429a      	cmp	r2, r3
 800188e:	d106      	bne.n	800189e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d001      	beq.n	80018a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40021000 	.word	0x40021000

080018b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0a0      	b.n	8001a06 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d020      	beq.n	8001912 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001a10 <HAL_RCC_ClockConfig+0x160>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001a10 <HAL_RCC_ClockConfig+0x160>)
 80018e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f4:	4b46      	ldr	r3, [pc, #280]	@ (8001a10 <HAL_RCC_ClockConfig+0x160>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	4a45      	ldr	r2, [pc, #276]	@ (8001a10 <HAL_RCC_ClockConfig+0x160>)
 80018fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80018fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001900:	4b43      	ldr	r3, [pc, #268]	@ (8001a10 <HAL_RCC_ClockConfig+0x160>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4940      	ldr	r1, [pc, #256]	@ (8001a10 <HAL_RCC_ClockConfig+0x160>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d040      	beq.n	80019a0 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b3a      	ldr	r3, [pc, #232]	@ (8001a10 <HAL_RCC_ClockConfig+0x160>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d115      	bne.n	800195e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e067      	b.n	8001a06 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d107      	bne.n	800194e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193e:	4b34      	ldr	r3, [pc, #208]	@ (8001a10 <HAL_RCC_ClockConfig+0x160>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d109      	bne.n	800195e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e05b      	b.n	8001a06 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194e:	4b30      	ldr	r3, [pc, #192]	@ (8001a10 <HAL_RCC_ClockConfig+0x160>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e053      	b.n	8001a06 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800195e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a10 <HAL_RCC_ClockConfig+0x160>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f023 0203 	bic.w	r2, r3, #3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	4929      	ldr	r1, [pc, #164]	@ (8001a10 <HAL_RCC_ClockConfig+0x160>)
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001970:	f7ff fa68 	bl	8000e44 <HAL_GetTick>
 8001974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001976:	e00a      	b.n	800198e <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001978:	f7ff fa64 	bl	8000e44 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e03b      	b.n	8001a06 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198e:	4b20      	ldr	r3, [pc, #128]	@ (8001a10 <HAL_RCC_ClockConfig+0x160>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 020c 	and.w	r2, r3, #12
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	429a      	cmp	r2, r3
 800199e:	d1eb      	bne.n	8001978 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d008      	beq.n	80019be <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ac:	4b18      	ldr	r3, [pc, #96]	@ (8001a10 <HAL_RCC_ClockConfig+0x160>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4915      	ldr	r1, [pc, #84]	@ (8001a10 <HAL_RCC_ClockConfig+0x160>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d009      	beq.n	80019de <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ca:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <HAL_RCC_ClockConfig+0x160>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	490d      	ldr	r1, [pc, #52]	@ (8001a10 <HAL_RCC_ClockConfig+0x160>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019de:	f000 f81f 	bl	8001a20 <HAL_RCC_GetSysClockFreq>
 80019e2:	4602      	mov	r2, r0
 80019e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <HAL_RCC_ClockConfig+0x160>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	4909      	ldr	r1, [pc, #36]	@ (8001a14 <HAL_RCC_ClockConfig+0x164>)
 80019f0:	5ccb      	ldrb	r3, [r1, r3]
 80019f2:	fa22 f303 	lsr.w	r3, r2, r3
 80019f6:	4a08      	ldr	r2, [pc, #32]	@ (8001a18 <HAL_RCC_ClockConfig+0x168>)
 80019f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019fa:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <HAL_RCC_ClockConfig+0x16c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f9de 	bl	8000dc0 <HAL_InitTick>

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000
 8001a14:	080023d8 	.word	0x080023d8
 8001a18:	20000004 	.word	0x20000004
 8001a1c:	20000008 	.word	0x20000008

08001a20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x90>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d002      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0x30>
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d003      	beq.n	8001a56 <HAL_RCC_GetSysClockFreq+0x36>
 8001a4e:	e026      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a50:	4b18      	ldr	r3, [pc, #96]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a52:	613b      	str	r3, [r7, #16]
      break;
 8001a54:	e026      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	0c9b      	lsrs	r3, r3, #18
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	4a16      	ldr	r2, [pc, #88]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a60:	5cd3      	ldrb	r3, [r2, r3]
 8001a62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00f      	beq.n	8001a8e <HAL_RCC_GetSysClockFreq+0x6e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001a6e:	4b10      	ldr	r3, [pc, #64]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x90>)
 8001a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	4a11      	ldr	r2, [pc, #68]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a78:	5cd3      	ldrb	r3, [r2, r3]
 8001a7a:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a80:	fb03 f202 	mul.w	r2, r3, r2
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	e004      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0x78>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a0b      	ldr	r2, [pc, #44]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	613b      	str	r3, [r7, #16]
      break;
 8001a9c:	e002      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a9e:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001aa0:	613b      	str	r3, [r7, #16]
      break;
 8001aa2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aa4:	693b      	ldr	r3, [r7, #16]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	371c      	adds	r7, #28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	007a1200 	.word	0x007a1200
 8001ab8:	080023e8 	.word	0x080023e8
 8001abc:	080023f8 	.word	0x080023f8
 8001ac0:	003d0900 	.word	0x003d0900

08001ac4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001acc:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <RCC_Delay+0x34>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8001afc <RCC_Delay+0x38>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	0a5b      	lsrs	r3, r3, #9
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	fb02 f303 	mul.w	r3, r2, r3
 8001ade:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ae0:	bf00      	nop
  }
  while (Delay --);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1e5a      	subs	r2, r3, #1
 8001ae6:	60fa      	str	r2, [r7, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f9      	bne.n	8001ae0 <RCC_Delay+0x1c>
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	20000004 	.word	0x20000004
 8001afc:	10624dd3 	.word	0x10624dd3

08001b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e041      	b.n	8001b96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d106      	bne.n	8001b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff f8b8 	bl	8000c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4610      	mov	r0, r2
 8001b40:	f000 fa64 	bl	800200c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d001      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e03f      	b.n	8001c38 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c44 <HAL_TIM_Base_Start_IT+0xa4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d013      	beq.n	8001c02 <HAL_TIM_Base_Start_IT+0x62>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001be2:	d00e      	beq.n	8001c02 <HAL_TIM_Base_Start_IT+0x62>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a17      	ldr	r2, [pc, #92]	@ (8001c48 <HAL_TIM_Base_Start_IT+0xa8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d009      	beq.n	8001c02 <HAL_TIM_Base_Start_IT+0x62>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a16      	ldr	r2, [pc, #88]	@ (8001c4c <HAL_TIM_Base_Start_IT+0xac>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d004      	beq.n	8001c02 <HAL_TIM_Base_Start_IT+0x62>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a14      	ldr	r2, [pc, #80]	@ (8001c50 <HAL_TIM_Base_Start_IT+0xb0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d111      	bne.n	8001c26 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b06      	cmp	r3, #6
 8001c12:	d010      	beq.n	8001c36 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c24:	e007      	b.n	8001c36 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0201 	orr.w	r2, r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40012c00 	.word	0x40012c00
 8001c48:	40000400 	.word	0x40000400
 8001c4c:	40000800 	.word	0x40000800
 8001c50:	40014000 	.word	0x40014000

08001c54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d020      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d01b      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0202 	mvn.w	r2, #2
 8001c88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f998 	bl	8001fd4 <HAL_TIM_IC_CaptureCallback>
 8001ca4:	e005      	b.n	8001cb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f98b 	bl	8001fc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f99a 	bl	8001fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d020      	beq.n	8001d04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d01b      	beq.n	8001d04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0204 	mvn.w	r2, #4
 8001cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f972 	bl	8001fd4 <HAL_TIM_IC_CaptureCallback>
 8001cf0:	e005      	b.n	8001cfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f965 	bl	8001fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f974 	bl	8001fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d020      	beq.n	8001d50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01b      	beq.n	8001d50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0208 	mvn.w	r2, #8
 8001d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2204      	movs	r2, #4
 8001d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f94c 	bl	8001fd4 <HAL_TIM_IC_CaptureCallback>
 8001d3c:	e005      	b.n	8001d4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f93f 	bl	8001fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f94e 	bl	8001fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d020      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01b      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0210 	mvn.w	r2, #16
 8001d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2208      	movs	r2, #8
 8001d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f926 	bl	8001fd4 <HAL_TIM_IC_CaptureCallback>
 8001d88:	e005      	b.n	8001d96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f919 	bl	8001fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f928 	bl	8001fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00c      	beq.n	8001dc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d007      	beq.n	8001dc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0201 	mvn.w	r2, #1
 8001db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7fe ff28 	bl	8000c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00c      	beq.n	8001de4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d007      	beq.n	8001de4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 faa5 	bl	800232e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00c      	beq.n	8001e08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8f8 	bl	8001ff8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00c      	beq.n	8001e2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f003 0320 	and.w	r3, r3, #32
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d007      	beq.n	8001e2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0220 	mvn.w	r2, #32
 8001e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fa78 	bl	800231c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_TIM_ConfigClockSource+0x1c>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e0b4      	b.n	8001fba <HAL_TIM_ConfigClockSource+0x186>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001e76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e88:	d03e      	beq.n	8001f08 <HAL_TIM_ConfigClockSource+0xd4>
 8001e8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e8e:	f200 8087 	bhi.w	8001fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8001e92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e96:	f000 8086 	beq.w	8001fa6 <HAL_TIM_ConfigClockSource+0x172>
 8001e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e9e:	d87f      	bhi.n	8001fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ea0:	2b70      	cmp	r3, #112	@ 0x70
 8001ea2:	d01a      	beq.n	8001eda <HAL_TIM_ConfigClockSource+0xa6>
 8001ea4:	2b70      	cmp	r3, #112	@ 0x70
 8001ea6:	d87b      	bhi.n	8001fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ea8:	2b60      	cmp	r3, #96	@ 0x60
 8001eaa:	d050      	beq.n	8001f4e <HAL_TIM_ConfigClockSource+0x11a>
 8001eac:	2b60      	cmp	r3, #96	@ 0x60
 8001eae:	d877      	bhi.n	8001fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8001eb0:	2b50      	cmp	r3, #80	@ 0x50
 8001eb2:	d03c      	beq.n	8001f2e <HAL_TIM_ConfigClockSource+0xfa>
 8001eb4:	2b50      	cmp	r3, #80	@ 0x50
 8001eb6:	d873      	bhi.n	8001fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8001eb8:	2b40      	cmp	r3, #64	@ 0x40
 8001eba:	d058      	beq.n	8001f6e <HAL_TIM_ConfigClockSource+0x13a>
 8001ebc:	2b40      	cmp	r3, #64	@ 0x40
 8001ebe:	d86f      	bhi.n	8001fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ec0:	2b30      	cmp	r3, #48	@ 0x30
 8001ec2:	d064      	beq.n	8001f8e <HAL_TIM_ConfigClockSource+0x15a>
 8001ec4:	2b30      	cmp	r3, #48	@ 0x30
 8001ec6:	d86b      	bhi.n	8001fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ec8:	2b20      	cmp	r3, #32
 8001eca:	d060      	beq.n	8001f8e <HAL_TIM_ConfigClockSource+0x15a>
 8001ecc:	2b20      	cmp	r3, #32
 8001ece:	d867      	bhi.n	8001fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d05c      	beq.n	8001f8e <HAL_TIM_ConfigClockSource+0x15a>
 8001ed4:	2b10      	cmp	r3, #16
 8001ed6:	d05a      	beq.n	8001f8e <HAL_TIM_ConfigClockSource+0x15a>
 8001ed8:	e062      	b.n	8001fa0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001eea:	f000 f992 	bl	8002212 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001efc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	609a      	str	r2, [r3, #8]
      break;
 8001f06:	e04f      	b.n	8001fa8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f18:	f000 f97b 	bl	8002212 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f2a:	609a      	str	r2, [r3, #8]
      break;
 8001f2c:	e03c      	b.n	8001fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	f000 f8f2 	bl	8002124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2150      	movs	r1, #80	@ 0x50
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f949 	bl	80021de <TIM_ITRx_SetConfig>
      break;
 8001f4c:	e02c      	b.n	8001fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f000 f910 	bl	8002180 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2160      	movs	r1, #96	@ 0x60
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f939 	bl	80021de <TIM_ITRx_SetConfig>
      break;
 8001f6c:	e01c      	b.n	8001fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	f000 f8d2 	bl	8002124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2140      	movs	r1, #64	@ 0x40
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f929 	bl	80021de <TIM_ITRx_SetConfig>
      break;
 8001f8c:	e00c      	b.n	8001fa8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4619      	mov	r1, r3
 8001f98:	4610      	mov	r0, r2
 8001f9a:	f000 f920 	bl	80021de <TIM_ITRx_SetConfig>
      break;
 8001f9e:	e003      	b.n	8001fa8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8001fa4:	e000      	b.n	8001fa8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001fa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
	...

0800200c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a3b      	ldr	r2, [pc, #236]	@ (800210c <TIM_Base_SetConfig+0x100>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d00b      	beq.n	800203c <TIM_Base_SetConfig+0x30>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800202a:	d007      	beq.n	800203c <TIM_Base_SetConfig+0x30>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a38      	ldr	r2, [pc, #224]	@ (8002110 <TIM_Base_SetConfig+0x104>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d003      	beq.n	800203c <TIM_Base_SetConfig+0x30>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a37      	ldr	r2, [pc, #220]	@ (8002114 <TIM_Base_SetConfig+0x108>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d108      	bne.n	800204e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a2e      	ldr	r2, [pc, #184]	@ (800210c <TIM_Base_SetConfig+0x100>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d017      	beq.n	8002086 <TIM_Base_SetConfig+0x7a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800205c:	d013      	beq.n	8002086 <TIM_Base_SetConfig+0x7a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2b      	ldr	r2, [pc, #172]	@ (8002110 <TIM_Base_SetConfig+0x104>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00f      	beq.n	8002086 <TIM_Base_SetConfig+0x7a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2a      	ldr	r2, [pc, #168]	@ (8002114 <TIM_Base_SetConfig+0x108>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00b      	beq.n	8002086 <TIM_Base_SetConfig+0x7a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a29      	ldr	r2, [pc, #164]	@ (8002118 <TIM_Base_SetConfig+0x10c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <TIM_Base_SetConfig+0x7a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a28      	ldr	r2, [pc, #160]	@ (800211c <TIM_Base_SetConfig+0x110>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d003      	beq.n	8002086 <TIM_Base_SetConfig+0x7a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a27      	ldr	r2, [pc, #156]	@ (8002120 <TIM_Base_SetConfig+0x114>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d108      	bne.n	8002098 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800208c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a13      	ldr	r2, [pc, #76]	@ (800210c <TIM_Base_SetConfig+0x100>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00b      	beq.n	80020dc <TIM_Base_SetConfig+0xd0>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a14      	ldr	r2, [pc, #80]	@ (8002118 <TIM_Base_SetConfig+0x10c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d007      	beq.n	80020dc <TIM_Base_SetConfig+0xd0>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a13      	ldr	r2, [pc, #76]	@ (800211c <TIM_Base_SetConfig+0x110>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d003      	beq.n	80020dc <TIM_Base_SetConfig+0xd0>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a12      	ldr	r2, [pc, #72]	@ (8002120 <TIM_Base_SetConfig+0x114>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d103      	bne.n	80020e4 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f023 0201 	bic.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	611a      	str	r2, [r3, #16]
  }
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	40012c00 	.word	0x40012c00
 8002110:	40000400 	.word	0x40000400
 8002114:	40000800 	.word	0x40000800
 8002118:	40014000 	.word	0x40014000
 800211c:	40014400 	.word	0x40014400
 8002120:	40014800 	.word	0x40014800

08002124 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	f023 0201 	bic.w	r2, r3, #1
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800214e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f023 030a 	bic.w	r3, r3, #10
 8002160:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4313      	orrs	r3, r2
 8002168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	621a      	str	r2, [r3, #32]
}
 8002176:	bf00      	nop
 8002178:	371c      	adds	r7, #28
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	f023 0210 	bic.w	r2, r3, #16
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80021aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	031b      	lsls	r3, r3, #12
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80021bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	621a      	str	r2, [r3, #32]
}
 80021d4:	bf00      	nop
 80021d6:	371c      	adds	r7, #28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021de:	b480      	push	{r7}
 80021e0:	b085      	sub	sp, #20
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f043 0307 	orr.w	r3, r3, #7
 8002200:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	609a      	str	r2, [r3, #8]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr

08002212 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002212:	b480      	push	{r7}
 8002214:	b087      	sub	sp, #28
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800222c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	021a      	lsls	r2, r3, #8
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	431a      	orrs	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	4313      	orrs	r3, r2
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4313      	orrs	r3, r2
 800223e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	609a      	str	r2, [r3, #8]
}
 8002246:	bf00      	nop
 8002248:	371c      	adds	r7, #28
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002264:	2302      	movs	r3, #2
 8002266:	e04b      	b.n	8002300 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800228e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a19      	ldr	r2, [pc, #100]	@ (800230c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d013      	beq.n	80022d4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022b4:	d00e      	beq.n	80022d4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a15      	ldr	r2, [pc, #84]	@ (8002310 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d009      	beq.n	80022d4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a13      	ldr	r2, [pc, #76]	@ (8002314 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d004      	beq.n	80022d4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a12      	ldr	r2, [pc, #72]	@ (8002318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d10c      	bne.n	80022ee <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40012c00 	.word	0x40012c00
 8002310:	40000400 	.word	0x40000400
 8002314:	40000800 	.word	0x40000800
 8002318:	40014000 	.word	0x40014000

0800231c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr

0800232e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <memset>:
 8002340:	4603      	mov	r3, r0
 8002342:	4402      	add	r2, r0
 8002344:	4293      	cmp	r3, r2
 8002346:	d100      	bne.n	800234a <memset+0xa>
 8002348:	4770      	bx	lr
 800234a:	f803 1b01 	strb.w	r1, [r3], #1
 800234e:	e7f9      	b.n	8002344 <memset+0x4>

08002350 <__libc_init_array>:
 8002350:	b570      	push	{r4, r5, r6, lr}
 8002352:	2600      	movs	r6, #0
 8002354:	4d0c      	ldr	r5, [pc, #48]	@ (8002388 <__libc_init_array+0x38>)
 8002356:	4c0d      	ldr	r4, [pc, #52]	@ (800238c <__libc_init_array+0x3c>)
 8002358:	1b64      	subs	r4, r4, r5
 800235a:	10a4      	asrs	r4, r4, #2
 800235c:	42a6      	cmp	r6, r4
 800235e:	d109      	bne.n	8002374 <__libc_init_array+0x24>
 8002360:	f000 f81a 	bl	8002398 <_init>
 8002364:	2600      	movs	r6, #0
 8002366:	4d0a      	ldr	r5, [pc, #40]	@ (8002390 <__libc_init_array+0x40>)
 8002368:	4c0a      	ldr	r4, [pc, #40]	@ (8002394 <__libc_init_array+0x44>)
 800236a:	1b64      	subs	r4, r4, r5
 800236c:	10a4      	asrs	r4, r4, #2
 800236e:	42a6      	cmp	r6, r4
 8002370:	d105      	bne.n	800237e <__libc_init_array+0x2e>
 8002372:	bd70      	pop	{r4, r5, r6, pc}
 8002374:	f855 3b04 	ldr.w	r3, [r5], #4
 8002378:	4798      	blx	r3
 800237a:	3601      	adds	r6, #1
 800237c:	e7ee      	b.n	800235c <__libc_init_array+0xc>
 800237e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002382:	4798      	blx	r3
 8002384:	3601      	adds	r6, #1
 8002386:	e7f2      	b.n	800236e <__libc_init_array+0x1e>
 8002388:	08002408 	.word	0x08002408
 800238c:	08002408 	.word	0x08002408
 8002390:	08002408 	.word	0x08002408
 8002394:	0800240c 	.word	0x0800240c

08002398 <_init>:
 8002398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800239a:	bf00      	nop
 800239c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800239e:	bc08      	pop	{r3}
 80023a0:	469e      	mov	lr, r3
 80023a2:	4770      	bx	lr

080023a4 <_fini>:
 80023a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a6:	bf00      	nop
 80023a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023aa:	bc08      	pop	{r3}
 80023ac:	469e      	mov	lr, r3
 80023ae:	4770      	bx	lr
