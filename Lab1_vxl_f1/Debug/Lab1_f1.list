
Lab1_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020a0  080001d0  080001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002270  08002270  00003270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022c8  080022c8  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  080022c8  080022c8  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022c8  080022c8  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022c8  080022c8  000032c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022cc  080022cc  000032cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080022d0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000010  080022e0  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080022e0  000040c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000849f  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001912  00000000  00000000  0000c4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0000ddf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000763  00000000  00000000  0000e790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010c30  00000000  00000000  0000eef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b15e  00000000  00000000  0001fb23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000671f4  00000000  00000000  0002ac81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00091e75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000270c  00000000  00000000  00091eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000945c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002258 	.word	0x08002258

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08002258 	.word	0x08002258

08000210 <System_init_Lab1>:
 */
#include "Lab1.h"

///////         SYSTEM INIT  	////////////////////////////

void System_init_Lab1(){
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	timer_init();
 8000214:	f000 fbf4 	bl	8000a00 <timer_init>
	setTimer(0, 3000);
 8000218:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800021c:	2000      	movs	r0, #0
 800021e:	f000 fbf9 	bl	8000a14 <setTimer>
	setTimer(1, 1000); // step led 7 segment
 8000222:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000226:	2001      	movs	r0, #1
 8000228:	f000 fbf4 	bl	8000a14 <setTimer>

}
 800022c:	bf00      	nop
 800022e:	bd80      	pop	{r7, pc}

08000230 <calculator_BCD_to_7SEG>:
// 4bit [3:0] -> [A:B]
uint8_t A, B, C, D;
// f(ABCD)
bool a, b, c, d, e, f, g;

void calculator_BCD_to_7SEG(int num){
 8000230:	b4b0      	push	{r4, r5, r7}
 8000232:	b08f      	sub	sp, #60	@ 0x3c
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	uint8_t  buffer;
	unsigned int LED_4bit[] = {
 8000238:	4b9a      	ldr	r3, [pc, #616]	@ (80004a4 <calculator_BCD_to_7SEG+0x274>)
 800023a:	f107 040c 	add.w	r4, r7, #12
 800023e:	461d      	mov	r5, r3
 8000240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000248:	e895 0003 	ldmia.w	r5, {r0, r1}
 800024c:	e884 0003 	stmia.w	r4, {r0, r1}
		    0b0110, //  6
		    0b0111, //  7
		    0b1000, //  8
		    0b1001  //  9
		};
	buffer = LED_4bit[num];
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	009b      	lsls	r3, r3, #2
 8000254:	3338      	adds	r3, #56	@ 0x38
 8000256:	443b      	add	r3, r7
 8000258:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800025c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	// 4bit [3:0] -> [A:B]
	A = (buffer >> 3) & 1;
 8000260:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000264:	08db      	lsrs	r3, r3, #3
 8000266:	b2db      	uxtb	r3, r3
 8000268:	f003 0301 	and.w	r3, r3, #1
 800026c:	b2da      	uxtb	r2, r3
 800026e:	4b8e      	ldr	r3, [pc, #568]	@ (80004a8 <calculator_BCD_to_7SEG+0x278>)
 8000270:	701a      	strb	r2, [r3, #0]
	B = (buffer >> 2) & 1;
 8000272:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000276:	089b      	lsrs	r3, r3, #2
 8000278:	b2db      	uxtb	r3, r3
 800027a:	f003 0301 	and.w	r3, r3, #1
 800027e:	b2da      	uxtb	r2, r3
 8000280:	4b8a      	ldr	r3, [pc, #552]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 8000282:	701a      	strb	r2, [r3, #0]
	C = (buffer >> 1) & 1;
 8000284:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000288:	085b      	lsrs	r3, r3, #1
 800028a:	b2db      	uxtb	r3, r3
 800028c:	f003 0301 	and.w	r3, r3, #1
 8000290:	b2da      	uxtb	r2, r3
 8000292:	4b87      	ldr	r3, [pc, #540]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 8000294:	701a      	strb	r2, [r3, #0]
	D = (buffer >> 0) & 1;
 8000296:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800029a:	f003 0301 	and.w	r3, r3, #1
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	4b84      	ldr	r3, [pc, #528]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 80002a2:	701a      	strb	r2, [r3, #0]

	// f(ABCD)
	a = (!B&!D) | C | (B&D) | A ;
 80002a4:	4b81      	ldr	r3, [pc, #516]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 80002a6:	781a      	ldrb	r2, [r3, #0]
 80002a8:	4b82      	ldr	r3, [pc, #520]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4313      	orrs	r3, r2
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	bf0c      	ite	eq
 80002b4:	2301      	moveq	r3, #1
 80002b6:	2300      	movne	r3, #0
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	461a      	mov	r2, r3
 80002bc:	4b7c      	ldr	r3, [pc, #496]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	4313      	orrs	r3, r2
 80002c2:	4a7a      	ldr	r2, [pc, #488]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 80002c4:	7811      	ldrb	r1, [r2, #0]
 80002c6:	4a7b      	ldr	r2, [pc, #492]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 80002c8:	7812      	ldrb	r2, [r2, #0]
 80002ca:	400a      	ands	r2, r1
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	4313      	orrs	r3, r2
 80002d0:	4a75      	ldr	r2, [pc, #468]	@ (80004a8 <calculator_BCD_to_7SEG+0x278>)
 80002d2:	7812      	ldrb	r2, [r2, #0]
 80002d4:	4313      	orrs	r3, r2
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	bf14      	ite	ne
 80002da:	2301      	movne	r3, #1
 80002dc:	2300      	moveq	r3, #0
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	4b75      	ldr	r3, [pc, #468]	@ (80004b8 <calculator_BCD_to_7SEG+0x288>)
 80002e2:	701a      	strb	r2, [r3, #0]
	b = (!B) | (!C&!D) | (C&D);
 80002e4:	4b71      	ldr	r3, [pc, #452]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	bf0c      	ite	eq
 80002ec:	2301      	moveq	r3, #1
 80002ee:	2300      	movne	r3, #0
 80002f0:	b2da      	uxtb	r2, r3
 80002f2:	4b6f      	ldr	r3, [pc, #444]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 80002f4:	7819      	ldrb	r1, [r3, #0]
 80002f6:	4b6f      	ldr	r3, [pc, #444]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	430b      	orrs	r3, r1
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	2b00      	cmp	r3, #0
 8000300:	bf0c      	ite	eq
 8000302:	2301      	moveq	r3, #1
 8000304:	2300      	movne	r3, #0
 8000306:	b2db      	uxtb	r3, r3
 8000308:	4313      	orrs	r3, r2
 800030a:	b2db      	uxtb	r3, r3
 800030c:	4619      	mov	r1, r3
 800030e:	4b68      	ldr	r3, [pc, #416]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 8000310:	781a      	ldrb	r2, [r3, #0]
 8000312:	4b68      	ldr	r3, [pc, #416]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	4013      	ands	r3, r2
 8000318:	b2db      	uxtb	r3, r3
 800031a:	430b      	orrs	r3, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	bf14      	ite	ne
 8000320:	2301      	movne	r3, #1
 8000322:	2300      	moveq	r3, #0
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4b65      	ldr	r3, [pc, #404]	@ (80004bc <calculator_BCD_to_7SEG+0x28c>)
 8000328:	701a      	strb	r2, [r3, #0]
	c = (!C) | D | B;
 800032a:	4b61      	ldr	r3, [pc, #388]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	bf0c      	ite	eq
 8000332:	2301      	moveq	r3, #1
 8000334:	2300      	movne	r3, #0
 8000336:	b2db      	uxtb	r3, r3
 8000338:	461a      	mov	r2, r3
 800033a:	4b5e      	ldr	r3, [pc, #376]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	4313      	orrs	r3, r2
 8000340:	4a5a      	ldr	r2, [pc, #360]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 8000342:	7812      	ldrb	r2, [r2, #0]
 8000344:	4313      	orrs	r3, r2
 8000346:	2b00      	cmp	r3, #0
 8000348:	bf14      	ite	ne
 800034a:	2301      	movne	r3, #1
 800034c:	2300      	moveq	r3, #0
 800034e:	b2da      	uxtb	r2, r3
 8000350:	4b5b      	ldr	r3, [pc, #364]	@ (80004c0 <calculator_BCD_to_7SEG+0x290>)
 8000352:	701a      	strb	r2, [r3, #0]
	d = (!B&!D) | ((!B)&C) | (B&!C&D) | (C&!D) | A;
 8000354:	4b55      	ldr	r3, [pc, #340]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 8000356:	781a      	ldrb	r2, [r3, #0]
 8000358:	4b56      	ldr	r3, [pc, #344]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	4313      	orrs	r3, r2
 800035e:	b2db      	uxtb	r3, r3
 8000360:	2b00      	cmp	r3, #0
 8000362:	bf0c      	ite	eq
 8000364:	2301      	moveq	r3, #1
 8000366:	2300      	movne	r3, #0
 8000368:	b2db      	uxtb	r3, r3
 800036a:	461a      	mov	r2, r3
 800036c:	4b4f      	ldr	r3, [pc, #316]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b00      	cmp	r3, #0
 8000372:	bf0c      	ite	eq
 8000374:	2301      	moveq	r3, #1
 8000376:	2300      	movne	r3, #0
 8000378:	b2db      	uxtb	r3, r3
 800037a:	4619      	mov	r1, r3
 800037c:	4b4c      	ldr	r3, [pc, #304]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	400b      	ands	r3, r1
 8000382:	431a      	orrs	r2, r3
 8000384:	4b49      	ldr	r3, [pc, #292]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	4619      	mov	r1, r3
 800038a:	4b49      	ldr	r3, [pc, #292]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	bf0c      	ite	eq
 8000392:	2301      	moveq	r3, #1
 8000394:	2300      	movne	r3, #0
 8000396:	b2db      	uxtb	r3, r3
 8000398:	400b      	ands	r3, r1
 800039a:	4946      	ldr	r1, [pc, #280]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 800039c:	7809      	ldrb	r1, [r1, #0]
 800039e:	400b      	ands	r3, r1
 80003a0:	431a      	orrs	r2, r3
 80003a2:	4b43      	ldr	r3, [pc, #268]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	4619      	mov	r1, r3
 80003a8:	4b42      	ldr	r3, [pc, #264]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	bf0c      	ite	eq
 80003b0:	2301      	moveq	r3, #1
 80003b2:	2300      	movne	r3, #0
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	400b      	ands	r3, r1
 80003b8:	4313      	orrs	r3, r2
 80003ba:	4a3b      	ldr	r2, [pc, #236]	@ (80004a8 <calculator_BCD_to_7SEG+0x278>)
 80003bc:	7812      	ldrb	r2, [r2, #0]
 80003be:	4313      	orrs	r3, r2
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	bf14      	ite	ne
 80003c4:	2301      	movne	r3, #1
 80003c6:	2300      	moveq	r3, #0
 80003c8:	b2da      	uxtb	r2, r3
 80003ca:	4b3e      	ldr	r3, [pc, #248]	@ (80004c4 <calculator_BCD_to_7SEG+0x294>)
 80003cc:	701a      	strb	r2, [r3, #0]
	e = (!B&!D) | (C&!D);
 80003ce:	4b37      	ldr	r3, [pc, #220]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 80003d0:	781a      	ldrb	r2, [r3, #0]
 80003d2:	4b38      	ldr	r3, [pc, #224]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	4313      	orrs	r3, r2
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	2b00      	cmp	r3, #0
 80003dc:	bf0c      	ite	eq
 80003de:	2301      	moveq	r3, #1
 80003e0:	2300      	movne	r3, #0
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	461a      	mov	r2, r3
 80003e6:	4b32      	ldr	r3, [pc, #200]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	4619      	mov	r1, r3
 80003ec:	4b31      	ldr	r3, [pc, #196]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	bf0c      	ite	eq
 80003f4:	2301      	moveq	r3, #1
 80003f6:	2300      	movne	r3, #0
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	400b      	ands	r3, r1
 80003fc:	4313      	orrs	r3, r2
 80003fe:	2b00      	cmp	r3, #0
 8000400:	bf14      	ite	ne
 8000402:	2301      	movne	r3, #1
 8000404:	2300      	moveq	r3, #0
 8000406:	b2da      	uxtb	r2, r3
 8000408:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <calculator_BCD_to_7SEG+0x298>)
 800040a:	701a      	strb	r2, [r3, #0]
	f = (!C&!D) | (B&!C) | (B&!D) | A;
 800040c:	4b28      	ldr	r3, [pc, #160]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 800040e:	781a      	ldrb	r2, [r3, #0]
 8000410:	4b28      	ldr	r3, [pc, #160]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	4313      	orrs	r3, r2
 8000416:	b2db      	uxtb	r3, r3
 8000418:	2b00      	cmp	r3, #0
 800041a:	bf0c      	ite	eq
 800041c:	2301      	moveq	r3, #1
 800041e:	2300      	movne	r3, #0
 8000420:	b2db      	uxtb	r3, r3
 8000422:	461a      	mov	r2, r3
 8000424:	4b21      	ldr	r3, [pc, #132]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	4619      	mov	r1, r3
 800042a:	4b21      	ldr	r3, [pc, #132]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	bf0c      	ite	eq
 8000432:	2301      	moveq	r3, #1
 8000434:	2300      	movne	r3, #0
 8000436:	b2db      	uxtb	r3, r3
 8000438:	400b      	ands	r3, r1
 800043a:	431a      	orrs	r2, r3
 800043c:	4b1b      	ldr	r3, [pc, #108]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	4619      	mov	r1, r3
 8000442:	4b1c      	ldr	r3, [pc, #112]	@ (80004b4 <calculator_BCD_to_7SEG+0x284>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b00      	cmp	r3, #0
 8000448:	bf0c      	ite	eq
 800044a:	2301      	moveq	r3, #1
 800044c:	2300      	movne	r3, #0
 800044e:	b2db      	uxtb	r3, r3
 8000450:	400b      	ands	r3, r1
 8000452:	4313      	orrs	r3, r2
 8000454:	4a14      	ldr	r2, [pc, #80]	@ (80004a8 <calculator_BCD_to_7SEG+0x278>)
 8000456:	7812      	ldrb	r2, [r2, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	2b00      	cmp	r3, #0
 800045c:	bf14      	ite	ne
 800045e:	2301      	movne	r3, #1
 8000460:	2300      	moveq	r3, #0
 8000462:	b2da      	uxtb	r2, r3
 8000464:	4b19      	ldr	r3, [pc, #100]	@ (80004cc <calculator_BCD_to_7SEG+0x29c>)
 8000466:	701a      	strb	r2, [r3, #0]
	g = ((!B)&C) | (B&(!C)) | A | (B&(!D));
 8000468:	4b10      	ldr	r3, [pc, #64]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	bf0c      	ite	eq
 8000470:	2301      	moveq	r3, #1
 8000472:	2300      	movne	r3, #0
 8000474:	b2db      	uxtb	r3, r3
 8000476:	461a      	mov	r2, r3
 8000478:	4b0d      	ldr	r3, [pc, #52]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	401a      	ands	r2, r3
 800047e:	4b0b      	ldr	r3, [pc, #44]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	4619      	mov	r1, r3
 8000484:	4b0a      	ldr	r3, [pc, #40]	@ (80004b0 <calculator_BCD_to_7SEG+0x280>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	bf0c      	ite	eq
 800048c:	2301      	moveq	r3, #1
 800048e:	2300      	movne	r3, #0
 8000490:	b2db      	uxtb	r3, r3
 8000492:	400b      	ands	r3, r1
 8000494:	4313      	orrs	r3, r2
 8000496:	4a04      	ldr	r2, [pc, #16]	@ (80004a8 <calculator_BCD_to_7SEG+0x278>)
 8000498:	7812      	ldrb	r2, [r2, #0]
 800049a:	431a      	orrs	r2, r3
 800049c:	4b03      	ldr	r3, [pc, #12]	@ (80004ac <calculator_BCD_to_7SEG+0x27c>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	4619      	mov	r1, r3
 80004a2:	e015      	b.n	80004d0 <calculator_BCD_to_7SEG+0x2a0>
 80004a4:	08002270 	.word	0x08002270
 80004a8:	2000002c 	.word	0x2000002c
 80004ac:	2000002d 	.word	0x2000002d
 80004b0:	2000002e 	.word	0x2000002e
 80004b4:	2000002f 	.word	0x2000002f
 80004b8:	20000030 	.word	0x20000030
 80004bc:	20000031 	.word	0x20000031
 80004c0:	20000032 	.word	0x20000032
 80004c4:	20000033 	.word	0x20000033
 80004c8:	20000034 	.word	0x20000034
 80004cc:	20000035 	.word	0x20000035
 80004d0:	4b0a      	ldr	r3, [pc, #40]	@ (80004fc <calculator_BCD_to_7SEG+0x2cc>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	bf0c      	ite	eq
 80004d8:	2301      	moveq	r3, #1
 80004da:	2300      	movne	r3, #0
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	400b      	ands	r3, r1
 80004e0:	4313      	orrs	r3, r2
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	bf14      	ite	ne
 80004e6:	2301      	movne	r3, #1
 80004e8:	2300      	moveq	r3, #0
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	4b04      	ldr	r3, [pc, #16]	@ (8000500 <calculator_BCD_to_7SEG+0x2d0>)
 80004ee:	701a      	strb	r2, [r3, #0]
//	printf("d: %d \n", !d);
//	printf("e: %d \n", !e);
//	printf("f: %d \n", !f);
//	printf("g: %d \n", !g);
//	printf("-------------- \n");
}
 80004f0:	bf00      	nop
 80004f2:	373c      	adds	r7, #60	@ 0x3c
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bcb0      	pop	{r4, r5, r7}
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000002f 	.word	0x2000002f
 8000500:	20000036 	.word	0x20000036

08000504 <display7SEG>:


void display7SEG(int num){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	calculator_BCD_to_7SEG(num);
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f7ff fe8f 	bl	8000230 <calculator_BCD_to_7SEG>
    HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, !a);
 8000512:	4b27      	ldr	r3, [pc, #156]	@ (80005b0 <display7SEG+0xac>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	f083 0301 	eor.w	r3, r3, #1
 800051a:	b2db      	uxtb	r3, r3
 800051c:	461a      	mov	r2, r3
 800051e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000522:	4824      	ldr	r0, [pc, #144]	@ (80005b4 <display7SEG+0xb0>)
 8000524:	f000 fe8a 	bl	800123c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, !b);
 8000528:	4b23      	ldr	r3, [pc, #140]	@ (80005b8 <display7SEG+0xb4>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	f083 0301 	eor.w	r3, r3, #1
 8000530:	b2db      	uxtb	r3, r3
 8000532:	461a      	mov	r2, r3
 8000534:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000538:	481e      	ldr	r0, [pc, #120]	@ (80005b4 <display7SEG+0xb0>)
 800053a:	f000 fe7f 	bl	800123c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, !c);
 800053e:	4b1f      	ldr	r3, [pc, #124]	@ (80005bc <display7SEG+0xb8>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	f083 0301 	eor.w	r3, r3, #1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	461a      	mov	r2, r3
 800054a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800054e:	4819      	ldr	r0, [pc, #100]	@ (80005b4 <display7SEG+0xb0>)
 8000550:	f000 fe74 	bl	800123c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, !d);
 8000554:	4b1a      	ldr	r3, [pc, #104]	@ (80005c0 <display7SEG+0xbc>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	f083 0301 	eor.w	r3, r3, #1
 800055c:	b2db      	uxtb	r3, r3
 800055e:	461a      	mov	r2, r3
 8000560:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000564:	4813      	ldr	r0, [pc, #76]	@ (80005b4 <display7SEG+0xb0>)
 8000566:	f000 fe69 	bl	800123c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, !e);
 800056a:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <display7SEG+0xc0>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	f083 0301 	eor.w	r3, r3, #1
 8000572:	b2db      	uxtb	r3, r3
 8000574:	461a      	mov	r2, r3
 8000576:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800057a:	480e      	ldr	r0, [pc, #56]	@ (80005b4 <display7SEG+0xb0>)
 800057c:	f000 fe5e 	bl	800123c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, !f);
 8000580:	4b11      	ldr	r3, [pc, #68]	@ (80005c8 <display7SEG+0xc4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	f083 0301 	eor.w	r3, r3, #1
 8000588:	b2db      	uxtb	r3, r3
 800058a:	461a      	mov	r2, r3
 800058c:	2101      	movs	r1, #1
 800058e:	480f      	ldr	r0, [pc, #60]	@ (80005cc <display7SEG+0xc8>)
 8000590:	f000 fe54 	bl	800123c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, !g);
 8000594:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <display7SEG+0xcc>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	f083 0301 	eor.w	r3, r3, #1
 800059c:	b2db      	uxtb	r3, r3
 800059e:	461a      	mov	r2, r3
 80005a0:	2102      	movs	r1, #2
 80005a2:	480a      	ldr	r0, [pc, #40]	@ (80005cc <display7SEG+0xc8>)
 80005a4:	f000 fe4a 	bl	800123c <HAL_GPIO_WritePin>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000030 	.word	0x20000030
 80005b4:	40010800 	.word	0x40010800
 80005b8:	20000031 	.word	0x20000031
 80005bc:	20000032 	.word	0x20000032
 80005c0:	20000033 	.word	0x20000033
 80005c4:	20000034 	.word	0x20000034
 80005c8:	20000035 	.word	0x20000035
 80005cc:	40010c00 	.word	0x40010c00
 80005d0:	20000036 	.word	0x20000036

080005d4 <decoder_Led>:



//////////////////////
void decoder_Led(int R, int Y, int G, int R2, int Y2, int G2){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
 80005e0:	603b      	str	r3, [r7, #0]
	//traffic light 1
	HAL_GPIO_WritePin(Led_Red_GPIO_Port, Led_Red_Pin, R);
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	461a      	mov	r2, r3
 80005e8:	2120      	movs	r1, #32
 80005ea:	4816      	ldr	r0, [pc, #88]	@ (8000644 <decoder_Led+0x70>)
 80005ec:	f000 fe26 	bl	800123c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Yellow_GPIO_Port, Led_Yellow_Pin, Y);
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	461a      	mov	r2, r3
 80005f6:	2140      	movs	r1, #64	@ 0x40
 80005f8:	4812      	ldr	r0, [pc, #72]	@ (8000644 <decoder_Led+0x70>)
 80005fa:	f000 fe1f 	bl	800123c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Green_GPIO_Port, Led_Green_Pin, G);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	461a      	mov	r2, r3
 8000604:	2180      	movs	r1, #128	@ 0x80
 8000606:	480f      	ldr	r0, [pc, #60]	@ (8000644 <decoder_Led+0x70>)
 8000608:	f000 fe18 	bl	800123c <HAL_GPIO_WritePin>

	//traffic light 2
	HAL_GPIO_WritePin(Led_Red2_GPIO_Port, Led_Red2_Pin, R2);
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	461a      	mov	r2, r3
 8000612:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000616:	480b      	ldr	r0, [pc, #44]	@ (8000644 <decoder_Led+0x70>)
 8000618:	f000 fe10 	bl	800123c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port, Led_Yellow2_Pin, Y2);
 800061c:	69bb      	ldr	r3, [r7, #24]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	461a      	mov	r2, r3
 8000622:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000626:	4807      	ldr	r0, [pc, #28]	@ (8000644 <decoder_Led+0x70>)
 8000628:	f000 fe08 	bl	800123c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Green2_GPIO_Port, Led_Green2_Pin, G2);
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000636:	4803      	ldr	r0, [pc, #12]	@ (8000644 <decoder_Led+0x70>)
 8000638:	f000 fe00 	bl	800123c <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40010800 	.word	0x40010800

08000648 <Exercise_5>:
//// 4 way traffic light
typedef enum {state_0, state_1, state_2, state_3} state;
state pre_state = state_0;

uint8_t count_7seg = 3;
void Exercise_5(){
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af02      	add	r7, sp, #8
	switch (pre_state) {
 800064e:	4b71      	ldr	r3, [pc, #452]	@ (8000814 <Exercise_5+0x1cc>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b03      	cmp	r3, #3
 8000654:	f200 80d2 	bhi.w	80007fc <Exercise_5+0x1b4>
 8000658:	a201      	add	r2, pc, #4	@ (adr r2, 8000660 <Exercise_5+0x18>)
 800065a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065e:	bf00      	nop
 8000660:	08000671 	.word	0x08000671
 8000664:	080006d9 	.word	0x080006d9
 8000668:	0800073f 	.word	0x0800073f
 800066c:	08000797 	.word	0x08000797

		case state_0:
			//7segment display
			display7SEG(count_7seg);
 8000670:	4b69      	ldr	r3, [pc, #420]	@ (8000818 <Exercise_5+0x1d0>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff45 	bl	8000504 <display7SEG>
			//traffic
			decoder_Led(0, 1, 1, 1, 1, 0);
 800067a:	2300      	movs	r3, #0
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	2301      	movs	r3, #1
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2301      	movs	r3, #1
 8000684:	2201      	movs	r2, #1
 8000686:	2101      	movs	r1, #1
 8000688:	2000      	movs	r0, #0
 800068a:	f7ff ffa3 	bl	80005d4 <decoder_Led>
			if(flag_timer[0]){
 800068e:	4b63      	ldr	r3, [pc, #396]	@ (800081c <Exercise_5+0x1d4>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00a      	beq.n	80006ac <Exercise_5+0x64>
				pre_state = state_1;
 8000696:	4b5f      	ldr	r3, [pc, #380]	@ (8000814 <Exercise_5+0x1cc>)
 8000698:	2201      	movs	r2, #1
 800069a:	701a      	strb	r2, [r3, #0]
				flag_timer[0] = 0;
 800069c:	4b5f      	ldr	r3, [pc, #380]	@ (800081c <Exercise_5+0x1d4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	801a      	strh	r2, [r3, #0]
				setTimer(0, 2000);
 80006a2:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f9b4 	bl	8000a14 <setTimer>
			}

			if(flag_timer[1]){
 80006ac:	4b5b      	ldr	r3, [pc, #364]	@ (800081c <Exercise_5+0x1d4>)
 80006ae:	885b      	ldrh	r3, [r3, #2]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	f000 80a5 	beq.w	8000800 <Exercise_5+0x1b8>
				count_7seg--;
 80006b6:	4b58      	ldr	r3, [pc, #352]	@ (8000818 <Exercise_5+0x1d0>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4b56      	ldr	r3, [pc, #344]	@ (8000818 <Exercise_5+0x1d0>)
 80006c0:	701a      	strb	r2, [r3, #0]
				if(count_7seg < 1) count_7seg = 2;
 80006c2:	4b55      	ldr	r3, [pc, #340]	@ (8000818 <Exercise_5+0x1d0>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d102      	bne.n	80006d0 <Exercise_5+0x88>
 80006ca:	4b53      	ldr	r3, [pc, #332]	@ (8000818 <Exercise_5+0x1d0>)
 80006cc:	2202      	movs	r2, #2
 80006ce:	701a      	strb	r2, [r3, #0]
				flag_timer[1] = 0;
 80006d0:	4b52      	ldr	r3, [pc, #328]	@ (800081c <Exercise_5+0x1d4>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	805a      	strh	r2, [r3, #2]
			}
			break;
 80006d6:	e093      	b.n	8000800 <Exercise_5+0x1b8>

		case state_1:
			//7segment display
			display7SEG(count_7seg);
 80006d8:	4b4f      	ldr	r3, [pc, #316]	@ (8000818 <Exercise_5+0x1d0>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff11 	bl	8000504 <display7SEG>
			//traffic
			decoder_Led(0, 1, 1, 1, 0, 1);
 80006e2:	2301      	movs	r3, #1
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	2300      	movs	r3, #0
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2301      	movs	r3, #1
 80006ec:	2201      	movs	r2, #1
 80006ee:	2101      	movs	r1, #1
 80006f0:	2000      	movs	r0, #0
 80006f2:	f7ff ff6f 	bl	80005d4 <decoder_Led>
			if(flag_timer[0]){
 80006f6:	4b49      	ldr	r3, [pc, #292]	@ (800081c <Exercise_5+0x1d4>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d00a      	beq.n	8000714 <Exercise_5+0xcc>
				pre_state = state_2;
 80006fe:	4b45      	ldr	r3, [pc, #276]	@ (8000814 <Exercise_5+0x1cc>)
 8000700:	2202      	movs	r2, #2
 8000702:	701a      	strb	r2, [r3, #0]
				flag_timer[0] = 0;
 8000704:	4b45      	ldr	r3, [pc, #276]	@ (800081c <Exercise_5+0x1d4>)
 8000706:	2200      	movs	r2, #0
 8000708:	801a      	strh	r2, [r3, #0]
				setTimer(0, 3000);
 800070a:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800070e:	2000      	movs	r0, #0
 8000710:	f000 f980 	bl	8000a14 <setTimer>
			}
			if(flag_timer[1]){
 8000714:	4b41      	ldr	r3, [pc, #260]	@ (800081c <Exercise_5+0x1d4>)
 8000716:	885b      	ldrh	r3, [r3, #2]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d073      	beq.n	8000804 <Exercise_5+0x1bc>
				count_7seg--;
 800071c:	4b3e      	ldr	r3, [pc, #248]	@ (8000818 <Exercise_5+0x1d0>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	3b01      	subs	r3, #1
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b3c      	ldr	r3, [pc, #240]	@ (8000818 <Exercise_5+0x1d0>)
 8000726:	701a      	strb	r2, [r3, #0]
				if(count_7seg < 1) count_7seg = 5;
 8000728:	4b3b      	ldr	r3, [pc, #236]	@ (8000818 <Exercise_5+0x1d0>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d102      	bne.n	8000736 <Exercise_5+0xee>
 8000730:	4b39      	ldr	r3, [pc, #228]	@ (8000818 <Exercise_5+0x1d0>)
 8000732:	2205      	movs	r2, #5
 8000734:	701a      	strb	r2, [r3, #0]
				flag_timer[1] = 0;
 8000736:	4b39      	ldr	r3, [pc, #228]	@ (800081c <Exercise_5+0x1d4>)
 8000738:	2200      	movs	r2, #0
 800073a:	805a      	strh	r2, [r3, #2]
			}
			break;
 800073c:	e062      	b.n	8000804 <Exercise_5+0x1bc>

		case state_2:
			//7segment display
			display7SEG(count_7seg);
 800073e:	4b36      	ldr	r3, [pc, #216]	@ (8000818 <Exercise_5+0x1d0>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fede 	bl	8000504 <display7SEG>
			//traffic
			decoder_Led(1, 1, 0, 0, 1, 1);
 8000748:	2301      	movs	r3, #1
 800074a:	9301      	str	r3, [sp, #4]
 800074c:	2301      	movs	r3, #1
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2300      	movs	r3, #0
 8000752:	2200      	movs	r2, #0
 8000754:	2101      	movs	r1, #1
 8000756:	2001      	movs	r0, #1
 8000758:	f7ff ff3c 	bl	80005d4 <decoder_Led>
			if(flag_timer[0]){
 800075c:	4b2f      	ldr	r3, [pc, #188]	@ (800081c <Exercise_5+0x1d4>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d00a      	beq.n	800077a <Exercise_5+0x132>
				pre_state = state_3;
 8000764:	4b2b      	ldr	r3, [pc, #172]	@ (8000814 <Exercise_5+0x1cc>)
 8000766:	2203      	movs	r2, #3
 8000768:	701a      	strb	r2, [r3, #0]
				flag_timer[0] = 0;
 800076a:	4b2c      	ldr	r3, [pc, #176]	@ (800081c <Exercise_5+0x1d4>)
 800076c:	2200      	movs	r2, #0
 800076e:	801a      	strh	r2, [r3, #0]
				setTimer(0, 2000);
 8000770:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000774:	2000      	movs	r0, #0
 8000776:	f000 f94d 	bl	8000a14 <setTimer>
			}
			if(flag_timer[1]){
 800077a:	4b28      	ldr	r3, [pc, #160]	@ (800081c <Exercise_5+0x1d4>)
 800077c:	885b      	ldrh	r3, [r3, #2]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d042      	beq.n	8000808 <Exercise_5+0x1c0>
				count_7seg--;
 8000782:	4b25      	ldr	r3, [pc, #148]	@ (8000818 <Exercise_5+0x1d0>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	3b01      	subs	r3, #1
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b23      	ldr	r3, [pc, #140]	@ (8000818 <Exercise_5+0x1d0>)
 800078c:	701a      	strb	r2, [r3, #0]
				//if(count_7seg < 1) count_7seg = 2;
				flag_timer[1] = 0;
 800078e:	4b23      	ldr	r3, [pc, #140]	@ (800081c <Exercise_5+0x1d4>)
 8000790:	2200      	movs	r2, #0
 8000792:	805a      	strh	r2, [r3, #2]
			}
			break;
 8000794:	e038      	b.n	8000808 <Exercise_5+0x1c0>

		case state_3:
			//7segment display
			display7SEG(count_7seg);
 8000796:	4b20      	ldr	r3, [pc, #128]	@ (8000818 <Exercise_5+0x1d0>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff feb2 	bl	8000504 <display7SEG>
			//traffic
			decoder_Led(1, 0, 1, 0, 1, 1);;
 80007a0:	2301      	movs	r3, #1
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	2301      	movs	r3, #1
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2300      	movs	r3, #0
 80007aa:	2201      	movs	r2, #1
 80007ac:	2100      	movs	r1, #0
 80007ae:	2001      	movs	r0, #1
 80007b0:	f7ff ff10 	bl	80005d4 <decoder_Led>
			if(flag_timer[0]){
 80007b4:	4b19      	ldr	r3, [pc, #100]	@ (800081c <Exercise_5+0x1d4>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d00a      	beq.n	80007d2 <Exercise_5+0x18a>
				pre_state = state_0;
 80007bc:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <Exercise_5+0x1cc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
				flag_timer[0] = 0;
 80007c2:	4b16      	ldr	r3, [pc, #88]	@ (800081c <Exercise_5+0x1d4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	801a      	strh	r2, [r3, #0]
				setTimer(0, 3000);
 80007c8:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80007cc:	2000      	movs	r0, #0
 80007ce:	f000 f921 	bl	8000a14 <setTimer>
			}
			if(flag_timer[1]){
 80007d2:	4b12      	ldr	r3, [pc, #72]	@ (800081c <Exercise_5+0x1d4>)
 80007d4:	885b      	ldrh	r3, [r3, #2]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d018      	beq.n	800080c <Exercise_5+0x1c4>
				count_7seg--;
 80007da:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <Exercise_5+0x1d0>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	3b01      	subs	r3, #1
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000818 <Exercise_5+0x1d0>)
 80007e4:	701a      	strb	r2, [r3, #0]
				if(count_7seg < 1) count_7seg = 3;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <Exercise_5+0x1d0>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d102      	bne.n	80007f4 <Exercise_5+0x1ac>
 80007ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <Exercise_5+0x1d0>)
 80007f0:	2203      	movs	r2, #3
 80007f2:	701a      	strb	r2, [r3, #0]
				flag_timer[1] = 0;
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <Exercise_5+0x1d4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	805a      	strh	r2, [r3, #2]
			}
			break;
 80007fa:	e007      	b.n	800080c <Exercise_5+0x1c4>
		default:
			break;
 80007fc:	bf00      	nop
 80007fe:	e006      	b.n	800080e <Exercise_5+0x1c6>
			break;
 8000800:	bf00      	nop
 8000802:	e004      	b.n	800080e <Exercise_5+0x1c6>
			break;
 8000804:	bf00      	nop
 8000806:	e002      	b.n	800080e <Exercise_5+0x1c6>
			break;
 8000808:	bf00      	nop
 800080a:	e000      	b.n	800080e <Exercise_5+0x1c6>
			break;
 800080c:	bf00      	nop
	}
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000037 	.word	0x20000037
 8000818:	20000000 	.word	0x20000000
 800081c:	20000080 	.word	0x20000080

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000824:	f000 fa1f 	bl	8000c66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000828:	f000 f809 	bl	800083e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082c:	f000 f88e 	bl	800094c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000830:	f000 f840 	bl	80008b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  System_init_Lab1();
 8000834:	f7ff fcec 	bl	8000210 <System_init_Lab1>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Exercise_5();
 8000838:	f7ff ff06 	bl	8000648 <Exercise_5>
 800083c:	e7fc      	b.n	8000838 <main+0x18>

0800083e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b090      	sub	sp, #64	@ 0x40
 8000842:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000844:	f107 0318 	add.w	r3, r7, #24
 8000848:	2228      	movs	r2, #40	@ 0x28
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fcd7 	bl	8002200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000860:	2302      	movs	r3, #2
 8000862:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000864:	2301      	movs	r3, #1
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000868:	2310      	movs	r3, #16
 800086a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800086c:	2300      	movs	r3, #0
 800086e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000870:	f107 0318 	add.w	r3, r7, #24
 8000874:	4618      	mov	r0, r3
 8000876:	f000 fcf9 	bl	800126c <HAL_RCC_OscConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000880:	f000 f8b8 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000884:	230f      	movs	r3, #15
 8000886:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f000 ff67 	bl	8001770 <HAL_RCC_ClockConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008a8:	f000 f8a4 	bl	80009f4 <Error_Handler>
  }
}
 80008ac:	bf00      	nop
 80008ae:	3740      	adds	r7, #64	@ 0x40
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c8:	463b      	mov	r3, r7
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <MX_TIM2_Init+0x94>)
 80008d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <MX_TIM2_Init+0x94>)
 80008da:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80008de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e0:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <MX_TIM2_Init+0x94>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80008e6:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <MX_TIM2_Init+0x94>)
 80008e8:	2209      	movs	r2, #9
 80008ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <MX_TIM2_Init+0x94>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f2:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <MX_TIM2_Init+0x94>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008f8:	4813      	ldr	r0, [pc, #76]	@ (8000948 <MX_TIM2_Init+0x94>)
 80008fa:	f001 f861 	bl	80019c0 <HAL_TIM_Base_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000904:	f000 f876 	bl	80009f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800090c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	4619      	mov	r1, r3
 8000914:	480c      	ldr	r0, [pc, #48]	@ (8000948 <MX_TIM2_Init+0x94>)
 8000916:	f001 f9ed 	bl	8001cf4 <HAL_TIM_ConfigClockSource>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000920:	f000 f868 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000924:	2300      	movs	r3, #0
 8000926:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_TIM2_Init+0x94>)
 8000932:	f001 fbed 	bl	8002110 <HAL_TIMEx_MasterConfigSynchronization>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800093c:	f000 f85a 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000038 	.word	0x20000038

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	4b21      	ldr	r3, [pc, #132]	@ (80009e8 <MX_GPIO_Init+0x9c>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a20      	ldr	r2, [pc, #128]	@ (80009e8 <MX_GPIO_Init+0x9c>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b1e      	ldr	r3, [pc, #120]	@ (80009e8 <MX_GPIO_Init+0x9c>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000978:	4b1b      	ldr	r3, [pc, #108]	@ (80009e8 <MX_GPIO_Init+0x9c>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a1a      	ldr	r2, [pc, #104]	@ (80009e8 <MX_GPIO_Init+0x9c>)
 800097e:	f043 0308 	orr.w	r3, r3, #8
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <MX_GPIO_Init+0x9c>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0308 	and.w	r3, r3, #8
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_Red_Pin|Led_Yellow_Pin|Led_Green_Pin|Led_Red2_Pin
 8000990:	2200      	movs	r2, #0
 8000992:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
 8000996:	4815      	ldr	r0, [pc, #84]	@ (80009ec <MX_GPIO_Init+0xa0>)
 8000998:	f000 fc50 	bl	800123c <HAL_GPIO_WritePin>
                          |Led_Yellow2_Pin|Led_Green2_Pin|SEG_0_Pin|SEG_1_Pin
                          |SEG_2_Pin|SEG_3_Pin|SEG_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_5_Pin|SEG_6_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2103      	movs	r1, #3
 80009a0:	4813      	ldr	r0, [pc, #76]	@ (80009f0 <MX_GPIO_Init+0xa4>)
 80009a2:	f000 fc4b 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Led_Red_Pin Led_Yellow_Pin Led_Green_Pin Led_Red2_Pin
                           Led_Yellow2_Pin Led_Green2_Pin SEG_0_Pin SEG_1_Pin
                           SEG_2_Pin SEG_3_Pin SEG_4_Pin */
  GPIO_InitStruct.Pin = Led_Red_Pin|Led_Yellow_Pin|Led_Green_Pin|Led_Red2_Pin
 80009a6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80009aa:	60bb      	str	r3, [r7, #8]
                          |Led_Yellow2_Pin|Led_Green2_Pin|SEG_0_Pin|SEG_1_Pin
                          |SEG_2_Pin|SEG_3_Pin|SEG_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2302      	movs	r3, #2
 80009b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 0308 	add.w	r3, r7, #8
 80009bc:	4619      	mov	r1, r3
 80009be:	480b      	ldr	r0, [pc, #44]	@ (80009ec <MX_GPIO_Init+0xa0>)
 80009c0:	f000 fab8 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_5_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_5_Pin|SEG_6_Pin;
 80009c4:	2303      	movs	r3, #3
 80009c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2302      	movs	r3, #2
 80009d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	4619      	mov	r1, r3
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_GPIO_Init+0xa4>)
 80009dc:	f000 faaa 	bl	8000f34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40010800 	.word	0x40010800
 80009f0:	40010c00 	.word	0x40010c00

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <Error_Handler+0x8>

08000a00 <timer_init>:
uint16_t timer_counter[10];
uint16_t timer_MUL[10];



void timer_init(){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000a04:	4802      	ldr	r0, [pc, #8]	@ (8000a10 <timer_init+0x10>)
 8000a06:	f001 f82b 	bl	8001a60 <HAL_TIM_Base_Start_IT>
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000038 	.word	0x20000038

08000a14 <setTimer>:
/////////////////////////////////////////////////////////////
void setTimer(uint8_t index, uint16_t duration){
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	460a      	mov	r2, r1
 8000a1e:	71fb      	strb	r3, [r7, #7]
 8000a20:	4613      	mov	r3, r2
 8000a22:	80bb      	strh	r3, [r7, #4]
	timer_MUL[index] = duration/TIMER_CYCLE;
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	88ba      	ldrh	r2, [r7, #4]
 8000a28:	490c      	ldr	r1, [pc, #48]	@ (8000a5c <setTimer+0x48>)
 8000a2a:	fba1 1202 	umull	r1, r2, r1, r2
 8000a2e:	08d2      	lsrs	r2, r2, #3
 8000a30:	b291      	uxth	r1, r2
 8000a32:	4a0b      	ldr	r2, [pc, #44]	@ (8000a60 <setTimer+0x4c>)
 8000a34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	flag_timer[index] = 0;
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <setTimer+0x50>)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	timer_counter[index] = timer_MUL[index];
 8000a42:	79fa      	ldrb	r2, [r7, #7]
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	4906      	ldr	r1, [pc, #24]	@ (8000a60 <setTimer+0x4c>)
 8000a48:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000a4c:	4a06      	ldr	r2, [pc, #24]	@ (8000a68 <setTimer+0x54>)
 8000a4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	cccccccd 	.word	0xcccccccd
 8000a60:	200000a8 	.word	0x200000a8
 8000a64:	20000080 	.word	0x20000080
 8000a68:	20000094 	.word	0x20000094

08000a6c <timer_run>:

void timer_run(uint8_t index){
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
	if(timer_counter[index] > 0){
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	4a12      	ldr	r2, [pc, #72]	@ (8000ac4 <timer_run+0x58>)
 8000a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d01b      	beq.n	8000aba <timer_run+0x4e>
		timer_counter[index]--;
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac4 <timer_run+0x58>)
 8000a86:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a8a:	3a01      	subs	r2, #1
 8000a8c:	b291      	uxth	r1, r2
 8000a8e:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac4 <timer_run+0x58>)
 8000a90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(timer_counter[index] <= 0){
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac4 <timer_run+0x58>)
 8000a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d10c      	bne.n	8000aba <timer_run+0x4e>
			flag_timer[index] = 1;
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	4a09      	ldr	r2, [pc, #36]	@ (8000ac8 <timer_run+0x5c>)
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			timer_counter[index] = timer_MUL[index];
 8000aaa:	79fa      	ldrb	r2, [r7, #7]
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	4907      	ldr	r1, [pc, #28]	@ (8000acc <timer_run+0x60>)
 8000ab0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000ab4:	4a03      	ldr	r2, [pc, #12]	@ (8000ac4 <timer_run+0x58>)
 8000ab6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
	}

}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	20000094 	.word	0x20000094
 8000ac8:	20000080 	.word	0x20000080
 8000acc:	200000a8 	.word	0x200000a8

08000ad0 <HAL_TIM_PeriodElapsedCallback>:

///////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ae0:	d105      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x1e>
//		for(int i = 0; i <= (sizeof(flag_timer) / sizeof(flag_timer[0])); i++){
//			timer_run(i);
//		}
		timer_run(0);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f7ff ffc2 	bl	8000a6c <timer_run>
		timer_run(1);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f7ff ffbf 	bl	8000a6c <timer_run>
	}


}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <HAL_MspInit+0x5c>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	4a14      	ldr	r2, [pc, #80]	@ (8000b54 <HAL_MspInit+0x5c>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6193      	str	r3, [r2, #24]
 8000b0a:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <HAL_MspInit+0x5c>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <HAL_MspInit+0x5c>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b54 <HAL_MspInit+0x5c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b20:	61d3      	str	r3, [r2, #28]
 8000b22:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <HAL_MspInit+0x5c>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <HAL_MspInit+0x60>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	4a04      	ldr	r2, [pc, #16]	@ (8000b58 <HAL_MspInit+0x60>)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010000 	.word	0x40010000

08000b5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b6c:	d113      	bne.n	8000b96 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x44>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x44>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	61d3      	str	r3, [r2, #28]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x44>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	201c      	movs	r0, #28
 8000b8c:	f000 f99b 	bl	8000ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b90:	201c      	movs	r0, #28
 8000b92:	f000 f9b4 	bl	8000efe <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <NMI_Handler+0x4>

08000bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf4:	f000 f874 	bl	8000ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c00:	4802      	ldr	r0, [pc, #8]	@ (8000c0c <TIM2_IRQHandler+0x10>)
 8000c02:	f000 ff87 	bl	8001b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000038 	.word	0x20000038

08000c10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr

08000c1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c1c:	f7ff fff8 	bl	8000c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480b      	ldr	r0, [pc, #44]	@ (8000c50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c22:	490c      	ldr	r1, [pc, #48]	@ (8000c54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c24:	4a0c      	ldr	r2, [pc, #48]	@ (8000c58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a09      	ldr	r2, [pc, #36]	@ (8000c5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c38:	4c09      	ldr	r4, [pc, #36]	@ (8000c60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c46:	f001 fae3 	bl	8002210 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c4a:	f7ff fde9 	bl	8000820 <main>
  bx lr
 8000c4e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c54:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c58:	080022d0 	.word	0x080022d0
  ldr r2, =_sbss
 8000c5c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c60:	200000c0 	.word	0x200000c0

08000c64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC1_IRQHandler>

08000c66 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6a:	2003      	movs	r0, #3
 8000c6c:	f000 f920 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c70:	200f      	movs	r0, #15
 8000c72:	f000 f805 	bl	8000c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c76:	f7ff ff3f 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <HAL_InitTick+0x54>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <HAL_InitTick+0x58>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f93b 	bl	8000f1a <HAL_SYSTICK_Config>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00e      	b.n	8000ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d80a      	bhi.n	8000cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f000 f903 	bl	8000ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc0:	4a06      	ldr	r2, [pc, #24]	@ (8000cdc <HAL_InitTick+0x5c>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e000      	b.n	8000ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000004 	.word	0x20000004
 8000cd8:	2000000c 	.word	0x2000000c
 8000cdc:	20000008 	.word	0x20000008

08000ce0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <HAL_IncTick+0x1c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b05      	ldr	r3, [pc, #20]	@ (8000d00 <HAL_IncTick+0x20>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a03      	ldr	r2, [pc, #12]	@ (8000d00 <HAL_IncTick+0x20>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	2000000c 	.word	0x2000000c
 8000d00:	200000bc 	.word	0x200000bc

08000d04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b02      	ldr	r3, [pc, #8]	@ (8000d14 <HAL_GetTick+0x10>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	200000bc 	.word	0x200000bc

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0b      	blt.n	8000da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 021f 	and.w	r2, r3, #31
 8000d94:	4906      	ldr	r1, [pc, #24]	@ (8000db0 <__NVIC_EnableIRQ+0x34>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	@ (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	@ (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	@ 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	@ 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e7c:	d301      	bcc.n	8000e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00f      	b.n	8000ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e82:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <SysTick_Config+0x40>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8a:	210f      	movs	r1, #15
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f7ff ff90 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e94:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <SysTick_Config+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9a:	4b04      	ldr	r3, [pc, #16]	@ (8000eac <SysTick_Config+0x40>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff2d 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed8:	f7ff ff42 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	f7ff ff90 	bl	8000e08 <NVIC_EncodePriority>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff5f 	bl	8000db4 <__NVIC_SetPriority>
}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff35 	bl	8000d7c <__NVIC_EnableIRQ>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ffa2 	bl	8000e6c <SysTick_Config>
 8000f28:	4603      	mov	r3, r0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b08b      	sub	sp, #44	@ 0x2c
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f46:	e169      	b.n	800121c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	69fa      	ldr	r2, [r7, #28]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	f040 8158 	bne.w	8001216 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	4a9a      	ldr	r2, [pc, #616]	@ (80011d4 <HAL_GPIO_Init+0x2a0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d05e      	beq.n	800102e <HAL_GPIO_Init+0xfa>
 8000f70:	4a98      	ldr	r2, [pc, #608]	@ (80011d4 <HAL_GPIO_Init+0x2a0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d875      	bhi.n	8001062 <HAL_GPIO_Init+0x12e>
 8000f76:	4a98      	ldr	r2, [pc, #608]	@ (80011d8 <HAL_GPIO_Init+0x2a4>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d058      	beq.n	800102e <HAL_GPIO_Init+0xfa>
 8000f7c:	4a96      	ldr	r2, [pc, #600]	@ (80011d8 <HAL_GPIO_Init+0x2a4>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d86f      	bhi.n	8001062 <HAL_GPIO_Init+0x12e>
 8000f82:	4a96      	ldr	r2, [pc, #600]	@ (80011dc <HAL_GPIO_Init+0x2a8>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d052      	beq.n	800102e <HAL_GPIO_Init+0xfa>
 8000f88:	4a94      	ldr	r2, [pc, #592]	@ (80011dc <HAL_GPIO_Init+0x2a8>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d869      	bhi.n	8001062 <HAL_GPIO_Init+0x12e>
 8000f8e:	4a94      	ldr	r2, [pc, #592]	@ (80011e0 <HAL_GPIO_Init+0x2ac>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d04c      	beq.n	800102e <HAL_GPIO_Init+0xfa>
 8000f94:	4a92      	ldr	r2, [pc, #584]	@ (80011e0 <HAL_GPIO_Init+0x2ac>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d863      	bhi.n	8001062 <HAL_GPIO_Init+0x12e>
 8000f9a:	4a92      	ldr	r2, [pc, #584]	@ (80011e4 <HAL_GPIO_Init+0x2b0>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d046      	beq.n	800102e <HAL_GPIO_Init+0xfa>
 8000fa0:	4a90      	ldr	r2, [pc, #576]	@ (80011e4 <HAL_GPIO_Init+0x2b0>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d85d      	bhi.n	8001062 <HAL_GPIO_Init+0x12e>
 8000fa6:	2b12      	cmp	r3, #18
 8000fa8:	d82a      	bhi.n	8001000 <HAL_GPIO_Init+0xcc>
 8000faa:	2b12      	cmp	r3, #18
 8000fac:	d859      	bhi.n	8001062 <HAL_GPIO_Init+0x12e>
 8000fae:	a201      	add	r2, pc, #4	@ (adr r2, 8000fb4 <HAL_GPIO_Init+0x80>)
 8000fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb4:	0800102f 	.word	0x0800102f
 8000fb8:	08001009 	.word	0x08001009
 8000fbc:	0800101b 	.word	0x0800101b
 8000fc0:	0800105d 	.word	0x0800105d
 8000fc4:	08001063 	.word	0x08001063
 8000fc8:	08001063 	.word	0x08001063
 8000fcc:	08001063 	.word	0x08001063
 8000fd0:	08001063 	.word	0x08001063
 8000fd4:	08001063 	.word	0x08001063
 8000fd8:	08001063 	.word	0x08001063
 8000fdc:	08001063 	.word	0x08001063
 8000fe0:	08001063 	.word	0x08001063
 8000fe4:	08001063 	.word	0x08001063
 8000fe8:	08001063 	.word	0x08001063
 8000fec:	08001063 	.word	0x08001063
 8000ff0:	08001063 	.word	0x08001063
 8000ff4:	08001063 	.word	0x08001063
 8000ff8:	08001011 	.word	0x08001011
 8000ffc:	08001025 	.word	0x08001025
 8001000:	4a79      	ldr	r2, [pc, #484]	@ (80011e8 <HAL_GPIO_Init+0x2b4>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d013      	beq.n	800102e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001006:	e02c      	b.n	8001062 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	623b      	str	r3, [r7, #32]
          break;
 800100e:	e029      	b.n	8001064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	3304      	adds	r3, #4
 8001016:	623b      	str	r3, [r7, #32]
          break;
 8001018:	e024      	b.n	8001064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	3308      	adds	r3, #8
 8001020:	623b      	str	r3, [r7, #32]
          break;
 8001022:	e01f      	b.n	8001064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	330c      	adds	r3, #12
 800102a:	623b      	str	r3, [r7, #32]
          break;
 800102c:	e01a      	b.n	8001064 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d102      	bne.n	800103c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001036:	2304      	movs	r3, #4
 8001038:	623b      	str	r3, [r7, #32]
          break;
 800103a:	e013      	b.n	8001064 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d105      	bne.n	8001050 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001044:	2308      	movs	r3, #8
 8001046:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	611a      	str	r2, [r3, #16]
          break;
 800104e:	e009      	b.n	8001064 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001050:	2308      	movs	r3, #8
 8001052:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69fa      	ldr	r2, [r7, #28]
 8001058:	615a      	str	r2, [r3, #20]
          break;
 800105a:	e003      	b.n	8001064 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800105c:	2300      	movs	r3, #0
 800105e:	623b      	str	r3, [r7, #32]
          break;
 8001060:	e000      	b.n	8001064 <HAL_GPIO_Init+0x130>
          break;
 8001062:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	2bff      	cmp	r3, #255	@ 0xff
 8001068:	d801      	bhi.n	800106e <HAL_GPIO_Init+0x13a>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	e001      	b.n	8001072 <HAL_GPIO_Init+0x13e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3304      	adds	r3, #4
 8001072:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	2bff      	cmp	r3, #255	@ 0xff
 8001078:	d802      	bhi.n	8001080 <HAL_GPIO_Init+0x14c>
 800107a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	e002      	b.n	8001086 <HAL_GPIO_Init+0x152>
 8001080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001082:	3b08      	subs	r3, #8
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	210f      	movs	r1, #15
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	fa01 f303 	lsl.w	r3, r1, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	401a      	ands	r2, r3
 8001098:	6a39      	ldr	r1, [r7, #32]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	fa01 f303 	lsl.w	r3, r1, r3
 80010a0:	431a      	orrs	r2, r3
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 80b1 	beq.w	8001216 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010b4:	4b4d      	ldr	r3, [pc, #308]	@ (80011ec <HAL_GPIO_Init+0x2b8>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a4c      	ldr	r2, [pc, #304]	@ (80011ec <HAL_GPIO_Init+0x2b8>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b4a      	ldr	r3, [pc, #296]	@ (80011ec <HAL_GPIO_Init+0x2b8>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010cc:	4a48      	ldr	r2, [pc, #288]	@ (80011f0 <HAL_GPIO_Init+0x2bc>)
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3302      	adds	r3, #2
 80010d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	4013      	ands	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a40      	ldr	r2, [pc, #256]	@ (80011f4 <HAL_GPIO_Init+0x2c0>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d013      	beq.n	8001120 <HAL_GPIO_Init+0x1ec>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a3f      	ldr	r2, [pc, #252]	@ (80011f8 <HAL_GPIO_Init+0x2c4>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d00d      	beq.n	800111c <HAL_GPIO_Init+0x1e8>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a3e      	ldr	r2, [pc, #248]	@ (80011fc <HAL_GPIO_Init+0x2c8>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d007      	beq.n	8001118 <HAL_GPIO_Init+0x1e4>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a3d      	ldr	r2, [pc, #244]	@ (8001200 <HAL_GPIO_Init+0x2cc>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d101      	bne.n	8001114 <HAL_GPIO_Init+0x1e0>
 8001110:	2303      	movs	r3, #3
 8001112:	e006      	b.n	8001122 <HAL_GPIO_Init+0x1ee>
 8001114:	2304      	movs	r3, #4
 8001116:	e004      	b.n	8001122 <HAL_GPIO_Init+0x1ee>
 8001118:	2302      	movs	r3, #2
 800111a:	e002      	b.n	8001122 <HAL_GPIO_Init+0x1ee>
 800111c:	2301      	movs	r3, #1
 800111e:	e000      	b.n	8001122 <HAL_GPIO_Init+0x1ee>
 8001120:	2300      	movs	r3, #0
 8001122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001124:	f002 0203 	and.w	r2, r2, #3
 8001128:	0092      	lsls	r2, r2, #2
 800112a:	4093      	lsls	r3, r2
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001132:	492f      	ldr	r1, [pc, #188]	@ (80011f0 <HAL_GPIO_Init+0x2bc>)
 8001134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	3302      	adds	r3, #2
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d006      	beq.n	800115a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800114c:	4b2d      	ldr	r3, [pc, #180]	@ (8001204 <HAL_GPIO_Init+0x2d0>)
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	492c      	ldr	r1, [pc, #176]	@ (8001204 <HAL_GPIO_Init+0x2d0>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	608b      	str	r3, [r1, #8]
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800115a:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <HAL_GPIO_Init+0x2d0>)
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	43db      	mvns	r3, r3
 8001162:	4928      	ldr	r1, [pc, #160]	@ (8001204 <HAL_GPIO_Init+0x2d0>)
 8001164:	4013      	ands	r3, r2
 8001166:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d006      	beq.n	8001182 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001174:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <HAL_GPIO_Init+0x2d0>)
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	4922      	ldr	r1, [pc, #136]	@ (8001204 <HAL_GPIO_Init+0x2d0>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	60cb      	str	r3, [r1, #12]
 8001180:	e006      	b.n	8001190 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <HAL_GPIO_Init+0x2d0>)
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	43db      	mvns	r3, r3
 800118a:	491e      	ldr	r1, [pc, #120]	@ (8001204 <HAL_GPIO_Init+0x2d0>)
 800118c:	4013      	ands	r3, r2
 800118e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d006      	beq.n	80011aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800119c:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <HAL_GPIO_Init+0x2d0>)
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4918      	ldr	r1, [pc, #96]	@ (8001204 <HAL_GPIO_Init+0x2d0>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	604b      	str	r3, [r1, #4]
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011aa:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <HAL_GPIO_Init+0x2d0>)
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	4914      	ldr	r1, [pc, #80]	@ (8001204 <HAL_GPIO_Init+0x2d0>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d021      	beq.n	8001208 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <HAL_GPIO_Init+0x2d0>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	490e      	ldr	r1, [pc, #56]	@ (8001204 <HAL_GPIO_Init+0x2d0>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	600b      	str	r3, [r1, #0]
 80011d0:	e021      	b.n	8001216 <HAL_GPIO_Init+0x2e2>
 80011d2:	bf00      	nop
 80011d4:	10320000 	.word	0x10320000
 80011d8:	10310000 	.word	0x10310000
 80011dc:	10220000 	.word	0x10220000
 80011e0:	10210000 	.word	0x10210000
 80011e4:	10120000 	.word	0x10120000
 80011e8:	10110000 	.word	0x10110000
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010000 	.word	0x40010000
 80011f4:	40010800 	.word	0x40010800
 80011f8:	40010c00 	.word	0x40010c00
 80011fc:	40011000 	.word	0x40011000
 8001200:	40011400 	.word	0x40011400
 8001204:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001208:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <HAL_GPIO_Init+0x304>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	43db      	mvns	r3, r3
 8001210:	4909      	ldr	r1, [pc, #36]	@ (8001238 <HAL_GPIO_Init+0x304>)
 8001212:	4013      	ands	r3, r2
 8001214:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001218:	3301      	adds	r3, #1
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001222:	fa22 f303 	lsr.w	r3, r2, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	f47f ae8e 	bne.w	8000f48 <HAL_GPIO_Init+0x14>
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	372c      	adds	r7, #44	@ 0x2c
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	40010400 	.word	0x40010400

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001258:	e003      	b.n	8001262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	041a      	lsls	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	611a      	str	r2, [r3, #16]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e272      	b.n	8001764 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 8087 	beq.w	800139a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800128c:	4b92      	ldr	r3, [pc, #584]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b04      	cmp	r3, #4
 8001296:	d00c      	beq.n	80012b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001298:	4b8f      	ldr	r3, [pc, #572]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 030c 	and.w	r3, r3, #12
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d112      	bne.n	80012ca <HAL_RCC_OscConfig+0x5e>
 80012a4:	4b8c      	ldr	r3, [pc, #560]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012b0:	d10b      	bne.n	80012ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b2:	4b89      	ldr	r3, [pc, #548]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d06c      	beq.n	8001398 <HAL_RCC_OscConfig+0x12c>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d168      	bne.n	8001398 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e24c      	b.n	8001764 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012d2:	d106      	bne.n	80012e2 <HAL_RCC_OscConfig+0x76>
 80012d4:	4b80      	ldr	r3, [pc, #512]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a7f      	ldr	r2, [pc, #508]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	e02e      	b.n	8001340 <HAL_RCC_OscConfig+0xd4>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10c      	bne.n	8001304 <HAL_RCC_OscConfig+0x98>
 80012ea:	4b7b      	ldr	r3, [pc, #492]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a7a      	ldr	r2, [pc, #488]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b78      	ldr	r3, [pc, #480]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a77      	ldr	r2, [pc, #476]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e01d      	b.n	8001340 <HAL_RCC_OscConfig+0xd4>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800130c:	d10c      	bne.n	8001328 <HAL_RCC_OscConfig+0xbc>
 800130e:	4b72      	ldr	r3, [pc, #456]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a71      	ldr	r2, [pc, #452]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001314:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	4b6f      	ldr	r3, [pc, #444]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a6e      	ldr	r2, [pc, #440]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e00b      	b.n	8001340 <HAL_RCC_OscConfig+0xd4>
 8001328:	4b6b      	ldr	r3, [pc, #428]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a6a      	ldr	r2, [pc, #424]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800132e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b68      	ldr	r3, [pc, #416]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a67      	ldr	r2, [pc, #412]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800133a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800133e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fcdc 	bl	8000d04 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fcd8 	bl	8000d04 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	@ 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e200      	b.n	8001764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	4b5d      	ldr	r3, [pc, #372]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0xe4>
 800136e:	e014      	b.n	800139a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fcc8 	bl	8000d04 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fcc4 	bl	8000d04 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	@ 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e1ec      	b.n	8001764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	4b53      	ldr	r3, [pc, #332]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x10c>
 8001396:	e000      	b.n	800139a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d063      	beq.n	800146e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013a6:	4b4c      	ldr	r3, [pc, #304]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00b      	beq.n	80013ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013b2:	4b49      	ldr	r3, [pc, #292]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d11c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x18c>
 80013be:	4b46      	ldr	r3, [pc, #280]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d116      	bne.n	80013f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ca:	4b43      	ldr	r3, [pc, #268]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <HAL_RCC_OscConfig+0x176>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e1c0      	b.n	8001764 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e2:	4b3d      	ldr	r3, [pc, #244]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4939      	ldr	r1, [pc, #228]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	e03a      	b.n	800146e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d020      	beq.n	8001442 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001400:	4b36      	ldr	r3, [pc, #216]	@ (80014dc <HAL_RCC_OscConfig+0x270>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001406:	f7ff fc7d 	bl	8000d04 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140e:	f7ff fc79 	bl	8000d04 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e1a1      	b.n	8001764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	4b2d      	ldr	r3, [pc, #180]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142c:	4b2a      	ldr	r3, [pc, #168]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4927      	ldr	r1, [pc, #156]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
 8001440:	e015      	b.n	800146e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001442:	4b26      	ldr	r3, [pc, #152]	@ (80014dc <HAL_RCC_OscConfig+0x270>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7ff fc5c 	bl	8000d04 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001450:	f7ff fc58 	bl	8000d04 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e180      	b.n	8001764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	d03a      	beq.n	80014f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d019      	beq.n	80014b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001482:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <HAL_RCC_OscConfig+0x274>)
 8001484:	2201      	movs	r2, #1
 8001486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001488:	f7ff fc3c 	bl	8000d04 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001490:	f7ff fc38 	bl	8000d04 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e160      	b.n	8001764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	4b0d      	ldr	r3, [pc, #52]	@ (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014ae:	2001      	movs	r0, #1
 80014b0:	f000 fa68 	bl	8001984 <RCC_Delay>
 80014b4:	e01c      	b.n	80014f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b6:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <HAL_RCC_OscConfig+0x274>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014bc:	f7ff fc22 	bl	8000d04 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c2:	e00f      	b.n	80014e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff fc1e 	bl	8000d04 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d908      	bls.n	80014e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e146      	b.n	8001764 <HAL_RCC_OscConfig+0x4f8>
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000
 80014dc:	42420000 	.word	0x42420000
 80014e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	4b92      	ldr	r3, [pc, #584]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 80014e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1e9      	bne.n	80014c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 80a6 	beq.w	800164a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001502:	4b8b      	ldr	r3, [pc, #556]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10d      	bne.n	800152a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	4b88      	ldr	r3, [pc, #544]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	4a87      	ldr	r2, [pc, #540]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001518:	61d3      	str	r3, [r2, #28]
 800151a:	4b85      	ldr	r3, [pc, #532]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001526:	2301      	movs	r3, #1
 8001528:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152a:	4b82      	ldr	r3, [pc, #520]	@ (8001734 <HAL_RCC_OscConfig+0x4c8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001532:	2b00      	cmp	r3, #0
 8001534:	d118      	bne.n	8001568 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001536:	4b7f      	ldr	r3, [pc, #508]	@ (8001734 <HAL_RCC_OscConfig+0x4c8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a7e      	ldr	r2, [pc, #504]	@ (8001734 <HAL_RCC_OscConfig+0x4c8>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001542:	f7ff fbdf 	bl	8000d04 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154a:	f7ff fbdb 	bl	8000d04 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b64      	cmp	r3, #100	@ 0x64
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e103      	b.n	8001764 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	4b75      	ldr	r3, [pc, #468]	@ (8001734 <HAL_RCC_OscConfig+0x4c8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d106      	bne.n	800157e <HAL_RCC_OscConfig+0x312>
 8001570:	4b6f      	ldr	r3, [pc, #444]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	4a6e      	ldr	r2, [pc, #440]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6213      	str	r3, [r2, #32]
 800157c:	e02d      	b.n	80015da <HAL_RCC_OscConfig+0x36e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x334>
 8001586:	4b6a      	ldr	r3, [pc, #424]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	4a69      	ldr	r2, [pc, #420]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	f023 0301 	bic.w	r3, r3, #1
 8001590:	6213      	str	r3, [r2, #32]
 8001592:	4b67      	ldr	r3, [pc, #412]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	4a66      	ldr	r2, [pc, #408]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 8001598:	f023 0304 	bic.w	r3, r3, #4
 800159c:	6213      	str	r3, [r2, #32]
 800159e:	e01c      	b.n	80015da <HAL_RCC_OscConfig+0x36e>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d10c      	bne.n	80015c2 <HAL_RCC_OscConfig+0x356>
 80015a8:	4b61      	ldr	r3, [pc, #388]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4a60      	ldr	r2, [pc, #384]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	6213      	str	r3, [r2, #32]
 80015b4:	4b5e      	ldr	r3, [pc, #376]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4a5d      	ldr	r2, [pc, #372]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6213      	str	r3, [r2, #32]
 80015c0:	e00b      	b.n	80015da <HAL_RCC_OscConfig+0x36e>
 80015c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	4a5a      	ldr	r2, [pc, #360]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	6213      	str	r3, [r2, #32]
 80015ce:	4b58      	ldr	r3, [pc, #352]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	4a57      	ldr	r2, [pc, #348]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	f023 0304 	bic.w	r3, r3, #4
 80015d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d015      	beq.n	800160e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e2:	f7ff fb8f 	bl	8000d04 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e8:	e00a      	b.n	8001600 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ea:	f7ff fb8b 	bl	8000d04 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e0b1      	b.n	8001764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001600:	4b4b      	ldr	r3, [pc, #300]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0ee      	beq.n	80015ea <HAL_RCC_OscConfig+0x37e>
 800160c:	e014      	b.n	8001638 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160e:	f7ff fb79 	bl	8000d04 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001614:	e00a      	b.n	800162c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001616:	f7ff fb75 	bl	8000d04 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001624:	4293      	cmp	r3, r2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e09b      	b.n	8001764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162c:	4b40      	ldr	r3, [pc, #256]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1ee      	bne.n	8001616 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d105      	bne.n	800164a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163e:	4b3c      	ldr	r3, [pc, #240]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4a3b      	ldr	r2, [pc, #236]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001648:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8087 	beq.w	8001762 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001654:	4b36      	ldr	r3, [pc, #216]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b08      	cmp	r3, #8
 800165e:	d061      	beq.n	8001724 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d146      	bne.n	80016f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001668:	4b33      	ldr	r3, [pc, #204]	@ (8001738 <HAL_RCC_OscConfig+0x4cc>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff fb49 	bl	8000d04 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001676:	f7ff fb45 	bl	8000d04 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e06d      	b.n	8001764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001688:	4b29      	ldr	r3, [pc, #164]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f0      	bne.n	8001676 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800169c:	d108      	bne.n	80016b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800169e:	4b24      	ldr	r3, [pc, #144]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a2:	f023 020f 	bic.w	r2, r3, #15
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	4921      	ldr	r1, [pc, #132]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a19      	ldr	r1, [r3, #32]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c0:	430b      	orrs	r3, r1
 80016c2:	491b      	ldr	r1, [pc, #108]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <HAL_RCC_OscConfig+0x4cc>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff fb19 	bl	8000d04 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d6:	f7ff fb15 	bl	8000d04 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e03d      	b.n	8001764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016e8:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x46a>
 80016f4:	e035      	b.n	8001762 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <HAL_RCC_OscConfig+0x4cc>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fb02 	bl	8000d04 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001704:	f7ff fafe 	bl	8000d04 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e026      	b.n	8001764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001716:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x498>
 8001722:	e01e      	b.n	8001762 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d107      	bne.n	800173c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e019      	b.n	8001764 <HAL_RCC_OscConfig+0x4f8>
 8001730:	40021000 	.word	0x40021000
 8001734:	40007000 	.word	0x40007000
 8001738:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800173c:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <HAL_RCC_OscConfig+0x500>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	429a      	cmp	r2, r3
 800174e:	d106      	bne.n	800175e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d001      	beq.n	8001762 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021000 	.word	0x40021000

08001770 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0a0      	b.n	80018c6 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d020      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800179c:	4b4c      	ldr	r3, [pc, #304]	@ (80018d0 <HAL_RCC_ClockConfig+0x160>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4a4b      	ldr	r2, [pc, #300]	@ (80018d0 <HAL_RCC_ClockConfig+0x160>)
 80017a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80017a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b4:	4b46      	ldr	r3, [pc, #280]	@ (80018d0 <HAL_RCC_ClockConfig+0x160>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4a45      	ldr	r2, [pc, #276]	@ (80018d0 <HAL_RCC_ClockConfig+0x160>)
 80017ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80017be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c0:	4b43      	ldr	r3, [pc, #268]	@ (80018d0 <HAL_RCC_ClockConfig+0x160>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4940      	ldr	r1, [pc, #256]	@ (80018d0 <HAL_RCC_ClockConfig+0x160>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d040      	beq.n	8001860 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e6:	4b3a      	ldr	r3, [pc, #232]	@ (80018d0 <HAL_RCC_ClockConfig+0x160>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d115      	bne.n	800181e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e067      	b.n	80018c6 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fe:	4b34      	ldr	r3, [pc, #208]	@ (80018d0 <HAL_RCC_ClockConfig+0x160>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e05b      	b.n	80018c6 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180e:	4b30      	ldr	r3, [pc, #192]	@ (80018d0 <HAL_RCC_ClockConfig+0x160>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e053      	b.n	80018c6 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181e:	4b2c      	ldr	r3, [pc, #176]	@ (80018d0 <HAL_RCC_ClockConfig+0x160>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f023 0203 	bic.w	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4929      	ldr	r1, [pc, #164]	@ (80018d0 <HAL_RCC_ClockConfig+0x160>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001830:	f7ff fa68 	bl	8000d04 <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	e00a      	b.n	800184e <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001838:	f7ff fa64 	bl	8000d04 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e03b      	b.n	80018c6 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184e:	4b20      	ldr	r3, [pc, #128]	@ (80018d0 <HAL_RCC_ClockConfig+0x160>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 020c 	and.w	r2, r3, #12
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	429a      	cmp	r2, r3
 800185e:	d1eb      	bne.n	8001838 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d008      	beq.n	800187e <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800186c:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <HAL_RCC_ClockConfig+0x160>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	4915      	ldr	r1, [pc, #84]	@ (80018d0 <HAL_RCC_ClockConfig+0x160>)
 800187a:	4313      	orrs	r3, r2
 800187c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800188a:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <HAL_RCC_ClockConfig+0x160>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	490d      	ldr	r1, [pc, #52]	@ (80018d0 <HAL_RCC_ClockConfig+0x160>)
 800189a:	4313      	orrs	r3, r2
 800189c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800189e:	f000 f81f 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 80018a2:	4602      	mov	r2, r0
 80018a4:	4b0a      	ldr	r3, [pc, #40]	@ (80018d0 <HAL_RCC_ClockConfig+0x160>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	4909      	ldr	r1, [pc, #36]	@ (80018d4 <HAL_RCC_ClockConfig+0x164>)
 80018b0:	5ccb      	ldrb	r3, [r1, r3]
 80018b2:	fa22 f303 	lsr.w	r3, r2, r3
 80018b6:	4a08      	ldr	r2, [pc, #32]	@ (80018d8 <HAL_RCC_ClockConfig+0x168>)
 80018b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018ba:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <HAL_RCC_ClockConfig+0x16c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff f9de 	bl	8000c80 <HAL_InitTick>

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000
 80018d4:	08002298 	.word	0x08002298
 80018d8:	20000004 	.word	0x20000004
 80018dc:	20000008 	.word	0x20000008

080018e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x90>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 030c 	and.w	r3, r3, #12
 8001906:	2b04      	cmp	r3, #4
 8001908:	d002      	beq.n	8001910 <HAL_RCC_GetSysClockFreq+0x30>
 800190a:	2b08      	cmp	r3, #8
 800190c:	d003      	beq.n	8001916 <HAL_RCC_GetSysClockFreq+0x36>
 800190e:	e026      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001910:	4b18      	ldr	r3, [pc, #96]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x94>)
 8001912:	613b      	str	r3, [r7, #16]
      break;
 8001914:	e026      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	0c9b      	lsrs	r3, r3, #18
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	4a16      	ldr	r2, [pc, #88]	@ (8001978 <HAL_RCC_GetSysClockFreq+0x98>)
 8001920:	5cd3      	ldrb	r3, [r2, r3]
 8001922:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00f      	beq.n	800194e <HAL_RCC_GetSysClockFreq+0x6e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x90>)
 8001930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	4a11      	ldr	r2, [pc, #68]	@ (800197c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001938:	5cd3      	ldrb	r3, [r2, r3]
 800193a:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a0d      	ldr	r2, [pc, #52]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x94>)
 8001940:	fb03 f202 	mul.w	r2, r3, r2
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	e004      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x78>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a0b      	ldr	r2, [pc, #44]	@ (8001980 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	613b      	str	r3, [r7, #16]
      break;
 800195c:	e002      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800195e:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x94>)
 8001960:	613b      	str	r3, [r7, #16]
      break;
 8001962:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001964:	693b      	ldr	r3, [r7, #16]
}
 8001966:	4618      	mov	r0, r3
 8001968:	371c      	adds	r7, #28
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	40021000 	.word	0x40021000
 8001974:	007a1200 	.word	0x007a1200
 8001978:	080022a8 	.word	0x080022a8
 800197c:	080022b8 	.word	0x080022b8
 8001980:	003d0900 	.word	0x003d0900

08001984 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800198c:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <RCC_Delay+0x34>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0a      	ldr	r2, [pc, #40]	@ (80019bc <RCC_Delay+0x38>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	0a5b      	lsrs	r3, r3, #9
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	fb02 f303 	mul.w	r3, r2, r3
 800199e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019a0:	bf00      	nop
  }
  while (Delay --);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1e5a      	subs	r2, r3, #1
 80019a6:	60fa      	str	r2, [r7, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f9      	bne.n	80019a0 <RCC_Delay+0x1c>
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	20000004 	.word	0x20000004
 80019bc:	10624dd3 	.word	0x10624dd3

080019c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e041      	b.n	8001a56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d106      	bne.n	80019ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff f8b8 	bl	8000b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2202      	movs	r2, #2
 80019f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3304      	adds	r3, #4
 80019fc:	4619      	mov	r1, r3
 80019fe:	4610      	mov	r0, r2
 8001a00:	f000 fa64 	bl	8001ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d001      	beq.n	8001a78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e03f      	b.n	8001af8 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0201 	orr.w	r2, r2, #1
 8001a8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1b      	ldr	r2, [pc, #108]	@ (8001b04 <HAL_TIM_Base_Start_IT+0xa4>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d013      	beq.n	8001ac2 <HAL_TIM_Base_Start_IT+0x62>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aa2:	d00e      	beq.n	8001ac2 <HAL_TIM_Base_Start_IT+0x62>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a17      	ldr	r2, [pc, #92]	@ (8001b08 <HAL_TIM_Base_Start_IT+0xa8>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d009      	beq.n	8001ac2 <HAL_TIM_Base_Start_IT+0x62>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a16      	ldr	r2, [pc, #88]	@ (8001b0c <HAL_TIM_Base_Start_IT+0xac>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d004      	beq.n	8001ac2 <HAL_TIM_Base_Start_IT+0x62>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a14      	ldr	r2, [pc, #80]	@ (8001b10 <HAL_TIM_Base_Start_IT+0xb0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d111      	bne.n	8001ae6 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b06      	cmp	r3, #6
 8001ad2:	d010      	beq.n	8001af6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae4:	e007      	b.n	8001af6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0201 	orr.w	r2, r2, #1
 8001af4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40012c00 	.word	0x40012c00
 8001b08:	40000400 	.word	0x40000400
 8001b0c:	40000800 	.word	0x40000800
 8001b10:	40014000 	.word	0x40014000

08001b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d020      	beq.n	8001b78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01b      	beq.n	8001b78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0202 	mvn.w	r2, #2
 8001b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f998 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 8001b64:	e005      	b.n	8001b72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f98b 	bl	8001e82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f99a 	bl	8001ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d020      	beq.n	8001bc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d01b      	beq.n	8001bc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f06f 0204 	mvn.w	r2, #4
 8001b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2202      	movs	r2, #2
 8001b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f972 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 8001bb0:	e005      	b.n	8001bbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f965 	bl	8001e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f974 	bl	8001ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d020      	beq.n	8001c10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d01b      	beq.n	8001c10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f06f 0208 	mvn.w	r2, #8
 8001be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2204      	movs	r2, #4
 8001be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f94c 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 8001bfc:	e005      	b.n	8001c0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f93f 	bl	8001e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f94e 	bl	8001ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d020      	beq.n	8001c5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d01b      	beq.n	8001c5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0210 	mvn.w	r2, #16
 8001c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2208      	movs	r2, #8
 8001c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f926 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 8001c48:	e005      	b.n	8001c56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f919 	bl	8001e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f928 	bl	8001ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00c      	beq.n	8001c80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d007      	beq.n	8001c80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0201 	mvn.w	r2, #1
 8001c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7fe ff28 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00c      	beq.n	8001ca4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d007      	beq.n	8001ca4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 faa5 	bl	80021ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00c      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d007      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f8f8 	bl	8001eb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00c      	beq.n	8001cec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f003 0320 	and.w	r3, r3, #32
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0220 	mvn.w	r2, #32
 8001ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 fa78 	bl	80021dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_TIM_ConfigClockSource+0x1c>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e0b4      	b.n	8001e7a <HAL_TIM_ConfigClockSource+0x186>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001d36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d48:	d03e      	beq.n	8001dc8 <HAL_TIM_ConfigClockSource+0xd4>
 8001d4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d4e:	f200 8087 	bhi.w	8001e60 <HAL_TIM_ConfigClockSource+0x16c>
 8001d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d56:	f000 8086 	beq.w	8001e66 <HAL_TIM_ConfigClockSource+0x172>
 8001d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d5e:	d87f      	bhi.n	8001e60 <HAL_TIM_ConfigClockSource+0x16c>
 8001d60:	2b70      	cmp	r3, #112	@ 0x70
 8001d62:	d01a      	beq.n	8001d9a <HAL_TIM_ConfigClockSource+0xa6>
 8001d64:	2b70      	cmp	r3, #112	@ 0x70
 8001d66:	d87b      	bhi.n	8001e60 <HAL_TIM_ConfigClockSource+0x16c>
 8001d68:	2b60      	cmp	r3, #96	@ 0x60
 8001d6a:	d050      	beq.n	8001e0e <HAL_TIM_ConfigClockSource+0x11a>
 8001d6c:	2b60      	cmp	r3, #96	@ 0x60
 8001d6e:	d877      	bhi.n	8001e60 <HAL_TIM_ConfigClockSource+0x16c>
 8001d70:	2b50      	cmp	r3, #80	@ 0x50
 8001d72:	d03c      	beq.n	8001dee <HAL_TIM_ConfigClockSource+0xfa>
 8001d74:	2b50      	cmp	r3, #80	@ 0x50
 8001d76:	d873      	bhi.n	8001e60 <HAL_TIM_ConfigClockSource+0x16c>
 8001d78:	2b40      	cmp	r3, #64	@ 0x40
 8001d7a:	d058      	beq.n	8001e2e <HAL_TIM_ConfigClockSource+0x13a>
 8001d7c:	2b40      	cmp	r3, #64	@ 0x40
 8001d7e:	d86f      	bhi.n	8001e60 <HAL_TIM_ConfigClockSource+0x16c>
 8001d80:	2b30      	cmp	r3, #48	@ 0x30
 8001d82:	d064      	beq.n	8001e4e <HAL_TIM_ConfigClockSource+0x15a>
 8001d84:	2b30      	cmp	r3, #48	@ 0x30
 8001d86:	d86b      	bhi.n	8001e60 <HAL_TIM_ConfigClockSource+0x16c>
 8001d88:	2b20      	cmp	r3, #32
 8001d8a:	d060      	beq.n	8001e4e <HAL_TIM_ConfigClockSource+0x15a>
 8001d8c:	2b20      	cmp	r3, #32
 8001d8e:	d867      	bhi.n	8001e60 <HAL_TIM_ConfigClockSource+0x16c>
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d05c      	beq.n	8001e4e <HAL_TIM_ConfigClockSource+0x15a>
 8001d94:	2b10      	cmp	r3, #16
 8001d96:	d05a      	beq.n	8001e4e <HAL_TIM_ConfigClockSource+0x15a>
 8001d98:	e062      	b.n	8001e60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001daa:	f000 f992 	bl	80020d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001dbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	609a      	str	r2, [r3, #8]
      break;
 8001dc6:	e04f      	b.n	8001e68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001dd8:	f000 f97b 	bl	80020d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001dea:	609a      	str	r2, [r3, #8]
      break;
 8001dec:	e03c      	b.n	8001e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f000 f8f2 	bl	8001fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2150      	movs	r1, #80	@ 0x50
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 f949 	bl	800209e <TIM_ITRx_SetConfig>
      break;
 8001e0c:	e02c      	b.n	8001e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	f000 f910 	bl	8002040 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2160      	movs	r1, #96	@ 0x60
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 f939 	bl	800209e <TIM_ITRx_SetConfig>
      break;
 8001e2c:	e01c      	b.n	8001e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f000 f8d2 	bl	8001fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2140      	movs	r1, #64	@ 0x40
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 f929 	bl	800209e <TIM_ITRx_SetConfig>
      break;
 8001e4c:	e00c      	b.n	8001e68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4619      	mov	r1, r3
 8001e58:	4610      	mov	r0, r2
 8001e5a:	f000 f920 	bl	800209e <TIM_ITRx_SetConfig>
      break;
 8001e5e:	e003      	b.n	8001e68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
      break;
 8001e64:	e000      	b.n	8001e68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001e66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
	...

08001ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3b      	ldr	r2, [pc, #236]	@ (8001fcc <TIM_Base_SetConfig+0x100>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d00b      	beq.n	8001efc <TIM_Base_SetConfig+0x30>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eea:	d007      	beq.n	8001efc <TIM_Base_SetConfig+0x30>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a38      	ldr	r2, [pc, #224]	@ (8001fd0 <TIM_Base_SetConfig+0x104>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d003      	beq.n	8001efc <TIM_Base_SetConfig+0x30>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a37      	ldr	r2, [pc, #220]	@ (8001fd4 <TIM_Base_SetConfig+0x108>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d108      	bne.n	8001f0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a2e      	ldr	r2, [pc, #184]	@ (8001fcc <TIM_Base_SetConfig+0x100>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d017      	beq.n	8001f46 <TIM_Base_SetConfig+0x7a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f1c:	d013      	beq.n	8001f46 <TIM_Base_SetConfig+0x7a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a2b      	ldr	r2, [pc, #172]	@ (8001fd0 <TIM_Base_SetConfig+0x104>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00f      	beq.n	8001f46 <TIM_Base_SetConfig+0x7a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a2a      	ldr	r2, [pc, #168]	@ (8001fd4 <TIM_Base_SetConfig+0x108>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00b      	beq.n	8001f46 <TIM_Base_SetConfig+0x7a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a29      	ldr	r2, [pc, #164]	@ (8001fd8 <TIM_Base_SetConfig+0x10c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d007      	beq.n	8001f46 <TIM_Base_SetConfig+0x7a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a28      	ldr	r2, [pc, #160]	@ (8001fdc <TIM_Base_SetConfig+0x110>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d003      	beq.n	8001f46 <TIM_Base_SetConfig+0x7a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a27      	ldr	r2, [pc, #156]	@ (8001fe0 <TIM_Base_SetConfig+0x114>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d108      	bne.n	8001f58 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a13      	ldr	r2, [pc, #76]	@ (8001fcc <TIM_Base_SetConfig+0x100>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d00b      	beq.n	8001f9c <TIM_Base_SetConfig+0xd0>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a14      	ldr	r2, [pc, #80]	@ (8001fd8 <TIM_Base_SetConfig+0x10c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d007      	beq.n	8001f9c <TIM_Base_SetConfig+0xd0>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a13      	ldr	r2, [pc, #76]	@ (8001fdc <TIM_Base_SetConfig+0x110>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d003      	beq.n	8001f9c <TIM_Base_SetConfig+0xd0>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a12      	ldr	r2, [pc, #72]	@ (8001fe0 <TIM_Base_SetConfig+0x114>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d103      	bne.n	8001fa4 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d005      	beq.n	8001fc2 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f023 0201 	bic.w	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	611a      	str	r2, [r3, #16]
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	40012c00 	.word	0x40012c00
 8001fd0:	40000400 	.word	0x40000400
 8001fd4:	40000800 	.word	0x40000800
 8001fd8:	40014000 	.word	0x40014000
 8001fdc:	40014400 	.word	0x40014400
 8001fe0:	40014800 	.word	0x40014800

08001fe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	f023 0201 	bic.w	r2, r3, #1
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800200e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f023 030a 	bic.w	r3, r3, #10
 8002020:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	4313      	orrs	r3, r2
 8002028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	621a      	str	r2, [r3, #32]
}
 8002036:	bf00      	nop
 8002038:	371c      	adds	r7, #28
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	f023 0210 	bic.w	r2, r3, #16
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800206a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	031b      	lsls	r3, r3, #12
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800207c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	621a      	str	r2, [r3, #32]
}
 8002094:	bf00      	nop
 8002096:	371c      	adds	r7, #28
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800209e:	b480      	push	{r7}
 80020a0:	b085      	sub	sp, #20
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f043 0307 	orr.w	r3, r3, #7
 80020c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	609a      	str	r2, [r3, #8]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b087      	sub	sp, #28
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80020ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	021a      	lsls	r2, r3, #8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	609a      	str	r2, [r3, #8]
}
 8002106:	bf00      	nop
 8002108:	371c      	adds	r7, #28
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002124:	2302      	movs	r3, #2
 8002126:	e04b      	b.n	80021c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800214e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a19      	ldr	r2, [pc, #100]	@ (80021cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d013      	beq.n	8002194 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002174:	d00e      	beq.n	8002194 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a15      	ldr	r2, [pc, #84]	@ (80021d0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d009      	beq.n	8002194 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a13      	ldr	r2, [pc, #76]	@ (80021d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d004      	beq.n	8002194 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a12      	ldr	r2, [pc, #72]	@ (80021d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d10c      	bne.n	80021ae <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800219a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40012c00 	.word	0x40012c00
 80021d0:	40000400 	.word	0x40000400
 80021d4:	40000800 	.word	0x40000800
 80021d8:	40014000 	.word	0x40014000

080021dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <memset>:
 8002200:	4603      	mov	r3, r0
 8002202:	4402      	add	r2, r0
 8002204:	4293      	cmp	r3, r2
 8002206:	d100      	bne.n	800220a <memset+0xa>
 8002208:	4770      	bx	lr
 800220a:	f803 1b01 	strb.w	r1, [r3], #1
 800220e:	e7f9      	b.n	8002204 <memset+0x4>

08002210 <__libc_init_array>:
 8002210:	b570      	push	{r4, r5, r6, lr}
 8002212:	2600      	movs	r6, #0
 8002214:	4d0c      	ldr	r5, [pc, #48]	@ (8002248 <__libc_init_array+0x38>)
 8002216:	4c0d      	ldr	r4, [pc, #52]	@ (800224c <__libc_init_array+0x3c>)
 8002218:	1b64      	subs	r4, r4, r5
 800221a:	10a4      	asrs	r4, r4, #2
 800221c:	42a6      	cmp	r6, r4
 800221e:	d109      	bne.n	8002234 <__libc_init_array+0x24>
 8002220:	f000 f81a 	bl	8002258 <_init>
 8002224:	2600      	movs	r6, #0
 8002226:	4d0a      	ldr	r5, [pc, #40]	@ (8002250 <__libc_init_array+0x40>)
 8002228:	4c0a      	ldr	r4, [pc, #40]	@ (8002254 <__libc_init_array+0x44>)
 800222a:	1b64      	subs	r4, r4, r5
 800222c:	10a4      	asrs	r4, r4, #2
 800222e:	42a6      	cmp	r6, r4
 8002230:	d105      	bne.n	800223e <__libc_init_array+0x2e>
 8002232:	bd70      	pop	{r4, r5, r6, pc}
 8002234:	f855 3b04 	ldr.w	r3, [r5], #4
 8002238:	4798      	blx	r3
 800223a:	3601      	adds	r6, #1
 800223c:	e7ee      	b.n	800221c <__libc_init_array+0xc>
 800223e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002242:	4798      	blx	r3
 8002244:	3601      	adds	r6, #1
 8002246:	e7f2      	b.n	800222e <__libc_init_array+0x1e>
 8002248:	080022c8 	.word	0x080022c8
 800224c:	080022c8 	.word	0x080022c8
 8002250:	080022c8 	.word	0x080022c8
 8002254:	080022cc 	.word	0x080022cc

08002258 <_init>:
 8002258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800225a:	bf00      	nop
 800225c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800225e:	bc08      	pop	{r3}
 8002260:	469e      	mov	lr, r3
 8002262:	4770      	bx	lr

08002264 <_fini>:
 8002264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002266:	bf00      	nop
 8002268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800226a:	bc08      	pop	{r3}
 800226c:	469e      	mov	lr, r3
 800226e:	4770      	bx	lr
