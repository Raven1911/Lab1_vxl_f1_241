
Lab1_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002270  080001d0  080001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002440  08002440  00003440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024a0  080024a0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080024a0  080024a0  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024a0  080024a0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024a0  080024a0  000034a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024a4  080024a4  000034a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080024a8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080024b4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080024b4  000040c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008442  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001925  00000000  00000000  0000c477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0000dda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000768  00000000  00000000  0000e748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010c24  00000000  00000000  0000eeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6ee  00000000  00000000  0001fad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067195  00000000  00000000  0002b1c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00092357  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002734  00000000  00000000  0009239c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00094ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002428 	.word	0x08002428

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08002428 	.word	0x08002428

08000210 <System_init_Lab1>:
 */
#include "Lab1.h"

///////         SYSTEM INIT  	////////////////////////////

void System_init_Lab1(){
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	timer_init();
 8000214:	f000 fcf4 	bl	8000c00 <timer_init>
	setTimer(0, 1000);
 8000218:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800021c:	2000      	movs	r0, #0
 800021e:	f000 fcf9 	bl	8000c14 <setTimer>
	clearAllClock();
 8000222:	f000 fb3b 	bl	800089c <clearAllClock>
}
 8000226:	bf00      	nop
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <calculator_Led_Clock_ON_OFF>:
uint8_t A3, A2, A1, A0;

bool Led[12];


void calculator_Led_Clock_ON_OFF(int num, int condition){
 800022c:	b4b0      	push	{r4, r5, r7}
 800022e:	b091      	sub	sp, #68	@ 0x44
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
 8000234:	6039      	str	r1, [r7, #0]
	uint8_t buffer;
	unsigned int Led_Clock[] = {
 8000236:	4b90      	ldr	r3, [pc, #576]	@ (8000478 <calculator_Led_Clock_ON_OFF+0x24c>)
 8000238:	f107 040c 	add.w	r4, r7, #12
 800023c:	461d      	mov	r5, r3
 800023e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000246:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800024a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0b1000,
			0b1001,
			0b1010,
			0b1011, //11
	};
	buffer = Led_Clock[num];
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	3340      	adds	r3, #64	@ 0x40
 8000254:	443b      	add	r3, r7
 8000256:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800025a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	A3 = (buffer>>3) & 1;
 800025e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000262:	08db      	lsrs	r3, r3, #3
 8000264:	b2db      	uxtb	r3, r3
 8000266:	f003 0301 	and.w	r3, r3, #1
 800026a:	b2da      	uxtb	r2, r3
 800026c:	4b83      	ldr	r3, [pc, #524]	@ (800047c <calculator_Led_Clock_ON_OFF+0x250>)
 800026e:	701a      	strb	r2, [r3, #0]
	A2 = (buffer>>2) & 1;
 8000270:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000274:	089b      	lsrs	r3, r3, #2
 8000276:	b2db      	uxtb	r3, r3
 8000278:	f003 0301 	and.w	r3, r3, #1
 800027c:	b2da      	uxtb	r2, r3
 800027e:	4b80      	ldr	r3, [pc, #512]	@ (8000480 <calculator_Led_Clock_ON_OFF+0x254>)
 8000280:	701a      	strb	r2, [r3, #0]
	A1 = (buffer>>1) & 1;
 8000282:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000286:	085b      	lsrs	r3, r3, #1
 8000288:	b2db      	uxtb	r3, r3
 800028a:	f003 0301 	and.w	r3, r3, #1
 800028e:	b2da      	uxtb	r2, r3
 8000290:	4b7c      	ldr	r3, [pc, #496]	@ (8000484 <calculator_Led_Clock_ON_OFF+0x258>)
 8000292:	701a      	strb	r2, [r3, #0]
	A0 = (buffer>>0) & 1;
 8000294:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000298:	f003 0301 	and.w	r3, r3, #1
 800029c:	b2da      	uxtb	r2, r3
 800029e:	4b7a      	ldr	r3, [pc, #488]	@ (8000488 <calculator_Led_Clock_ON_OFF+0x25c>)
 80002a0:	701a      	strb	r2, [r3, #0]

	// f(..)led on (0)
	if(!condition){
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	f040 8174 	bne.w	8000592 <calculator_Led_Clock_ON_OFF+0x366>
		Led[0] &= (A3) || (A2) || (A1) || (A0);
 80002aa:	4b78      	ldr	r3, [pc, #480]	@ (800048c <calculator_Led_Clock_ON_OFF+0x260>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	461a      	mov	r2, r3
 80002b0:	4b72      	ldr	r3, [pc, #456]	@ (800047c <calculator_Led_Clock_ON_OFF+0x250>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d10b      	bne.n	80002d0 <calculator_Led_Clock_ON_OFF+0xa4>
 80002b8:	4b71      	ldr	r3, [pc, #452]	@ (8000480 <calculator_Led_Clock_ON_OFF+0x254>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d107      	bne.n	80002d0 <calculator_Led_Clock_ON_OFF+0xa4>
 80002c0:	4b70      	ldr	r3, [pc, #448]	@ (8000484 <calculator_Led_Clock_ON_OFF+0x258>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d103      	bne.n	80002d0 <calculator_Led_Clock_ON_OFF+0xa4>
 80002c8:	4b6f      	ldr	r3, [pc, #444]	@ (8000488 <calculator_Led_Clock_ON_OFF+0x25c>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <calculator_Led_Clock_ON_OFF+0xa8>
 80002d0:	2301      	movs	r3, #1
 80002d2:	e000      	b.n	80002d6 <calculator_Led_Clock_ON_OFF+0xaa>
 80002d4:	2300      	movs	r3, #0
 80002d6:	4013      	ands	r3, r2
 80002d8:	2b00      	cmp	r3, #0
 80002da:	bf14      	ite	ne
 80002dc:	2301      	movne	r3, #1
 80002de:	2300      	moveq	r3, #0
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4b6a      	ldr	r3, [pc, #424]	@ (800048c <calculator_Led_Clock_ON_OFF+0x260>)
 80002e4:	701a      	strb	r2, [r3, #0]
		Led[1] &= (A3) || (A2) || (A1) || (!A0);
 80002e6:	4b69      	ldr	r3, [pc, #420]	@ (800048c <calculator_Led_Clock_ON_OFF+0x260>)
 80002e8:	785b      	ldrb	r3, [r3, #1]
 80002ea:	461a      	mov	r2, r3
 80002ec:	4b63      	ldr	r3, [pc, #396]	@ (800047c <calculator_Led_Clock_ON_OFF+0x250>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d10b      	bne.n	800030c <calculator_Led_Clock_ON_OFF+0xe0>
 80002f4:	4b62      	ldr	r3, [pc, #392]	@ (8000480 <calculator_Led_Clock_ON_OFF+0x254>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d107      	bne.n	800030c <calculator_Led_Clock_ON_OFF+0xe0>
 80002fc:	4b61      	ldr	r3, [pc, #388]	@ (8000484 <calculator_Led_Clock_ON_OFF+0x258>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d103      	bne.n	800030c <calculator_Led_Clock_ON_OFF+0xe0>
 8000304:	4b60      	ldr	r3, [pc, #384]	@ (8000488 <calculator_Led_Clock_ON_OFF+0x25c>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d101      	bne.n	8000310 <calculator_Led_Clock_ON_OFF+0xe4>
 800030c:	2301      	movs	r3, #1
 800030e:	e000      	b.n	8000312 <calculator_Led_Clock_ON_OFF+0xe6>
 8000310:	2300      	movs	r3, #0
 8000312:	4013      	ands	r3, r2
 8000314:	2b00      	cmp	r3, #0
 8000316:	bf14      	ite	ne
 8000318:	2301      	movne	r3, #1
 800031a:	2300      	moveq	r3, #0
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4b5b      	ldr	r3, [pc, #364]	@ (800048c <calculator_Led_Clock_ON_OFF+0x260>)
 8000320:	705a      	strb	r2, [r3, #1]
		Led[2] &= (A3) || (A2) || (!A1) || (A0);
 8000322:	4b5a      	ldr	r3, [pc, #360]	@ (800048c <calculator_Led_Clock_ON_OFF+0x260>)
 8000324:	789b      	ldrb	r3, [r3, #2]
 8000326:	461a      	mov	r2, r3
 8000328:	4b54      	ldr	r3, [pc, #336]	@ (800047c <calculator_Led_Clock_ON_OFF+0x250>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d10b      	bne.n	8000348 <calculator_Led_Clock_ON_OFF+0x11c>
 8000330:	4b53      	ldr	r3, [pc, #332]	@ (8000480 <calculator_Led_Clock_ON_OFF+0x254>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d107      	bne.n	8000348 <calculator_Led_Clock_ON_OFF+0x11c>
 8000338:	4b52      	ldr	r3, [pc, #328]	@ (8000484 <calculator_Led_Clock_ON_OFF+0x258>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d003      	beq.n	8000348 <calculator_Led_Clock_ON_OFF+0x11c>
 8000340:	4b51      	ldr	r3, [pc, #324]	@ (8000488 <calculator_Led_Clock_ON_OFF+0x25c>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <calculator_Led_Clock_ON_OFF+0x120>
 8000348:	2301      	movs	r3, #1
 800034a:	e000      	b.n	800034e <calculator_Led_Clock_ON_OFF+0x122>
 800034c:	2300      	movs	r3, #0
 800034e:	4013      	ands	r3, r2
 8000350:	2b00      	cmp	r3, #0
 8000352:	bf14      	ite	ne
 8000354:	2301      	movne	r3, #1
 8000356:	2300      	moveq	r3, #0
 8000358:	b2da      	uxtb	r2, r3
 800035a:	4b4c      	ldr	r3, [pc, #304]	@ (800048c <calculator_Led_Clock_ON_OFF+0x260>)
 800035c:	709a      	strb	r2, [r3, #2]
		Led[3] &= (A3) || (A2) || (!A1) || (!A0);
 800035e:	4b4b      	ldr	r3, [pc, #300]	@ (800048c <calculator_Led_Clock_ON_OFF+0x260>)
 8000360:	78db      	ldrb	r3, [r3, #3]
 8000362:	461a      	mov	r2, r3
 8000364:	4b45      	ldr	r3, [pc, #276]	@ (800047c <calculator_Led_Clock_ON_OFF+0x250>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d10b      	bne.n	8000384 <calculator_Led_Clock_ON_OFF+0x158>
 800036c:	4b44      	ldr	r3, [pc, #272]	@ (8000480 <calculator_Led_Clock_ON_OFF+0x254>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d107      	bne.n	8000384 <calculator_Led_Clock_ON_OFF+0x158>
 8000374:	4b43      	ldr	r3, [pc, #268]	@ (8000484 <calculator_Led_Clock_ON_OFF+0x258>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d003      	beq.n	8000384 <calculator_Led_Clock_ON_OFF+0x158>
 800037c:	4b42      	ldr	r3, [pc, #264]	@ (8000488 <calculator_Led_Clock_ON_OFF+0x25c>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d101      	bne.n	8000388 <calculator_Led_Clock_ON_OFF+0x15c>
 8000384:	2301      	movs	r3, #1
 8000386:	e000      	b.n	800038a <calculator_Led_Clock_ON_OFF+0x15e>
 8000388:	2300      	movs	r3, #0
 800038a:	4013      	ands	r3, r2
 800038c:	2b00      	cmp	r3, #0
 800038e:	bf14      	ite	ne
 8000390:	2301      	movne	r3, #1
 8000392:	2300      	moveq	r3, #0
 8000394:	b2da      	uxtb	r2, r3
 8000396:	4b3d      	ldr	r3, [pc, #244]	@ (800048c <calculator_Led_Clock_ON_OFF+0x260>)
 8000398:	70da      	strb	r2, [r3, #3]
		Led[4] &= (A3) || (!A2) || (A1) || (A0);
 800039a:	4b3c      	ldr	r3, [pc, #240]	@ (800048c <calculator_Led_Clock_ON_OFF+0x260>)
 800039c:	791b      	ldrb	r3, [r3, #4]
 800039e:	461a      	mov	r2, r3
 80003a0:	4b36      	ldr	r3, [pc, #216]	@ (800047c <calculator_Led_Clock_ON_OFF+0x250>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d10b      	bne.n	80003c0 <calculator_Led_Clock_ON_OFF+0x194>
 80003a8:	4b35      	ldr	r3, [pc, #212]	@ (8000480 <calculator_Led_Clock_ON_OFF+0x254>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d007      	beq.n	80003c0 <calculator_Led_Clock_ON_OFF+0x194>
 80003b0:	4b34      	ldr	r3, [pc, #208]	@ (8000484 <calculator_Led_Clock_ON_OFF+0x258>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d103      	bne.n	80003c0 <calculator_Led_Clock_ON_OFF+0x194>
 80003b8:	4b33      	ldr	r3, [pc, #204]	@ (8000488 <calculator_Led_Clock_ON_OFF+0x25c>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <calculator_Led_Clock_ON_OFF+0x198>
 80003c0:	2301      	movs	r3, #1
 80003c2:	e000      	b.n	80003c6 <calculator_Led_Clock_ON_OFF+0x19a>
 80003c4:	2300      	movs	r3, #0
 80003c6:	4013      	ands	r3, r2
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	bf14      	ite	ne
 80003cc:	2301      	movne	r3, #1
 80003ce:	2300      	moveq	r3, #0
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	4b2e      	ldr	r3, [pc, #184]	@ (800048c <calculator_Led_Clock_ON_OFF+0x260>)
 80003d4:	711a      	strb	r2, [r3, #4]
		Led[5] &= (A3) || (!A2) || (A1) || (!A0);
 80003d6:	4b2d      	ldr	r3, [pc, #180]	@ (800048c <calculator_Led_Clock_ON_OFF+0x260>)
 80003d8:	795b      	ldrb	r3, [r3, #5]
 80003da:	461a      	mov	r2, r3
 80003dc:	4b27      	ldr	r3, [pc, #156]	@ (800047c <calculator_Led_Clock_ON_OFF+0x250>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d10b      	bne.n	80003fc <calculator_Led_Clock_ON_OFF+0x1d0>
 80003e4:	4b26      	ldr	r3, [pc, #152]	@ (8000480 <calculator_Led_Clock_ON_OFF+0x254>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d007      	beq.n	80003fc <calculator_Led_Clock_ON_OFF+0x1d0>
 80003ec:	4b25      	ldr	r3, [pc, #148]	@ (8000484 <calculator_Led_Clock_ON_OFF+0x258>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d103      	bne.n	80003fc <calculator_Led_Clock_ON_OFF+0x1d0>
 80003f4:	4b24      	ldr	r3, [pc, #144]	@ (8000488 <calculator_Led_Clock_ON_OFF+0x25c>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d101      	bne.n	8000400 <calculator_Led_Clock_ON_OFF+0x1d4>
 80003fc:	2301      	movs	r3, #1
 80003fe:	e000      	b.n	8000402 <calculator_Led_Clock_ON_OFF+0x1d6>
 8000400:	2300      	movs	r3, #0
 8000402:	4013      	ands	r3, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	bf14      	ite	ne
 8000408:	2301      	movne	r3, #1
 800040a:	2300      	moveq	r3, #0
 800040c:	b2da      	uxtb	r2, r3
 800040e:	4b1f      	ldr	r3, [pc, #124]	@ (800048c <calculator_Led_Clock_ON_OFF+0x260>)
 8000410:	715a      	strb	r2, [r3, #5]
		Led[6] &= (A3) || (!A2) || (!A1) || (A0);
 8000412:	4b1e      	ldr	r3, [pc, #120]	@ (800048c <calculator_Led_Clock_ON_OFF+0x260>)
 8000414:	799b      	ldrb	r3, [r3, #6]
 8000416:	461a      	mov	r2, r3
 8000418:	4b18      	ldr	r3, [pc, #96]	@ (800047c <calculator_Led_Clock_ON_OFF+0x250>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d10b      	bne.n	8000438 <calculator_Led_Clock_ON_OFF+0x20c>
 8000420:	4b17      	ldr	r3, [pc, #92]	@ (8000480 <calculator_Led_Clock_ON_OFF+0x254>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d007      	beq.n	8000438 <calculator_Led_Clock_ON_OFF+0x20c>
 8000428:	4b16      	ldr	r3, [pc, #88]	@ (8000484 <calculator_Led_Clock_ON_OFF+0x258>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d003      	beq.n	8000438 <calculator_Led_Clock_ON_OFF+0x20c>
 8000430:	4b15      	ldr	r3, [pc, #84]	@ (8000488 <calculator_Led_Clock_ON_OFF+0x25c>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <calculator_Led_Clock_ON_OFF+0x210>
 8000438:	2301      	movs	r3, #1
 800043a:	e000      	b.n	800043e <calculator_Led_Clock_ON_OFF+0x212>
 800043c:	2300      	movs	r3, #0
 800043e:	4013      	ands	r3, r2
 8000440:	2b00      	cmp	r3, #0
 8000442:	bf14      	ite	ne
 8000444:	2301      	movne	r3, #1
 8000446:	2300      	moveq	r3, #0
 8000448:	b2da      	uxtb	r2, r3
 800044a:	4b10      	ldr	r3, [pc, #64]	@ (800048c <calculator_Led_Clock_ON_OFF+0x260>)
 800044c:	719a      	strb	r2, [r3, #6]
		Led[7] &= (A3) || (!A2) || (!A1) || (!A0);
 800044e:	4b0f      	ldr	r3, [pc, #60]	@ (800048c <calculator_Led_Clock_ON_OFF+0x260>)
 8000450:	79db      	ldrb	r3, [r3, #7]
 8000452:	461a      	mov	r2, r3
 8000454:	4b09      	ldr	r3, [pc, #36]	@ (800047c <calculator_Led_Clock_ON_OFF+0x250>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d10b      	bne.n	8000474 <calculator_Led_Clock_ON_OFF+0x248>
 800045c:	4b08      	ldr	r3, [pc, #32]	@ (8000480 <calculator_Led_Clock_ON_OFF+0x254>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d007      	beq.n	8000474 <calculator_Led_Clock_ON_OFF+0x248>
 8000464:	4b07      	ldr	r3, [pc, #28]	@ (8000484 <calculator_Led_Clock_ON_OFF+0x258>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d003      	beq.n	8000474 <calculator_Led_Clock_ON_OFF+0x248>
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <calculator_Led_Clock_ON_OFF+0x25c>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d10d      	bne.n	8000490 <calculator_Led_Clock_ON_OFF+0x264>
 8000474:	2301      	movs	r3, #1
 8000476:	e00c      	b.n	8000492 <calculator_Led_Clock_ON_OFF+0x266>
 8000478:	08002440 	.word	0x08002440
 800047c:	20000028 	.word	0x20000028
 8000480:	20000029 	.word	0x20000029
 8000484:	2000002a 	.word	0x2000002a
 8000488:	2000002b 	.word	0x2000002b
 800048c:	2000002c 	.word	0x2000002c
 8000490:	2300      	movs	r3, #0
 8000492:	4013      	ands	r3, r2
 8000494:	2b00      	cmp	r3, #0
 8000496:	bf14      	ite	ne
 8000498:	2301      	movne	r3, #1
 800049a:	2300      	moveq	r3, #0
 800049c:	b2da      	uxtb	r2, r3
 800049e:	4b85      	ldr	r3, [pc, #532]	@ (80006b4 <calculator_Led_Clock_ON_OFF+0x488>)
 80004a0:	71da      	strb	r2, [r3, #7]
		Led[8] &= (!A3) || (A2) || (A1) || (A0);
 80004a2:	4b84      	ldr	r3, [pc, #528]	@ (80006b4 <calculator_Led_Clock_ON_OFF+0x488>)
 80004a4:	7a1b      	ldrb	r3, [r3, #8]
 80004a6:	461a      	mov	r2, r3
 80004a8:	4b83      	ldr	r3, [pc, #524]	@ (80006b8 <calculator_Led_Clock_ON_OFF+0x48c>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d00b      	beq.n	80004c8 <calculator_Led_Clock_ON_OFF+0x29c>
 80004b0:	4b82      	ldr	r3, [pc, #520]	@ (80006bc <calculator_Led_Clock_ON_OFF+0x490>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d107      	bne.n	80004c8 <calculator_Led_Clock_ON_OFF+0x29c>
 80004b8:	4b81      	ldr	r3, [pc, #516]	@ (80006c0 <calculator_Led_Clock_ON_OFF+0x494>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d103      	bne.n	80004c8 <calculator_Led_Clock_ON_OFF+0x29c>
 80004c0:	4b80      	ldr	r3, [pc, #512]	@ (80006c4 <calculator_Led_Clock_ON_OFF+0x498>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <calculator_Led_Clock_ON_OFF+0x2a0>
 80004c8:	2301      	movs	r3, #1
 80004ca:	e000      	b.n	80004ce <calculator_Led_Clock_ON_OFF+0x2a2>
 80004cc:	2300      	movs	r3, #0
 80004ce:	4013      	ands	r3, r2
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	bf14      	ite	ne
 80004d4:	2301      	movne	r3, #1
 80004d6:	2300      	moveq	r3, #0
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	4b76      	ldr	r3, [pc, #472]	@ (80006b4 <calculator_Led_Clock_ON_OFF+0x488>)
 80004dc:	721a      	strb	r2, [r3, #8]
		Led[9] &= (!A3) || (A2) || (A1) || (!A0);
 80004de:	4b75      	ldr	r3, [pc, #468]	@ (80006b4 <calculator_Led_Clock_ON_OFF+0x488>)
 80004e0:	7a5b      	ldrb	r3, [r3, #9]
 80004e2:	461a      	mov	r2, r3
 80004e4:	4b74      	ldr	r3, [pc, #464]	@ (80006b8 <calculator_Led_Clock_ON_OFF+0x48c>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d00b      	beq.n	8000504 <calculator_Led_Clock_ON_OFF+0x2d8>
 80004ec:	4b73      	ldr	r3, [pc, #460]	@ (80006bc <calculator_Led_Clock_ON_OFF+0x490>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d107      	bne.n	8000504 <calculator_Led_Clock_ON_OFF+0x2d8>
 80004f4:	4b72      	ldr	r3, [pc, #456]	@ (80006c0 <calculator_Led_Clock_ON_OFF+0x494>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d103      	bne.n	8000504 <calculator_Led_Clock_ON_OFF+0x2d8>
 80004fc:	4b71      	ldr	r3, [pc, #452]	@ (80006c4 <calculator_Led_Clock_ON_OFF+0x498>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d101      	bne.n	8000508 <calculator_Led_Clock_ON_OFF+0x2dc>
 8000504:	2301      	movs	r3, #1
 8000506:	e000      	b.n	800050a <calculator_Led_Clock_ON_OFF+0x2de>
 8000508:	2300      	movs	r3, #0
 800050a:	4013      	ands	r3, r2
 800050c:	2b00      	cmp	r3, #0
 800050e:	bf14      	ite	ne
 8000510:	2301      	movne	r3, #1
 8000512:	2300      	moveq	r3, #0
 8000514:	b2da      	uxtb	r2, r3
 8000516:	4b67      	ldr	r3, [pc, #412]	@ (80006b4 <calculator_Led_Clock_ON_OFF+0x488>)
 8000518:	725a      	strb	r2, [r3, #9]
		Led[10] &= (!A3) || (A2) || (!A1) || (A0);
 800051a:	4b66      	ldr	r3, [pc, #408]	@ (80006b4 <calculator_Led_Clock_ON_OFF+0x488>)
 800051c:	7a9b      	ldrb	r3, [r3, #10]
 800051e:	461a      	mov	r2, r3
 8000520:	4b65      	ldr	r3, [pc, #404]	@ (80006b8 <calculator_Led_Clock_ON_OFF+0x48c>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d00b      	beq.n	8000540 <calculator_Led_Clock_ON_OFF+0x314>
 8000528:	4b64      	ldr	r3, [pc, #400]	@ (80006bc <calculator_Led_Clock_ON_OFF+0x490>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d107      	bne.n	8000540 <calculator_Led_Clock_ON_OFF+0x314>
 8000530:	4b63      	ldr	r3, [pc, #396]	@ (80006c0 <calculator_Led_Clock_ON_OFF+0x494>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d003      	beq.n	8000540 <calculator_Led_Clock_ON_OFF+0x314>
 8000538:	4b62      	ldr	r3, [pc, #392]	@ (80006c4 <calculator_Led_Clock_ON_OFF+0x498>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <calculator_Led_Clock_ON_OFF+0x318>
 8000540:	2301      	movs	r3, #1
 8000542:	e000      	b.n	8000546 <calculator_Led_Clock_ON_OFF+0x31a>
 8000544:	2300      	movs	r3, #0
 8000546:	4013      	ands	r3, r2
 8000548:	2b00      	cmp	r3, #0
 800054a:	bf14      	ite	ne
 800054c:	2301      	movne	r3, #1
 800054e:	2300      	moveq	r3, #0
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4b58      	ldr	r3, [pc, #352]	@ (80006b4 <calculator_Led_Clock_ON_OFF+0x488>)
 8000554:	729a      	strb	r2, [r3, #10]
		Led[11] &= (!A3) || (A2) || (!A1) || (!A0);
 8000556:	4b57      	ldr	r3, [pc, #348]	@ (80006b4 <calculator_Led_Clock_ON_OFF+0x488>)
 8000558:	7adb      	ldrb	r3, [r3, #11]
 800055a:	461a      	mov	r2, r3
 800055c:	4b56      	ldr	r3, [pc, #344]	@ (80006b8 <calculator_Led_Clock_ON_OFF+0x48c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00b      	beq.n	800057c <calculator_Led_Clock_ON_OFF+0x350>
 8000564:	4b55      	ldr	r3, [pc, #340]	@ (80006bc <calculator_Led_Clock_ON_OFF+0x490>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d107      	bne.n	800057c <calculator_Led_Clock_ON_OFF+0x350>
 800056c:	4b54      	ldr	r3, [pc, #336]	@ (80006c0 <calculator_Led_Clock_ON_OFF+0x494>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d003      	beq.n	800057c <calculator_Led_Clock_ON_OFF+0x350>
 8000574:	4b53      	ldr	r3, [pc, #332]	@ (80006c4 <calculator_Led_Clock_ON_OFF+0x498>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d101      	bne.n	8000580 <calculator_Led_Clock_ON_OFF+0x354>
 800057c:	2301      	movs	r3, #1
 800057e:	e000      	b.n	8000582 <calculator_Led_Clock_ON_OFF+0x356>
 8000580:	2300      	movs	r3, #0
 8000582:	4013      	ands	r3, r2
 8000584:	2b00      	cmp	r3, #0
 8000586:	bf14      	ite	ne
 8000588:	2301      	movne	r3, #1
 800058a:	2300      	moveq	r3, #0
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b49      	ldr	r3, [pc, #292]	@ (80006b4 <calculator_Led_Clock_ON_OFF+0x488>)
 8000590:	72da      	strb	r2, [r3, #11]
	}
	// f(..)led off (1)
	if(condition){
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	f000 8172 	beq.w	800087e <calculator_Led_Clock_ON_OFF+0x652>
		Led[0] |= !A3 && !A2 && !A1 && !A0;
 800059a:	4b46      	ldr	r3, [pc, #280]	@ (80006b4 <calculator_Led_Clock_ON_OFF+0x488>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	461a      	mov	r2, r3
 80005a0:	4b45      	ldr	r3, [pc, #276]	@ (80006b8 <calculator_Led_Clock_ON_OFF+0x48c>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d10d      	bne.n	80005c4 <calculator_Led_Clock_ON_OFF+0x398>
 80005a8:	4b44      	ldr	r3, [pc, #272]	@ (80006bc <calculator_Led_Clock_ON_OFF+0x490>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d109      	bne.n	80005c4 <calculator_Led_Clock_ON_OFF+0x398>
 80005b0:	4b43      	ldr	r3, [pc, #268]	@ (80006c0 <calculator_Led_Clock_ON_OFF+0x494>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d105      	bne.n	80005c4 <calculator_Led_Clock_ON_OFF+0x398>
 80005b8:	4b42      	ldr	r3, [pc, #264]	@ (80006c4 <calculator_Led_Clock_ON_OFF+0x498>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d101      	bne.n	80005c4 <calculator_Led_Clock_ON_OFF+0x398>
 80005c0:	2301      	movs	r3, #1
 80005c2:	e000      	b.n	80005c6 <calculator_Led_Clock_ON_OFF+0x39a>
 80005c4:	2300      	movs	r3, #0
 80005c6:	4313      	orrs	r3, r2
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	bf14      	ite	ne
 80005cc:	2301      	movne	r3, #1
 80005ce:	2300      	moveq	r3, #0
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b38      	ldr	r3, [pc, #224]	@ (80006b4 <calculator_Led_Clock_ON_OFF+0x488>)
 80005d4:	701a      	strb	r2, [r3, #0]
		Led[1] |= !A3 && !A2 && !A1 && A0;
 80005d6:	4b37      	ldr	r3, [pc, #220]	@ (80006b4 <calculator_Led_Clock_ON_OFF+0x488>)
 80005d8:	785b      	ldrb	r3, [r3, #1]
 80005da:	461a      	mov	r2, r3
 80005dc:	4b36      	ldr	r3, [pc, #216]	@ (80006b8 <calculator_Led_Clock_ON_OFF+0x48c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d10d      	bne.n	8000600 <calculator_Led_Clock_ON_OFF+0x3d4>
 80005e4:	4b35      	ldr	r3, [pc, #212]	@ (80006bc <calculator_Led_Clock_ON_OFF+0x490>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d109      	bne.n	8000600 <calculator_Led_Clock_ON_OFF+0x3d4>
 80005ec:	4b34      	ldr	r3, [pc, #208]	@ (80006c0 <calculator_Led_Clock_ON_OFF+0x494>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d105      	bne.n	8000600 <calculator_Led_Clock_ON_OFF+0x3d4>
 80005f4:	4b33      	ldr	r3, [pc, #204]	@ (80006c4 <calculator_Led_Clock_ON_OFF+0x498>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <calculator_Led_Clock_ON_OFF+0x3d4>
 80005fc:	2301      	movs	r3, #1
 80005fe:	e000      	b.n	8000602 <calculator_Led_Clock_ON_OFF+0x3d6>
 8000600:	2300      	movs	r3, #0
 8000602:	4313      	orrs	r3, r2
 8000604:	2b00      	cmp	r3, #0
 8000606:	bf14      	ite	ne
 8000608:	2301      	movne	r3, #1
 800060a:	2300      	moveq	r3, #0
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4b29      	ldr	r3, [pc, #164]	@ (80006b4 <calculator_Led_Clock_ON_OFF+0x488>)
 8000610:	705a      	strb	r2, [r3, #1]
		Led[2] |= !A3 && !A2 && A1 && !A0;
 8000612:	4b28      	ldr	r3, [pc, #160]	@ (80006b4 <calculator_Led_Clock_ON_OFF+0x488>)
 8000614:	789b      	ldrb	r3, [r3, #2]
 8000616:	461a      	mov	r2, r3
 8000618:	4b27      	ldr	r3, [pc, #156]	@ (80006b8 <calculator_Led_Clock_ON_OFF+0x48c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d10d      	bne.n	800063c <calculator_Led_Clock_ON_OFF+0x410>
 8000620:	4b26      	ldr	r3, [pc, #152]	@ (80006bc <calculator_Led_Clock_ON_OFF+0x490>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d109      	bne.n	800063c <calculator_Led_Clock_ON_OFF+0x410>
 8000628:	4b25      	ldr	r3, [pc, #148]	@ (80006c0 <calculator_Led_Clock_ON_OFF+0x494>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d005      	beq.n	800063c <calculator_Led_Clock_ON_OFF+0x410>
 8000630:	4b24      	ldr	r3, [pc, #144]	@ (80006c4 <calculator_Led_Clock_ON_OFF+0x498>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d101      	bne.n	800063c <calculator_Led_Clock_ON_OFF+0x410>
 8000638:	2301      	movs	r3, #1
 800063a:	e000      	b.n	800063e <calculator_Led_Clock_ON_OFF+0x412>
 800063c:	2300      	movs	r3, #0
 800063e:	4313      	orrs	r3, r2
 8000640:	2b00      	cmp	r3, #0
 8000642:	bf14      	ite	ne
 8000644:	2301      	movne	r3, #1
 8000646:	2300      	moveq	r3, #0
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <calculator_Led_Clock_ON_OFF+0x488>)
 800064c:	709a      	strb	r2, [r3, #2]
		Led[3] |= !A3 && !A2 && A1 && A0;
 800064e:	4b19      	ldr	r3, [pc, #100]	@ (80006b4 <calculator_Led_Clock_ON_OFF+0x488>)
 8000650:	78db      	ldrb	r3, [r3, #3]
 8000652:	461a      	mov	r2, r3
 8000654:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <calculator_Led_Clock_ON_OFF+0x48c>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d10d      	bne.n	8000678 <calculator_Led_Clock_ON_OFF+0x44c>
 800065c:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <calculator_Led_Clock_ON_OFF+0x490>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d109      	bne.n	8000678 <calculator_Led_Clock_ON_OFF+0x44c>
 8000664:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <calculator_Led_Clock_ON_OFF+0x494>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d005      	beq.n	8000678 <calculator_Led_Clock_ON_OFF+0x44c>
 800066c:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <calculator_Led_Clock_ON_OFF+0x498>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <calculator_Led_Clock_ON_OFF+0x44c>
 8000674:	2301      	movs	r3, #1
 8000676:	e000      	b.n	800067a <calculator_Led_Clock_ON_OFF+0x44e>
 8000678:	2300      	movs	r3, #0
 800067a:	4313      	orrs	r3, r2
 800067c:	2b00      	cmp	r3, #0
 800067e:	bf14      	ite	ne
 8000680:	2301      	movne	r3, #1
 8000682:	2300      	moveq	r3, #0
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <calculator_Led_Clock_ON_OFF+0x488>)
 8000688:	70da      	strb	r2, [r3, #3]
		Led[4] |= !A3 && A2 && !A1 && !A0;
 800068a:	4b0a      	ldr	r3, [pc, #40]	@ (80006b4 <calculator_Led_Clock_ON_OFF+0x488>)
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	461a      	mov	r2, r3
 8000690:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <calculator_Led_Clock_ON_OFF+0x48c>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d117      	bne.n	80006c8 <calculator_Led_Clock_ON_OFF+0x49c>
 8000698:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <calculator_Led_Clock_ON_OFF+0x490>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d013      	beq.n	80006c8 <calculator_Led_Clock_ON_OFF+0x49c>
 80006a0:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <calculator_Led_Clock_ON_OFF+0x494>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d10f      	bne.n	80006c8 <calculator_Led_Clock_ON_OFF+0x49c>
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <calculator_Led_Clock_ON_OFF+0x498>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d10b      	bne.n	80006c8 <calculator_Led_Clock_ON_OFF+0x49c>
 80006b0:	2301      	movs	r3, #1
 80006b2:	e00a      	b.n	80006ca <calculator_Led_Clock_ON_OFF+0x49e>
 80006b4:	2000002c 	.word	0x2000002c
 80006b8:	20000028 	.word	0x20000028
 80006bc:	20000029 	.word	0x20000029
 80006c0:	2000002a 	.word	0x2000002a
 80006c4:	2000002b 	.word	0x2000002b
 80006c8:	2300      	movs	r3, #0
 80006ca:	4313      	orrs	r3, r2
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	bf14      	ite	ne
 80006d0:	2301      	movne	r3, #1
 80006d2:	2300      	moveq	r3, #0
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b6c      	ldr	r3, [pc, #432]	@ (8000888 <calculator_Led_Clock_ON_OFF+0x65c>)
 80006d8:	711a      	strb	r2, [r3, #4]
		Led[5] |= !A3 && A2 && !A1 && A0;
 80006da:	4b6b      	ldr	r3, [pc, #428]	@ (8000888 <calculator_Led_Clock_ON_OFF+0x65c>)
 80006dc:	795b      	ldrb	r3, [r3, #5]
 80006de:	461a      	mov	r2, r3
 80006e0:	4b6a      	ldr	r3, [pc, #424]	@ (800088c <calculator_Led_Clock_ON_OFF+0x660>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d10d      	bne.n	8000704 <calculator_Led_Clock_ON_OFF+0x4d8>
 80006e8:	4b69      	ldr	r3, [pc, #420]	@ (8000890 <calculator_Led_Clock_ON_OFF+0x664>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d009      	beq.n	8000704 <calculator_Led_Clock_ON_OFF+0x4d8>
 80006f0:	4b68      	ldr	r3, [pc, #416]	@ (8000894 <calculator_Led_Clock_ON_OFF+0x668>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d105      	bne.n	8000704 <calculator_Led_Clock_ON_OFF+0x4d8>
 80006f8:	4b67      	ldr	r3, [pc, #412]	@ (8000898 <calculator_Led_Clock_ON_OFF+0x66c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <calculator_Led_Clock_ON_OFF+0x4d8>
 8000700:	2301      	movs	r3, #1
 8000702:	e000      	b.n	8000706 <calculator_Led_Clock_ON_OFF+0x4da>
 8000704:	2300      	movs	r3, #0
 8000706:	4313      	orrs	r3, r2
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf14      	ite	ne
 800070c:	2301      	movne	r3, #1
 800070e:	2300      	moveq	r3, #0
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b5d      	ldr	r3, [pc, #372]	@ (8000888 <calculator_Led_Clock_ON_OFF+0x65c>)
 8000714:	715a      	strb	r2, [r3, #5]
		Led[6] |= !A3 && A2 && A1 && !A0;
 8000716:	4b5c      	ldr	r3, [pc, #368]	@ (8000888 <calculator_Led_Clock_ON_OFF+0x65c>)
 8000718:	799b      	ldrb	r3, [r3, #6]
 800071a:	461a      	mov	r2, r3
 800071c:	4b5b      	ldr	r3, [pc, #364]	@ (800088c <calculator_Led_Clock_ON_OFF+0x660>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d10d      	bne.n	8000740 <calculator_Led_Clock_ON_OFF+0x514>
 8000724:	4b5a      	ldr	r3, [pc, #360]	@ (8000890 <calculator_Led_Clock_ON_OFF+0x664>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d009      	beq.n	8000740 <calculator_Led_Clock_ON_OFF+0x514>
 800072c:	4b59      	ldr	r3, [pc, #356]	@ (8000894 <calculator_Led_Clock_ON_OFF+0x668>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d005      	beq.n	8000740 <calculator_Led_Clock_ON_OFF+0x514>
 8000734:	4b58      	ldr	r3, [pc, #352]	@ (8000898 <calculator_Led_Clock_ON_OFF+0x66c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d101      	bne.n	8000740 <calculator_Led_Clock_ON_OFF+0x514>
 800073c:	2301      	movs	r3, #1
 800073e:	e000      	b.n	8000742 <calculator_Led_Clock_ON_OFF+0x516>
 8000740:	2300      	movs	r3, #0
 8000742:	4313      	orrs	r3, r2
 8000744:	2b00      	cmp	r3, #0
 8000746:	bf14      	ite	ne
 8000748:	2301      	movne	r3, #1
 800074a:	2300      	moveq	r3, #0
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b4e      	ldr	r3, [pc, #312]	@ (8000888 <calculator_Led_Clock_ON_OFF+0x65c>)
 8000750:	719a      	strb	r2, [r3, #6]
		Led[7] |= !A3 && A2 && A1 && A0;
 8000752:	4b4d      	ldr	r3, [pc, #308]	@ (8000888 <calculator_Led_Clock_ON_OFF+0x65c>)
 8000754:	79db      	ldrb	r3, [r3, #7]
 8000756:	461a      	mov	r2, r3
 8000758:	4b4c      	ldr	r3, [pc, #304]	@ (800088c <calculator_Led_Clock_ON_OFF+0x660>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d10d      	bne.n	800077c <calculator_Led_Clock_ON_OFF+0x550>
 8000760:	4b4b      	ldr	r3, [pc, #300]	@ (8000890 <calculator_Led_Clock_ON_OFF+0x664>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d009      	beq.n	800077c <calculator_Led_Clock_ON_OFF+0x550>
 8000768:	4b4a      	ldr	r3, [pc, #296]	@ (8000894 <calculator_Led_Clock_ON_OFF+0x668>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d005      	beq.n	800077c <calculator_Led_Clock_ON_OFF+0x550>
 8000770:	4b49      	ldr	r3, [pc, #292]	@ (8000898 <calculator_Led_Clock_ON_OFF+0x66c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <calculator_Led_Clock_ON_OFF+0x550>
 8000778:	2301      	movs	r3, #1
 800077a:	e000      	b.n	800077e <calculator_Led_Clock_ON_OFF+0x552>
 800077c:	2300      	movs	r3, #0
 800077e:	4313      	orrs	r3, r2
 8000780:	2b00      	cmp	r3, #0
 8000782:	bf14      	ite	ne
 8000784:	2301      	movne	r3, #1
 8000786:	2300      	moveq	r3, #0
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b3f      	ldr	r3, [pc, #252]	@ (8000888 <calculator_Led_Clock_ON_OFF+0x65c>)
 800078c:	71da      	strb	r2, [r3, #7]
		Led[8] |= A3 && !A2 && !A1 && !A0;
 800078e:	4b3e      	ldr	r3, [pc, #248]	@ (8000888 <calculator_Led_Clock_ON_OFF+0x65c>)
 8000790:	7a1b      	ldrb	r3, [r3, #8]
 8000792:	461a      	mov	r2, r3
 8000794:	4b3d      	ldr	r3, [pc, #244]	@ (800088c <calculator_Led_Clock_ON_OFF+0x660>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d00d      	beq.n	80007b8 <calculator_Led_Clock_ON_OFF+0x58c>
 800079c:	4b3c      	ldr	r3, [pc, #240]	@ (8000890 <calculator_Led_Clock_ON_OFF+0x664>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d109      	bne.n	80007b8 <calculator_Led_Clock_ON_OFF+0x58c>
 80007a4:	4b3b      	ldr	r3, [pc, #236]	@ (8000894 <calculator_Led_Clock_ON_OFF+0x668>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d105      	bne.n	80007b8 <calculator_Led_Clock_ON_OFF+0x58c>
 80007ac:	4b3a      	ldr	r3, [pc, #232]	@ (8000898 <calculator_Led_Clock_ON_OFF+0x66c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d101      	bne.n	80007b8 <calculator_Led_Clock_ON_OFF+0x58c>
 80007b4:	2301      	movs	r3, #1
 80007b6:	e000      	b.n	80007ba <calculator_Led_Clock_ON_OFF+0x58e>
 80007b8:	2300      	movs	r3, #0
 80007ba:	4313      	orrs	r3, r2
 80007bc:	2b00      	cmp	r3, #0
 80007be:	bf14      	ite	ne
 80007c0:	2301      	movne	r3, #1
 80007c2:	2300      	moveq	r3, #0
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b30      	ldr	r3, [pc, #192]	@ (8000888 <calculator_Led_Clock_ON_OFF+0x65c>)
 80007c8:	721a      	strb	r2, [r3, #8]
		Led[9] |= A3 && !A2 && !A1 && A0;
 80007ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000888 <calculator_Led_Clock_ON_OFF+0x65c>)
 80007cc:	7a5b      	ldrb	r3, [r3, #9]
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b2e      	ldr	r3, [pc, #184]	@ (800088c <calculator_Led_Clock_ON_OFF+0x660>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d00d      	beq.n	80007f4 <calculator_Led_Clock_ON_OFF+0x5c8>
 80007d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000890 <calculator_Led_Clock_ON_OFF+0x664>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d109      	bne.n	80007f4 <calculator_Led_Clock_ON_OFF+0x5c8>
 80007e0:	4b2c      	ldr	r3, [pc, #176]	@ (8000894 <calculator_Led_Clock_ON_OFF+0x668>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d105      	bne.n	80007f4 <calculator_Led_Clock_ON_OFF+0x5c8>
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <calculator_Led_Clock_ON_OFF+0x66c>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <calculator_Led_Clock_ON_OFF+0x5c8>
 80007f0:	2301      	movs	r3, #1
 80007f2:	e000      	b.n	80007f6 <calculator_Led_Clock_ON_OFF+0x5ca>
 80007f4:	2300      	movs	r3, #0
 80007f6:	4313      	orrs	r3, r2
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	bf14      	ite	ne
 80007fc:	2301      	movne	r3, #1
 80007fe:	2300      	moveq	r3, #0
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <calculator_Led_Clock_ON_OFF+0x65c>)
 8000804:	725a      	strb	r2, [r3, #9]
		Led[10] |= A3 && !A2 && A1 && !A0;
 8000806:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <calculator_Led_Clock_ON_OFF+0x65c>)
 8000808:	7a9b      	ldrb	r3, [r3, #10]
 800080a:	461a      	mov	r2, r3
 800080c:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <calculator_Led_Clock_ON_OFF+0x660>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d00d      	beq.n	8000830 <calculator_Led_Clock_ON_OFF+0x604>
 8000814:	4b1e      	ldr	r3, [pc, #120]	@ (8000890 <calculator_Led_Clock_ON_OFF+0x664>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d109      	bne.n	8000830 <calculator_Led_Clock_ON_OFF+0x604>
 800081c:	4b1d      	ldr	r3, [pc, #116]	@ (8000894 <calculator_Led_Clock_ON_OFF+0x668>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d005      	beq.n	8000830 <calculator_Led_Clock_ON_OFF+0x604>
 8000824:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <calculator_Led_Clock_ON_OFF+0x66c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d101      	bne.n	8000830 <calculator_Led_Clock_ON_OFF+0x604>
 800082c:	2301      	movs	r3, #1
 800082e:	e000      	b.n	8000832 <calculator_Led_Clock_ON_OFF+0x606>
 8000830:	2300      	movs	r3, #0
 8000832:	4313      	orrs	r3, r2
 8000834:	2b00      	cmp	r3, #0
 8000836:	bf14      	ite	ne
 8000838:	2301      	movne	r3, #1
 800083a:	2300      	moveq	r3, #0
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <calculator_Led_Clock_ON_OFF+0x65c>)
 8000840:	729a      	strb	r2, [r3, #10]
	    Led[11] |= A3 && !A2 && A1 && A0;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <calculator_Led_Clock_ON_OFF+0x65c>)
 8000844:	7adb      	ldrb	r3, [r3, #11]
 8000846:	461a      	mov	r2, r3
 8000848:	4b10      	ldr	r3, [pc, #64]	@ (800088c <calculator_Led_Clock_ON_OFF+0x660>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d00d      	beq.n	800086c <calculator_Led_Clock_ON_OFF+0x640>
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <calculator_Led_Clock_ON_OFF+0x664>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d109      	bne.n	800086c <calculator_Led_Clock_ON_OFF+0x640>
 8000858:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <calculator_Led_Clock_ON_OFF+0x668>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d005      	beq.n	800086c <calculator_Led_Clock_ON_OFF+0x640>
 8000860:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <calculator_Led_Clock_ON_OFF+0x66c>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <calculator_Led_Clock_ON_OFF+0x640>
 8000868:	2301      	movs	r3, #1
 800086a:	e000      	b.n	800086e <calculator_Led_Clock_ON_OFF+0x642>
 800086c:	2300      	movs	r3, #0
 800086e:	4313      	orrs	r3, r2
 8000870:	2b00      	cmp	r3, #0
 8000872:	bf14      	ite	ne
 8000874:	2301      	movne	r3, #1
 8000876:	2300      	moveq	r3, #0
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b03      	ldr	r3, [pc, #12]	@ (8000888 <calculator_Led_Clock_ON_OFF+0x65c>)
 800087c:	72da      	strb	r2, [r3, #11]
	}

}
 800087e:	bf00      	nop
 8000880:	3744      	adds	r7, #68	@ 0x44
 8000882:	46bd      	mov	sp, r7
 8000884:	bcb0      	pop	{r4, r5, r7}
 8000886:	4770      	bx	lr
 8000888:	2000002c 	.word	0x2000002c
 800088c:	20000028 	.word	0x20000028
 8000890:	20000029 	.word	0x20000029
 8000894:	2000002a 	.word	0x2000002a
 8000898:	2000002b 	.word	0x2000002b

0800089c <clearAllClock>:

void clearAllClock(){
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 12; i++){
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	e007      	b.n	80008b8 <clearAllClock+0x1c>
		Led[i] |= 0b1;
 80008a8:	4a08      	ldr	r2, [pc, #32]	@ (80008cc <clearAllClock+0x30>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	2201      	movs	r2, #1
 80008b0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 12; i++){
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3301      	adds	r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b0b      	cmp	r3, #11
 80008bc:	ddf4      	ble.n	80008a8 <clearAllClock+0xc>
	}
}
 80008be:	bf00      	nop
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	2000002c 	.word	0x2000002c

080008d0 <loop_Led>:

void loop_Led(){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Led_0_GPIO_Port, Led_0_Pin, Led[0]);
 80008d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000994 <loop_Led+0xc4>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	2120      	movs	r1, #32
 80008dc:	482e      	ldr	r0, [pc, #184]	@ (8000998 <loop_Led+0xc8>)
 80008de:	f000 fd95 	bl	800140c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_1_GPIO_Port, Led_1_Pin, Led[1]);
 80008e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000994 <loop_Led+0xc4>)
 80008e4:	785b      	ldrb	r3, [r3, #1]
 80008e6:	461a      	mov	r2, r3
 80008e8:	2140      	movs	r1, #64	@ 0x40
 80008ea:	482b      	ldr	r0, [pc, #172]	@ (8000998 <loop_Led+0xc8>)
 80008ec:	f000 fd8e 	bl	800140c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_2_GPIO_Port, Led_2_Pin, Led[2]);
 80008f0:	4b28      	ldr	r3, [pc, #160]	@ (8000994 <loop_Led+0xc4>)
 80008f2:	789b      	ldrb	r3, [r3, #2]
 80008f4:	461a      	mov	r2, r3
 80008f6:	2180      	movs	r1, #128	@ 0x80
 80008f8:	4827      	ldr	r0, [pc, #156]	@ (8000998 <loop_Led+0xc8>)
 80008fa:	f000 fd87 	bl	800140c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_3_GPIO_Port, Led_3_Pin, Led[3]);
 80008fe:	4b25      	ldr	r3, [pc, #148]	@ (8000994 <loop_Led+0xc4>)
 8000900:	78db      	ldrb	r3, [r3, #3]
 8000902:	461a      	mov	r2, r3
 8000904:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000908:	4823      	ldr	r0, [pc, #140]	@ (8000998 <loop_Led+0xc8>)
 800090a:	f000 fd7f 	bl	800140c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_4_GPIO_Port, Led_4_Pin, Led[4]);
 800090e:	4b21      	ldr	r3, [pc, #132]	@ (8000994 <loop_Led+0xc4>)
 8000910:	791b      	ldrb	r3, [r3, #4]
 8000912:	461a      	mov	r2, r3
 8000914:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000918:	481f      	ldr	r0, [pc, #124]	@ (8000998 <loop_Led+0xc8>)
 800091a:	f000 fd77 	bl	800140c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_5_GPIO_Port, Led_5_Pin, Led[5]);
 800091e:	4b1d      	ldr	r3, [pc, #116]	@ (8000994 <loop_Led+0xc4>)
 8000920:	795b      	ldrb	r3, [r3, #5]
 8000922:	461a      	mov	r2, r3
 8000924:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000928:	481b      	ldr	r0, [pc, #108]	@ (8000998 <loop_Led+0xc8>)
 800092a:	f000 fd6f 	bl	800140c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_6_GPIO_Port, Led_6_Pin, Led[6]);
 800092e:	4b19      	ldr	r3, [pc, #100]	@ (8000994 <loop_Led+0xc4>)
 8000930:	799b      	ldrb	r3, [r3, #6]
 8000932:	461a      	mov	r2, r3
 8000934:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000938:	4818      	ldr	r0, [pc, #96]	@ (800099c <loop_Led+0xcc>)
 800093a:	f000 fd67 	bl	800140c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_7_GPIO_Port, Led_7_Pin, Led[7]);
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <loop_Led+0xc4>)
 8000940:	79db      	ldrb	r3, [r3, #7]
 8000942:	461a      	mov	r2, r3
 8000944:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000948:	4814      	ldr	r0, [pc, #80]	@ (800099c <loop_Led+0xcc>)
 800094a:	f000 fd5f 	bl	800140c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_8_GPIO_Port, Led_8_Pin, Led[8]);
 800094e:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <loop_Led+0xc4>)
 8000950:	7a1b      	ldrb	r3, [r3, #8]
 8000952:	461a      	mov	r2, r3
 8000954:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000958:	4810      	ldr	r0, [pc, #64]	@ (800099c <loop_Led+0xcc>)
 800095a:	f000 fd57 	bl	800140c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_9_GPIO_Port, Led_9_Pin, Led[9]);
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <loop_Led+0xc4>)
 8000960:	7a5b      	ldrb	r3, [r3, #9]
 8000962:	461a      	mov	r2, r3
 8000964:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000968:	480c      	ldr	r0, [pc, #48]	@ (800099c <loop_Led+0xcc>)
 800096a:	f000 fd4f 	bl	800140c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_10_GPIO_Port, Led_10_Pin, Led[10]);
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <loop_Led+0xc4>)
 8000970:	7a9b      	ldrb	r3, [r3, #10]
 8000972:	461a      	mov	r2, r3
 8000974:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000978:	4808      	ldr	r0, [pc, #32]	@ (800099c <loop_Led+0xcc>)
 800097a:	f000 fd47 	bl	800140c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_11_GPIO_Port, Led_11_Pin, Led[11]);
 800097e:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <loop_Led+0xc4>)
 8000980:	7adb      	ldrb	r3, [r3, #11]
 8000982:	461a      	mov	r2, r3
 8000984:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000988:	4804      	ldr	r0, [pc, #16]	@ (800099c <loop_Led+0xcc>)
 800098a:	f000 fd3f 	bl	800140c <HAL_GPIO_WritePin>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000002c 	.word	0x2000002c
 8000998:	40010800 	.word	0x40010800
 800099c:	40010c00 	.word	0x40010c00

080009a0 <setNumberOnClock>:

void setNumberOnClock(int num){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	calculator_Led_Clock_ON_OFF(num, 0);
 80009a8:	2100      	movs	r1, #0
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff fc3e 	bl	800022c <calculator_Led_Clock_ON_OFF>
	loop_Led();
 80009b0:	f7ff ff8e 	bl	80008d0 <loop_Led>
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <clearNumberOnClock>:

void  clearNumberOnClock(int num){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	calculator_Led_Clock_ON_OFF(num, 1);
 80009c4:	2101      	movs	r1, #1
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff fc30 	bl	800022c <calculator_Led_Clock_ON_OFF>
	loop_Led();
 80009cc:	f7ff ff80 	bl	80008d0 <loop_Led>
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009de:	f000 fa06 	bl	8000dee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e2:	f000 f82a 	bl	8000a3a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e6:	f000 f8af 	bl	8000b48 <MX_GPIO_Init>
  MX_TIM2_Init();
 80009ea:	f000 f861 	bl	8000ab0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  System_init_Lab1();
 80009ee:	f7ff fc0f 	bl	8000210 <System_init_Lab1>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int count = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
  int condition = 1;
 80009f6:	2301      	movs	r3, #1
 80009f8:	603b      	str	r3, [r7, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if(condition){
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d002      	beq.n	8000a06 <main+0x2e>
	    	setNumberOnClock(count);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ffcd 	bl	80009a0 <setNumberOnClock>
	    }
	    if(!condition){
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d102      	bne.n	8000a12 <main+0x3a>
	        clearNumberOnClock(count);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff ffd5 	bl	80009bc <clearNumberOnClock>
	        }
	    count++;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3301      	adds	r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
	    if (count >11) {
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b0b      	cmp	r3, #11
 8000a1c:	dd08      	ble.n	8000a30 <main+0x58>
	    	count = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
	    	condition = !condition;
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	bf0c      	ite	eq
 8000a28:	2301      	moveq	r3, #1
 8000a2a:	2300      	movne	r3, #0
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	603b      	str	r3, [r7, #0]
	    }
	    HAL_Delay(500);
 8000a30:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a34:	f000 fa34 	bl	8000ea0 <HAL_Delay>
	    if(condition){
 8000a38:	e7df      	b.n	80009fa <main+0x22>

08000a3a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b090      	sub	sp, #64	@ 0x40
 8000a3e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a40:	f107 0318 	add.w	r3, r7, #24
 8000a44:	2228      	movs	r2, #40	@ 0x28
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 fcc1 	bl	80023d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a60:	2301      	movs	r3, #1
 8000a62:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a64:	2310      	movs	r3, #16
 8000a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6c:	f107 0318 	add.w	r3, r7, #24
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 fce3 	bl	800143c <HAL_RCC_OscConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a7c:	f000 f8ba 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a80:	230f      	movs	r3, #15
 8000a82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 ff51 	bl	8001940 <HAL_RCC_ClockConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000aa4:	f000 f8a6 	bl	8000bf4 <Error_Handler>
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	3740      	adds	r7, #64	@ 0x40
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000acc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b44 <MX_TIM2_Init+0x94>)
 8000ace:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ad2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b44 <MX_TIM2_Init+0x94>)
 8000ad6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000ada:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <MX_TIM2_Init+0x94>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ae2:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <MX_TIM2_Init+0x94>)
 8000ae4:	2209      	movs	r2, #9
 8000ae6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae8:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <MX_TIM2_Init+0x94>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <MX_TIM2_Init+0x94>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000af4:	4813      	ldr	r0, [pc, #76]	@ (8000b44 <MX_TIM2_Init+0x94>)
 8000af6:	f001 f84b 	bl	8001b90 <HAL_TIM_Base_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b00:	f000 f878 	bl	8000bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480c      	ldr	r0, [pc, #48]	@ (8000b44 <MX_TIM2_Init+0x94>)
 8000b12:	f001 f9d7 	bl	8001ec4 <HAL_TIM_ConfigClockSource>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b1c:	f000 f86a 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b20:	2300      	movs	r3, #0
 8000b22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b28:	463b      	mov	r3, r7
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <MX_TIM2_Init+0x94>)
 8000b2e:	f001 fbd7 	bl	80022e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b38:	f000 f85c 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000038 	.word	0x20000038

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <MX_GPIO_Init+0xa0>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a21      	ldr	r2, [pc, #132]	@ (8000be8 <MX_GPIO_Init+0xa0>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <MX_GPIO_Init+0xa0>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b74:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <MX_GPIO_Init+0xa0>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a1b      	ldr	r2, [pc, #108]	@ (8000be8 <MX_GPIO_Init+0xa0>)
 8000b7a:	f043 0308 	orr.w	r3, r3, #8
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <MX_GPIO_Init+0xa0>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0308 	and.w	r3, r3, #8
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_0_Pin|Led_1_Pin|Led_2_Pin|Led_3_Pin
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8000b92:	4816      	ldr	r0, [pc, #88]	@ (8000bec <MX_GPIO_Init+0xa4>)
 8000b94:	f000 fc3a 	bl	800140c <HAL_GPIO_WritePin>
                          |Led_4_Pin|Led_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led_6_Pin|Led_7_Pin|Led_8_Pin|Led_9_Pin
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 417c 	mov.w	r1, #64512	@ 0xfc00
 8000b9e:	4814      	ldr	r0, [pc, #80]	@ (8000bf0 <MX_GPIO_Init+0xa8>)
 8000ba0:	f000 fc34 	bl	800140c <HAL_GPIO_WritePin>
                          |Led_10_Pin|Led_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Led_0_Pin Led_1_Pin Led_2_Pin Led_3_Pin
                           Led_4_Pin Led_5_Pin */
  GPIO_InitStruct.Pin = Led_0_Pin|Led_1_Pin|Led_2_Pin|Led_3_Pin
 8000ba4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000ba8:	60bb      	str	r3, [r7, #8]
                          |Led_4_Pin|Led_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480b      	ldr	r0, [pc, #44]	@ (8000bec <MX_GPIO_Init+0xa4>)
 8000bbe:	f000 faa1 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_6_Pin Led_7_Pin Led_8_Pin Led_9_Pin
                           Led_10_Pin Led_11_Pin */
  GPIO_InitStruct.Pin = Led_6_Pin|Led_7_Pin|Led_8_Pin|Led_9_Pin
 8000bc2:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000bc6:	60bb      	str	r3, [r7, #8]
                          |Led_10_Pin|Led_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4805      	ldr	r0, [pc, #20]	@ (8000bf0 <MX_GPIO_Init+0xa8>)
 8000bdc:	f000 fa92 	bl	8001104 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40010800 	.word	0x40010800
 8000bf0:	40010c00 	.word	0x40010c00

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <Error_Handler+0x8>

08000c00 <timer_init>:
uint16_t timer_counter[10];
uint16_t timer_MUL[10];



void timer_init(){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000c04:	4802      	ldr	r0, [pc, #8]	@ (8000c10 <timer_init+0x10>)
 8000c06:	f001 f813 	bl	8001c30 <HAL_TIM_Base_Start_IT>
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000038 	.word	0x20000038

08000c14 <setTimer>:
/////////////////////////////////////////////////////////////
void setTimer(uint8_t index, uint16_t duration){
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	460a      	mov	r2, r1
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	4613      	mov	r3, r2
 8000c22:	80bb      	strh	r3, [r7, #4]
	timer_MUL[index] = duration/TIMER_CYCLE;
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	88ba      	ldrh	r2, [r7, #4]
 8000c28:	490c      	ldr	r1, [pc, #48]	@ (8000c5c <setTimer+0x48>)
 8000c2a:	fba1 1202 	umull	r1, r2, r1, r2
 8000c2e:	08d2      	lsrs	r2, r2, #3
 8000c30:	b291      	uxth	r1, r2
 8000c32:	4a0b      	ldr	r2, [pc, #44]	@ (8000c60 <setTimer+0x4c>)
 8000c34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	flag_timer[index] = 0;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c64 <setTimer+0x50>)
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	timer_counter[index] = timer_MUL[index];
 8000c42:	79fa      	ldrb	r2, [r7, #7]
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4906      	ldr	r1, [pc, #24]	@ (8000c60 <setTimer+0x4c>)
 8000c48:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000c4c:	4a06      	ldr	r2, [pc, #24]	@ (8000c68 <setTimer+0x54>)
 8000c4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	cccccccd 	.word	0xcccccccd
 8000c60:	200000a8 	.word	0x200000a8
 8000c64:	20000080 	.word	0x20000080
 8000c68:	20000094 	.word	0x20000094

08000c6c <HAL_TIM_PeriodElapsedCallback>:
	}

}

///////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
//		for(int i = 0; i <= 10; i++){
//			timer_run(i);
//		}
	}

}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
	...

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	4a14      	ldr	r2, [pc, #80]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6193      	str	r3, [r2, #24]
 8000c92:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca8:	61d3      	str	r3, [r2, #28]
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <HAL_MspInit+0x60>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	4a04      	ldr	r2, [pc, #16]	@ (8000ce0 <HAL_MspInit+0x60>)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010000 	.word	0x40010000

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cf4:	d113      	bne.n	8000d1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <HAL_TIM_Base_MspInit+0x44>)
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	@ (8000d28 <HAL_TIM_Base_MspInit+0x44>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	61d3      	str	r3, [r2, #28]
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <HAL_TIM_Base_MspInit+0x44>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	201c      	movs	r0, #28
 8000d14:	f000 f9bf 	bl	8001096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d18:	201c      	movs	r0, #28
 8000d1a:	f000 f9d8 	bl	80010ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40021000 	.word	0x40021000

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <NMI_Handler+0x4>

08000d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <MemManage_Handler+0x4>

08000d44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7c:	f000 f874 	bl	8000e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d88:	4802      	ldr	r0, [pc, #8]	@ (8000d94 <TIM2_IRQHandler+0x10>)
 8000d8a:	f000 ffab 	bl	8001ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000038 	.word	0x20000038

08000d98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da4:	f7ff fff8 	bl	8000d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480b      	ldr	r0, [pc, #44]	@ (8000dd8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000daa:	490c      	ldr	r1, [pc, #48]	@ (8000ddc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dac:	4a0c      	ldr	r2, [pc, #48]	@ (8000de0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a09      	ldr	r2, [pc, #36]	@ (8000de4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dc0:	4c09      	ldr	r4, [pc, #36]	@ (8000de8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dce:	f001 fb07 	bl	80023e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dd2:	f7ff fe01 	bl	80009d8 <main>
  bx lr
 8000dd6:	4770      	bx	lr
  ldr r0, =_sdata
 8000dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ddc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000de0:	080024a8 	.word	0x080024a8
  ldr r2, =_sbss
 8000de4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000de8:	200000c0 	.word	0x200000c0

08000dec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dec:	e7fe      	b.n	8000dec <ADC1_IRQHandler>

08000dee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df2:	2003      	movs	r0, #3
 8000df4:	f000 f944 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df8:	200f      	movs	r0, #15
 8000dfa:	f000 f805 	bl	8000e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dfe:	f7ff ff3f 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e10:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <HAL_InitTick+0x54>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <HAL_InitTick+0x58>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f95f 	bl	80010ea <HAL_SYSTICK_Config>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00e      	b.n	8000e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d80a      	bhi.n	8000e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f000 f927 	bl	8001096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e48:	4a06      	ldr	r2, [pc, #24]	@ (8000e64 <HAL_InitTick+0x5c>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e000      	b.n	8000e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	20000008 	.word	0x20000008
 8000e64:	20000004 	.word	0x20000004

08000e68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e6c:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <HAL_IncTick+0x1c>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <HAL_IncTick+0x20>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a03      	ldr	r2, [pc, #12]	@ (8000e88 <HAL_IncTick+0x20>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	20000008 	.word	0x20000008
 8000e88:	200000bc 	.word	0x200000bc

08000e8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b02      	ldr	r3, [pc, #8]	@ (8000e9c <HAL_GetTick+0x10>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	200000bc 	.word	0x200000bc

08000ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea8:	f7ff fff0 	bl	8000e8c <HAL_GetTick>
 8000eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb8:	d005      	beq.n	8000ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <HAL_Delay+0x44>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ec6:	bf00      	nop
 8000ec8:	f7ff ffe0 	bl	8000e8c <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d8f7      	bhi.n	8000ec8 <HAL_Delay+0x28>
  {
  }
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000008 	.word	0x20000008

08000ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	@ (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	db0b      	blt.n	8000f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 021f 	and.w	r2, r3, #31
 8000f64:	4906      	ldr	r1, [pc, #24]	@ (8000f80 <__NVIC_EnableIRQ+0x34>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	@ (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	@ (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	@ 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	@ 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800104c:	d301      	bcc.n	8001052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104e:	2301      	movs	r3, #1
 8001050:	e00f      	b.n	8001072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001052:	4a0a      	ldr	r2, [pc, #40]	@ (800107c <SysTick_Config+0x40>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105a:	210f      	movs	r1, #15
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f7ff ff90 	bl	8000f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001064:	4b05      	ldr	r3, [pc, #20]	@ (800107c <SysTick_Config+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106a:	4b04      	ldr	r3, [pc, #16]	@ (800107c <SysTick_Config+0x40>)
 800106c:	2207      	movs	r2, #7
 800106e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	e000e010 	.word	0xe000e010

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff2d 	bl	8000ee8 <__NVIC_SetPriorityGrouping>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a8:	f7ff ff42 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 80010ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff ff90 	bl	8000fd8 <NVIC_EncodePriority>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff5f 	bl	8000f84 <__NVIC_SetPriority>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff35 	bl	8000f4c <__NVIC_EnableIRQ>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffa2 	bl	800103c <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b08b      	sub	sp, #44	@ 0x2c
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001116:	e169      	b.n	80013ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001118:	2201      	movs	r2, #1
 800111a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	429a      	cmp	r2, r3
 8001132:	f040 8158 	bne.w	80013e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4a9a      	ldr	r2, [pc, #616]	@ (80013a4 <HAL_GPIO_Init+0x2a0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d05e      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 8001140:	4a98      	ldr	r2, [pc, #608]	@ (80013a4 <HAL_GPIO_Init+0x2a0>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d875      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 8001146:	4a98      	ldr	r2, [pc, #608]	@ (80013a8 <HAL_GPIO_Init+0x2a4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d058      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 800114c:	4a96      	ldr	r2, [pc, #600]	@ (80013a8 <HAL_GPIO_Init+0x2a4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d86f      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 8001152:	4a96      	ldr	r2, [pc, #600]	@ (80013ac <HAL_GPIO_Init+0x2a8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d052      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 8001158:	4a94      	ldr	r2, [pc, #592]	@ (80013ac <HAL_GPIO_Init+0x2a8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d869      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 800115e:	4a94      	ldr	r2, [pc, #592]	@ (80013b0 <HAL_GPIO_Init+0x2ac>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d04c      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 8001164:	4a92      	ldr	r2, [pc, #584]	@ (80013b0 <HAL_GPIO_Init+0x2ac>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d863      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 800116a:	4a92      	ldr	r2, [pc, #584]	@ (80013b4 <HAL_GPIO_Init+0x2b0>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d046      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 8001170:	4a90      	ldr	r2, [pc, #576]	@ (80013b4 <HAL_GPIO_Init+0x2b0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d85d      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 8001176:	2b12      	cmp	r3, #18
 8001178:	d82a      	bhi.n	80011d0 <HAL_GPIO_Init+0xcc>
 800117a:	2b12      	cmp	r3, #18
 800117c:	d859      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 800117e:	a201      	add	r2, pc, #4	@ (adr r2, 8001184 <HAL_GPIO_Init+0x80>)
 8001180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001184:	080011ff 	.word	0x080011ff
 8001188:	080011d9 	.word	0x080011d9
 800118c:	080011eb 	.word	0x080011eb
 8001190:	0800122d 	.word	0x0800122d
 8001194:	08001233 	.word	0x08001233
 8001198:	08001233 	.word	0x08001233
 800119c:	08001233 	.word	0x08001233
 80011a0:	08001233 	.word	0x08001233
 80011a4:	08001233 	.word	0x08001233
 80011a8:	08001233 	.word	0x08001233
 80011ac:	08001233 	.word	0x08001233
 80011b0:	08001233 	.word	0x08001233
 80011b4:	08001233 	.word	0x08001233
 80011b8:	08001233 	.word	0x08001233
 80011bc:	08001233 	.word	0x08001233
 80011c0:	08001233 	.word	0x08001233
 80011c4:	08001233 	.word	0x08001233
 80011c8:	080011e1 	.word	0x080011e1
 80011cc:	080011f5 	.word	0x080011f5
 80011d0:	4a79      	ldr	r2, [pc, #484]	@ (80013b8 <HAL_GPIO_Init+0x2b4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d013      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011d6:	e02c      	b.n	8001232 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	623b      	str	r3, [r7, #32]
          break;
 80011de:	e029      	b.n	8001234 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	3304      	adds	r3, #4
 80011e6:	623b      	str	r3, [r7, #32]
          break;
 80011e8:	e024      	b.n	8001234 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	3308      	adds	r3, #8
 80011f0:	623b      	str	r3, [r7, #32]
          break;
 80011f2:	e01f      	b.n	8001234 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	330c      	adds	r3, #12
 80011fa:	623b      	str	r3, [r7, #32]
          break;
 80011fc:	e01a      	b.n	8001234 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001206:	2304      	movs	r3, #4
 8001208:	623b      	str	r3, [r7, #32]
          break;
 800120a:	e013      	b.n	8001234 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001214:	2308      	movs	r3, #8
 8001216:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	611a      	str	r2, [r3, #16]
          break;
 800121e:	e009      	b.n	8001234 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001220:	2308      	movs	r3, #8
 8001222:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	615a      	str	r2, [r3, #20]
          break;
 800122a:	e003      	b.n	8001234 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
          break;
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x130>
          break;
 8001232:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	2bff      	cmp	r3, #255	@ 0xff
 8001238:	d801      	bhi.n	800123e <HAL_GPIO_Init+0x13a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	e001      	b.n	8001242 <HAL_GPIO_Init+0x13e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3304      	adds	r3, #4
 8001242:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	2bff      	cmp	r3, #255	@ 0xff
 8001248:	d802      	bhi.n	8001250 <HAL_GPIO_Init+0x14c>
 800124a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	e002      	b.n	8001256 <HAL_GPIO_Init+0x152>
 8001250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001252:	3b08      	subs	r3, #8
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	210f      	movs	r1, #15
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	401a      	ands	r2, r3
 8001268:	6a39      	ldr	r1, [r7, #32]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	431a      	orrs	r2, r3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80b1 	beq.w	80013e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001284:	4b4d      	ldr	r3, [pc, #308]	@ (80013bc <HAL_GPIO_Init+0x2b8>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a4c      	ldr	r2, [pc, #304]	@ (80013bc <HAL_GPIO_Init+0x2b8>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b4a      	ldr	r3, [pc, #296]	@ (80013bc <HAL_GPIO_Init+0x2b8>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800129c:	4a48      	ldr	r2, [pc, #288]	@ (80013c0 <HAL_GPIO_Init+0x2bc>)
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	220f      	movs	r2, #15
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4013      	ands	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a40      	ldr	r2, [pc, #256]	@ (80013c4 <HAL_GPIO_Init+0x2c0>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d013      	beq.n	80012f0 <HAL_GPIO_Init+0x1ec>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a3f      	ldr	r2, [pc, #252]	@ (80013c8 <HAL_GPIO_Init+0x2c4>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d00d      	beq.n	80012ec <HAL_GPIO_Init+0x1e8>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a3e      	ldr	r2, [pc, #248]	@ (80013cc <HAL_GPIO_Init+0x2c8>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d007      	beq.n	80012e8 <HAL_GPIO_Init+0x1e4>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a3d      	ldr	r2, [pc, #244]	@ (80013d0 <HAL_GPIO_Init+0x2cc>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d101      	bne.n	80012e4 <HAL_GPIO_Init+0x1e0>
 80012e0:	2303      	movs	r3, #3
 80012e2:	e006      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012e4:	2304      	movs	r3, #4
 80012e6:	e004      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012e8:	2302      	movs	r3, #2
 80012ea:	e002      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012f0:	2300      	movs	r3, #0
 80012f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012f4:	f002 0203 	and.w	r2, r2, #3
 80012f8:	0092      	lsls	r2, r2, #2
 80012fa:	4093      	lsls	r3, r2
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001302:	492f      	ldr	r1, [pc, #188]	@ (80013c0 <HAL_GPIO_Init+0x2bc>)
 8001304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001306:	089b      	lsrs	r3, r3, #2
 8001308:	3302      	adds	r3, #2
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d006      	beq.n	800132a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800131c:	4b2d      	ldr	r3, [pc, #180]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	492c      	ldr	r1, [pc, #176]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	608b      	str	r3, [r1, #8]
 8001328:	e006      	b.n	8001338 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800132a:	4b2a      	ldr	r3, [pc, #168]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	43db      	mvns	r3, r3
 8001332:	4928      	ldr	r1, [pc, #160]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001334:	4013      	ands	r3, r2
 8001336:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001344:	4b23      	ldr	r3, [pc, #140]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	4922      	ldr	r1, [pc, #136]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	60cb      	str	r3, [r1, #12]
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001352:	4b20      	ldr	r3, [pc, #128]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	43db      	mvns	r3, r3
 800135a:	491e      	ldr	r1, [pc, #120]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800135c:	4013      	ands	r3, r2
 800135e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800136c:	4b19      	ldr	r3, [pc, #100]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	4918      	ldr	r1, [pc, #96]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	604b      	str	r3, [r1, #4]
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800137a:	4b16      	ldr	r3, [pc, #88]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	43db      	mvns	r3, r3
 8001382:	4914      	ldr	r1, [pc, #80]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001384:	4013      	ands	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d021      	beq.n	80013d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001394:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	490e      	ldr	r1, [pc, #56]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	600b      	str	r3, [r1, #0]
 80013a0:	e021      	b.n	80013e6 <HAL_GPIO_Init+0x2e2>
 80013a2:	bf00      	nop
 80013a4:	10320000 	.word	0x10320000
 80013a8:	10310000 	.word	0x10310000
 80013ac:	10220000 	.word	0x10220000
 80013b0:	10210000 	.word	0x10210000
 80013b4:	10120000 	.word	0x10120000
 80013b8:	10110000 	.word	0x10110000
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010000 	.word	0x40010000
 80013c4:	40010800 	.word	0x40010800
 80013c8:	40010c00 	.word	0x40010c00
 80013cc:	40011000 	.word	0x40011000
 80013d0:	40011400 	.word	0x40011400
 80013d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <HAL_GPIO_Init+0x304>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	43db      	mvns	r3, r3
 80013e0:	4909      	ldr	r1, [pc, #36]	@ (8001408 <HAL_GPIO_Init+0x304>)
 80013e2:	4013      	ands	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	3301      	adds	r3, #1
 80013ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f2:	fa22 f303 	lsr.w	r3, r2, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f47f ae8e 	bne.w	8001118 <HAL_GPIO_Init+0x14>
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	372c      	adds	r7, #44	@ 0x2c
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	40010400 	.word	0x40010400

0800140c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	807b      	strh	r3, [r7, #2]
 8001418:	4613      	mov	r3, r2
 800141a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800141c:	787b      	ldrb	r3, [r7, #1]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001422:	887a      	ldrh	r2, [r7, #2]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001428:	e003      	b.n	8001432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	041a      	lsls	r2, r3, #16
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	611a      	str	r2, [r3, #16]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e272      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8087 	beq.w	800156a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800145c:	4b92      	ldr	r3, [pc, #584]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 030c 	and.w	r3, r3, #12
 8001464:	2b04      	cmp	r3, #4
 8001466:	d00c      	beq.n	8001482 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001468:	4b8f      	ldr	r3, [pc, #572]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 030c 	and.w	r3, r3, #12
 8001470:	2b08      	cmp	r3, #8
 8001472:	d112      	bne.n	800149a <HAL_RCC_OscConfig+0x5e>
 8001474:	4b8c      	ldr	r3, [pc, #560]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001480:	d10b      	bne.n	800149a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001482:	4b89      	ldr	r3, [pc, #548]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d06c      	beq.n	8001568 <HAL_RCC_OscConfig+0x12c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d168      	bne.n	8001568 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e24c      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a2:	d106      	bne.n	80014b2 <HAL_RCC_OscConfig+0x76>
 80014a4:	4b80      	ldr	r3, [pc, #512]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a7f      	ldr	r2, [pc, #508]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	e02e      	b.n	8001510 <HAL_RCC_OscConfig+0xd4>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x98>
 80014ba:	4b7b      	ldr	r3, [pc, #492]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a7a      	ldr	r2, [pc, #488]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b78      	ldr	r3, [pc, #480]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a77      	ldr	r2, [pc, #476]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e01d      	b.n	8001510 <HAL_RCC_OscConfig+0xd4>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0xbc>
 80014de:	4b72      	ldr	r3, [pc, #456]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a71      	ldr	r2, [pc, #452]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b6f      	ldr	r3, [pc, #444]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a6e      	ldr	r2, [pc, #440]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e00b      	b.n	8001510 <HAL_RCC_OscConfig+0xd4>
 80014f8:	4b6b      	ldr	r3, [pc, #428]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a6a      	ldr	r2, [pc, #424]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b68      	ldr	r3, [pc, #416]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a67      	ldr	r2, [pc, #412]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800150a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800150e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d013      	beq.n	8001540 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fcb8 	bl	8000e8c <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fcb4 	bl	8000e8c <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	@ 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e200      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4b5d      	ldr	r3, [pc, #372]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0xe4>
 800153e:	e014      	b.n	800156a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fca4 	bl	8000e8c <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fca0 	bl	8000e8c <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	@ 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e1ec      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	4b53      	ldr	r3, [pc, #332]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x10c>
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d063      	beq.n	800163e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001576:	4b4c      	ldr	r3, [pc, #304]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00b      	beq.n	800159a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001582:	4b49      	ldr	r3, [pc, #292]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b08      	cmp	r3, #8
 800158c:	d11c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x18c>
 800158e:	4b46      	ldr	r3, [pc, #280]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d116      	bne.n	80015c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	4b43      	ldr	r3, [pc, #268]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <HAL_RCC_OscConfig+0x176>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d001      	beq.n	80015b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e1c0      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b2:	4b3d      	ldr	r3, [pc, #244]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4939      	ldr	r1, [pc, #228]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c6:	e03a      	b.n	800163e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d020      	beq.n	8001612 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d0:	4b36      	ldr	r3, [pc, #216]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d6:	f7ff fc59 	bl	8000e8c <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015de:	f7ff fc55 	bl	8000e8c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e1a1      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	4b2d      	ldr	r3, [pc, #180]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fc:	4b2a      	ldr	r3, [pc, #168]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4927      	ldr	r1, [pc, #156]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800160c:	4313      	orrs	r3, r2
 800160e:	600b      	str	r3, [r1, #0]
 8001610:	e015      	b.n	800163e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001612:	4b26      	ldr	r3, [pc, #152]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fc38 	bl	8000e8c <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001620:	f7ff fc34 	bl	8000e8c <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e180      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001632:	4b1d      	ldr	r3, [pc, #116]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d03a      	beq.n	80016c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d019      	beq.n	8001686 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001652:	4b17      	ldr	r3, [pc, #92]	@ (80016b0 <HAL_RCC_OscConfig+0x274>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001658:	f7ff fc18 	bl	8000e8c <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001660:	f7ff fc14 	bl	8000e8c <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e160      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	4b0d      	ldr	r3, [pc, #52]	@ (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800167e:	2001      	movs	r0, #1
 8001680:	f000 fa68 	bl	8001b54 <RCC_Delay>
 8001684:	e01c      	b.n	80016c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001686:	4b0a      	ldr	r3, [pc, #40]	@ (80016b0 <HAL_RCC_OscConfig+0x274>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168c:	f7ff fbfe 	bl	8000e8c <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001692:	e00f      	b.n	80016b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff fbfa 	bl	8000e8c <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d908      	bls.n	80016b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e146      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	42420000 	.word	0x42420000
 80016b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b4:	4b92      	ldr	r3, [pc, #584]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1e9      	bne.n	8001694 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 80a6 	beq.w	800181a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10d      	bne.n	80016fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	4b88      	ldr	r3, [pc, #544]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4a87      	ldr	r2, [pc, #540]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e8:	61d3      	str	r3, [r2, #28]
 80016ea:	4b85      	ldr	r3, [pc, #532]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016f6:	2301      	movs	r3, #1
 80016f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fa:	4b82      	ldr	r3, [pc, #520]	@ (8001904 <HAL_RCC_OscConfig+0x4c8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d118      	bne.n	8001738 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001706:	4b7f      	ldr	r3, [pc, #508]	@ (8001904 <HAL_RCC_OscConfig+0x4c8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a7e      	ldr	r2, [pc, #504]	@ (8001904 <HAL_RCC_OscConfig+0x4c8>)
 800170c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001712:	f7ff fbbb 	bl	8000e8c <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171a:	f7ff fbb7 	bl	8000e8c <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b64      	cmp	r3, #100	@ 0x64
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e103      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172c:	4b75      	ldr	r3, [pc, #468]	@ (8001904 <HAL_RCC_OscConfig+0x4c8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d106      	bne.n	800174e <HAL_RCC_OscConfig+0x312>
 8001740:	4b6f      	ldr	r3, [pc, #444]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4a6e      	ldr	r2, [pc, #440]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6213      	str	r3, [r2, #32]
 800174c:	e02d      	b.n	80017aa <HAL_RCC_OscConfig+0x36e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x334>
 8001756:	4b6a      	ldr	r3, [pc, #424]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	4a69      	ldr	r2, [pc, #420]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	6213      	str	r3, [r2, #32]
 8001762:	4b67      	ldr	r3, [pc, #412]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4a66      	ldr	r2, [pc, #408]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	6213      	str	r3, [r2, #32]
 800176e:	e01c      	b.n	80017aa <HAL_RCC_OscConfig+0x36e>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	2b05      	cmp	r3, #5
 8001776:	d10c      	bne.n	8001792 <HAL_RCC_OscConfig+0x356>
 8001778:	4b61      	ldr	r3, [pc, #388]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	4a60      	ldr	r2, [pc, #384]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	6213      	str	r3, [r2, #32]
 8001784:	4b5e      	ldr	r3, [pc, #376]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	4a5d      	ldr	r2, [pc, #372]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6213      	str	r3, [r2, #32]
 8001790:	e00b      	b.n	80017aa <HAL_RCC_OscConfig+0x36e>
 8001792:	4b5b      	ldr	r3, [pc, #364]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	4a5a      	ldr	r2, [pc, #360]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	6213      	str	r3, [r2, #32]
 800179e:	4b58      	ldr	r3, [pc, #352]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	4a57      	ldr	r2, [pc, #348]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80017a4:	f023 0304 	bic.w	r3, r3, #4
 80017a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d015      	beq.n	80017de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b2:	f7ff fb6b 	bl	8000e8c <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b8:	e00a      	b.n	80017d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ba:	f7ff fb67 	bl	8000e8c <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e0b1      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0ee      	beq.n	80017ba <HAL_RCC_OscConfig+0x37e>
 80017dc:	e014      	b.n	8001808 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7ff fb55 	bl	8000e8c <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e4:	e00a      	b.n	80017fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e6:	f7ff fb51 	bl	8000e8c <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e09b      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fc:	4b40      	ldr	r3, [pc, #256]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1ee      	bne.n	80017e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001808:	7dfb      	ldrb	r3, [r7, #23]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d105      	bne.n	800181a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800180e:	4b3c      	ldr	r3, [pc, #240]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	4a3b      	ldr	r2, [pc, #236]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001818:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8087 	beq.w	8001932 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001824:	4b36      	ldr	r3, [pc, #216]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b08      	cmp	r3, #8
 800182e:	d061      	beq.n	80018f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d146      	bne.n	80018c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001838:	4b33      	ldr	r3, [pc, #204]	@ (8001908 <HAL_RCC_OscConfig+0x4cc>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183e:	f7ff fb25 	bl	8000e8c <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001846:	f7ff fb21 	bl	8000e8c <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e06d      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001858:	4b29      	ldr	r3, [pc, #164]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f0      	bne.n	8001846 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800186c:	d108      	bne.n	8001880 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800186e:	4b24      	ldr	r3, [pc, #144]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001872:	f023 020f 	bic.w	r2, r3, #15
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	4921      	ldr	r1, [pc, #132]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	4313      	orrs	r3, r2
 800187e:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001880:	4b1f      	ldr	r3, [pc, #124]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a19      	ldr	r1, [r3, #32]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001890:	430b      	orrs	r3, r1
 8001892:	491b      	ldr	r1, [pc, #108]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001898:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <HAL_RCC_OscConfig+0x4cc>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff faf5 	bl	8000e8c <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a6:	f7ff faf1 	bl	8000e8c <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e03d      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b8:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x46a>
 80018c4:	e035      	b.n	8001932 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c6:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <HAL_RCC_OscConfig+0x4cc>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fade 	bl	8000e8c <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff fada 	bl	8000e8c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e026      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e6:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x498>
 80018f2:	e01e      	b.n	8001932 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d107      	bne.n	800190c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e019      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
 8001900:	40021000 	.word	0x40021000
 8001904:	40007000 	.word	0x40007000
 8001908:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800190c:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <HAL_RCC_OscConfig+0x500>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	429a      	cmp	r2, r3
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192a:	429a      	cmp	r2, r3
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000

08001940 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0a0      	b.n	8001a96 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d020      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800196c:	4b4c      	ldr	r3, [pc, #304]	@ (8001aa0 <HAL_RCC_ClockConfig+0x160>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	4a4b      	ldr	r2, [pc, #300]	@ (8001aa0 <HAL_RCC_ClockConfig+0x160>)
 8001972:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001976:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001984:	4b46      	ldr	r3, [pc, #280]	@ (8001aa0 <HAL_RCC_ClockConfig+0x160>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	4a45      	ldr	r2, [pc, #276]	@ (8001aa0 <HAL_RCC_ClockConfig+0x160>)
 800198a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800198e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001990:	4b43      	ldr	r3, [pc, #268]	@ (8001aa0 <HAL_RCC_ClockConfig+0x160>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4940      	ldr	r1, [pc, #256]	@ (8001aa0 <HAL_RCC_ClockConfig+0x160>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d040      	beq.n	8001a30 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	4b3a      	ldr	r3, [pc, #232]	@ (8001aa0 <HAL_RCC_ClockConfig+0x160>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d115      	bne.n	80019ee <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e067      	b.n	8001a96 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d107      	bne.n	80019de <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ce:	4b34      	ldr	r3, [pc, #208]	@ (8001aa0 <HAL_RCC_ClockConfig+0x160>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d109      	bne.n	80019ee <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e05b      	b.n	8001a96 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019de:	4b30      	ldr	r3, [pc, #192]	@ (8001aa0 <HAL_RCC_ClockConfig+0x160>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e053      	b.n	8001a96 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ee:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa0 <HAL_RCC_ClockConfig+0x160>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f023 0203 	bic.w	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4929      	ldr	r1, [pc, #164]	@ (8001aa0 <HAL_RCC_ClockConfig+0x160>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a00:	f7ff fa44 	bl	8000e8c <HAL_GetTick>
 8001a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a08:	f7ff fa40 	bl	8000e8c <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e03b      	b.n	8001a96 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1e:	4b20      	ldr	r3, [pc, #128]	@ (8001aa0 <HAL_RCC_ClockConfig+0x160>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 020c 	and.w	r2, r3, #12
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d1eb      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3c:	4b18      	ldr	r3, [pc, #96]	@ (8001aa0 <HAL_RCC_ClockConfig+0x160>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4915      	ldr	r1, [pc, #84]	@ (8001aa0 <HAL_RCC_ClockConfig+0x160>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a5a:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <HAL_RCC_ClockConfig+0x160>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	490d      	ldr	r1, [pc, #52]	@ (8001aa0 <HAL_RCC_ClockConfig+0x160>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a6e:	f000 f81f 	bl	8001ab0 <HAL_RCC_GetSysClockFreq>
 8001a72:	4602      	mov	r2, r0
 8001a74:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa0 <HAL_RCC_ClockConfig+0x160>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	4909      	ldr	r1, [pc, #36]	@ (8001aa4 <HAL_RCC_ClockConfig+0x164>)
 8001a80:	5ccb      	ldrb	r3, [r1, r3]
 8001a82:	fa22 f303 	lsr.w	r3, r2, r3
 8001a86:	4a08      	ldr	r2, [pc, #32]	@ (8001aa8 <HAL_RCC_ClockConfig+0x168>)
 8001a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a8a:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <HAL_RCC_ClockConfig+0x16c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff f9ba 	bl	8000e08 <HAL_InitTick>

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	08002470 	.word	0x08002470
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000004 	.word	0x20000004

08001ab0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aca:	4b1d      	ldr	r3, [pc, #116]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x90>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d002      	beq.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x30>
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x36>
 8001ade:	e026      	b.n	8001b2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ae0:	4b18      	ldr	r3, [pc, #96]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ae2:	613b      	str	r3, [r7, #16]
      break;
 8001ae4:	e026      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	0c9b      	lsrs	r3, r3, #18
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	4a16      	ldr	r2, [pc, #88]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x98>)
 8001af0:	5cd3      	ldrb	r3, [r2, r3]
 8001af2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00f      	beq.n	8001b1e <HAL_RCC_GetSysClockFreq+0x6e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001afe:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x90>)
 8001b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	4a11      	ldr	r2, [pc, #68]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b08:	5cd3      	ldrb	r3, [r2, r3]
 8001b0a:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a0d      	ldr	r2, [pc, #52]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b10:	fb03 f202 	mul.w	r2, r3, r2
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	e004      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0x78>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a0b      	ldr	r2, [pc, #44]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
 8001b26:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	613b      	str	r3, [r7, #16]
      break;
 8001b2c:	e002      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b2e:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b30:	613b      	str	r3, [r7, #16]
      break;
 8001b32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b34:	693b      	ldr	r3, [r7, #16]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	371c      	adds	r7, #28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	40021000 	.word	0x40021000
 8001b44:	007a1200 	.word	0x007a1200
 8001b48:	08002480 	.word	0x08002480
 8001b4c:	08002490 	.word	0x08002490
 8001b50:	003d0900 	.word	0x003d0900

08001b54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b88 <RCC_Delay+0x34>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <RCC_Delay+0x38>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	0a5b      	lsrs	r3, r3, #9
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b70:	bf00      	nop
  }
  while (Delay --);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	60fa      	str	r2, [r7, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f9      	bne.n	8001b70 <RCC_Delay+0x1c>
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	10624dd3 	.word	0x10624dd3

08001b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e041      	b.n	8001c26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff f894 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f000 fa64 	bl	800209c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d001      	beq.n	8001c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e03f      	b.n	8001cc8 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd4 <HAL_TIM_Base_Start_IT+0xa4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d013      	beq.n	8001c92 <HAL_TIM_Base_Start_IT+0x62>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c72:	d00e      	beq.n	8001c92 <HAL_TIM_Base_Start_IT+0x62>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a17      	ldr	r2, [pc, #92]	@ (8001cd8 <HAL_TIM_Base_Start_IT+0xa8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d009      	beq.n	8001c92 <HAL_TIM_Base_Start_IT+0x62>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a16      	ldr	r2, [pc, #88]	@ (8001cdc <HAL_TIM_Base_Start_IT+0xac>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d004      	beq.n	8001c92 <HAL_TIM_Base_Start_IT+0x62>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ce0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d111      	bne.n	8001cb6 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b06      	cmp	r3, #6
 8001ca2:	d010      	beq.n	8001cc6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb4:	e007      	b.n	8001cc6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0201 	orr.w	r2, r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40012c00 	.word	0x40012c00
 8001cd8:	40000400 	.word	0x40000400
 8001cdc:	40000800 	.word	0x40000800
 8001ce0:	40014000 	.word	0x40014000

08001ce4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d020      	beq.n	8001d48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d01b      	beq.n	8001d48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0202 	mvn.w	r2, #2
 8001d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f998 	bl	8002064 <HAL_TIM_IC_CaptureCallback>
 8001d34:	e005      	b.n	8001d42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f98b 	bl	8002052 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f99a 	bl	8002076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d020      	beq.n	8001d94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d01b      	beq.n	8001d94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0204 	mvn.w	r2, #4
 8001d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2202      	movs	r2, #2
 8001d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f972 	bl	8002064 <HAL_TIM_IC_CaptureCallback>
 8001d80:	e005      	b.n	8001d8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f965 	bl	8002052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f974 	bl	8002076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d020      	beq.n	8001de0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d01b      	beq.n	8001de0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0208 	mvn.w	r2, #8
 8001db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2204      	movs	r2, #4
 8001db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f94c 	bl	8002064 <HAL_TIM_IC_CaptureCallback>
 8001dcc:	e005      	b.n	8001dda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f93f 	bl	8002052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f94e 	bl	8002076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d020      	beq.n	8001e2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01b      	beq.n	8001e2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0210 	mvn.w	r2, #16
 8001dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2208      	movs	r2, #8
 8001e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f926 	bl	8002064 <HAL_TIM_IC_CaptureCallback>
 8001e18:	e005      	b.n	8001e26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f919 	bl	8002052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f928 	bl	8002076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00c      	beq.n	8001e50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d007      	beq.n	8001e50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0201 	mvn.w	r2, #1
 8001e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe ff0e 	bl	8000c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00c      	beq.n	8001e74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d007      	beq.n	8001e74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 faa5 	bl	80023be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00c      	beq.n	8001e98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d007      	beq.n	8001e98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f8f8 	bl	8002088 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f003 0320 	and.w	r3, r3, #32
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00c      	beq.n	8001ebc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f003 0320 	and.w	r3, r3, #32
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d007      	beq.n	8001ebc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0220 	mvn.w	r2, #32
 8001eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fa78 	bl	80023ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_TIM_ConfigClockSource+0x1c>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e0b4      	b.n	800204a <HAL_TIM_ConfigClockSource+0x186>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f18:	d03e      	beq.n	8001f98 <HAL_TIM_ConfigClockSource+0xd4>
 8001f1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f1e:	f200 8087 	bhi.w	8002030 <HAL_TIM_ConfigClockSource+0x16c>
 8001f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f26:	f000 8086 	beq.w	8002036 <HAL_TIM_ConfigClockSource+0x172>
 8001f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f2e:	d87f      	bhi.n	8002030 <HAL_TIM_ConfigClockSource+0x16c>
 8001f30:	2b70      	cmp	r3, #112	@ 0x70
 8001f32:	d01a      	beq.n	8001f6a <HAL_TIM_ConfigClockSource+0xa6>
 8001f34:	2b70      	cmp	r3, #112	@ 0x70
 8001f36:	d87b      	bhi.n	8002030 <HAL_TIM_ConfigClockSource+0x16c>
 8001f38:	2b60      	cmp	r3, #96	@ 0x60
 8001f3a:	d050      	beq.n	8001fde <HAL_TIM_ConfigClockSource+0x11a>
 8001f3c:	2b60      	cmp	r3, #96	@ 0x60
 8001f3e:	d877      	bhi.n	8002030 <HAL_TIM_ConfigClockSource+0x16c>
 8001f40:	2b50      	cmp	r3, #80	@ 0x50
 8001f42:	d03c      	beq.n	8001fbe <HAL_TIM_ConfigClockSource+0xfa>
 8001f44:	2b50      	cmp	r3, #80	@ 0x50
 8001f46:	d873      	bhi.n	8002030 <HAL_TIM_ConfigClockSource+0x16c>
 8001f48:	2b40      	cmp	r3, #64	@ 0x40
 8001f4a:	d058      	beq.n	8001ffe <HAL_TIM_ConfigClockSource+0x13a>
 8001f4c:	2b40      	cmp	r3, #64	@ 0x40
 8001f4e:	d86f      	bhi.n	8002030 <HAL_TIM_ConfigClockSource+0x16c>
 8001f50:	2b30      	cmp	r3, #48	@ 0x30
 8001f52:	d064      	beq.n	800201e <HAL_TIM_ConfigClockSource+0x15a>
 8001f54:	2b30      	cmp	r3, #48	@ 0x30
 8001f56:	d86b      	bhi.n	8002030 <HAL_TIM_ConfigClockSource+0x16c>
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d060      	beq.n	800201e <HAL_TIM_ConfigClockSource+0x15a>
 8001f5c:	2b20      	cmp	r3, #32
 8001f5e:	d867      	bhi.n	8002030 <HAL_TIM_ConfigClockSource+0x16c>
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d05c      	beq.n	800201e <HAL_TIM_ConfigClockSource+0x15a>
 8001f64:	2b10      	cmp	r3, #16
 8001f66:	d05a      	beq.n	800201e <HAL_TIM_ConfigClockSource+0x15a>
 8001f68:	e062      	b.n	8002030 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f7a:	f000 f992 	bl	80022a2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001f8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	609a      	str	r2, [r3, #8]
      break;
 8001f96:	e04f      	b.n	8002038 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fa8:	f000 f97b 	bl	80022a2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001fba:	609a      	str	r2, [r3, #8]
      break;
 8001fbc:	e03c      	b.n	8002038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f000 f8f2 	bl	80021b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2150      	movs	r1, #80	@ 0x50
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f949 	bl	800226e <TIM_ITRx_SetConfig>
      break;
 8001fdc:	e02c      	b.n	8002038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fea:	461a      	mov	r2, r3
 8001fec:	f000 f910 	bl	8002210 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2160      	movs	r1, #96	@ 0x60
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f939 	bl	800226e <TIM_ITRx_SetConfig>
      break;
 8001ffc:	e01c      	b.n	8002038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800200a:	461a      	mov	r2, r3
 800200c:	f000 f8d2 	bl	80021b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2140      	movs	r1, #64	@ 0x40
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f929 	bl	800226e <TIM_ITRx_SetConfig>
      break;
 800201c:	e00c      	b.n	8002038 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4619      	mov	r1, r3
 8002028:	4610      	mov	r0, r2
 800202a:	f000 f920 	bl	800226e <TIM_ITRx_SetConfig>
      break;
 800202e:	e003      	b.n	8002038 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
      break;
 8002034:	e000      	b.n	8002038 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002036:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002048:	7bfb      	ldrb	r3, [r7, #15]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr
	...

0800209c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a3b      	ldr	r2, [pc, #236]	@ (800219c <TIM_Base_SetConfig+0x100>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d00b      	beq.n	80020cc <TIM_Base_SetConfig+0x30>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020ba:	d007      	beq.n	80020cc <TIM_Base_SetConfig+0x30>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a38      	ldr	r2, [pc, #224]	@ (80021a0 <TIM_Base_SetConfig+0x104>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d003      	beq.n	80020cc <TIM_Base_SetConfig+0x30>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a37      	ldr	r2, [pc, #220]	@ (80021a4 <TIM_Base_SetConfig+0x108>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d108      	bne.n	80020de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a2e      	ldr	r2, [pc, #184]	@ (800219c <TIM_Base_SetConfig+0x100>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d017      	beq.n	8002116 <TIM_Base_SetConfig+0x7a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020ec:	d013      	beq.n	8002116 <TIM_Base_SetConfig+0x7a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a2b      	ldr	r2, [pc, #172]	@ (80021a0 <TIM_Base_SetConfig+0x104>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00f      	beq.n	8002116 <TIM_Base_SetConfig+0x7a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a2a      	ldr	r2, [pc, #168]	@ (80021a4 <TIM_Base_SetConfig+0x108>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d00b      	beq.n	8002116 <TIM_Base_SetConfig+0x7a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a29      	ldr	r2, [pc, #164]	@ (80021a8 <TIM_Base_SetConfig+0x10c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d007      	beq.n	8002116 <TIM_Base_SetConfig+0x7a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a28      	ldr	r2, [pc, #160]	@ (80021ac <TIM_Base_SetConfig+0x110>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d003      	beq.n	8002116 <TIM_Base_SetConfig+0x7a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a27      	ldr	r2, [pc, #156]	@ (80021b0 <TIM_Base_SetConfig+0x114>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d108      	bne.n	8002128 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800211c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a13      	ldr	r2, [pc, #76]	@ (800219c <TIM_Base_SetConfig+0x100>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d00b      	beq.n	800216c <TIM_Base_SetConfig+0xd0>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a14      	ldr	r2, [pc, #80]	@ (80021a8 <TIM_Base_SetConfig+0x10c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d007      	beq.n	800216c <TIM_Base_SetConfig+0xd0>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a13      	ldr	r2, [pc, #76]	@ (80021ac <TIM_Base_SetConfig+0x110>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d003      	beq.n	800216c <TIM_Base_SetConfig+0xd0>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a12      	ldr	r2, [pc, #72]	@ (80021b0 <TIM_Base_SetConfig+0x114>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d103      	bne.n	8002174 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d005      	beq.n	8002192 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f023 0201 	bic.w	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	611a      	str	r2, [r3, #16]
  }
}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	40012c00 	.word	0x40012c00
 80021a0:	40000400 	.word	0x40000400
 80021a4:	40000800 	.word	0x40000800
 80021a8:	40014000 	.word	0x40014000
 80021ac:	40014400 	.word	0x40014400
 80021b0:	40014800 	.word	0x40014800

080021b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	f023 0201 	bic.w	r2, r3, #1
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f023 030a 	bic.w	r3, r3, #10
 80021f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	621a      	str	r2, [r3, #32]
}
 8002206:	bf00      	nop
 8002208:	371c      	adds	r7, #28
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	f023 0210 	bic.w	r2, r3, #16
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800223a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	031b      	lsls	r3, r3, #12
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800224c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4313      	orrs	r3, r2
 8002256:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	621a      	str	r2, [r3, #32]
}
 8002264:	bf00      	nop
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr

0800226e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800226e:	b480      	push	{r7}
 8002270:	b085      	sub	sp, #20
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4313      	orrs	r3, r2
 800228c:	f043 0307 	orr.w	r3, r3, #7
 8002290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	609a      	str	r2, [r3, #8]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr

080022a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b087      	sub	sp, #28
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80022bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	021a      	lsls	r2, r3, #8
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	431a      	orrs	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	609a      	str	r2, [r3, #8]
}
 80022d6:	bf00      	nop
 80022d8:	371c      	adds	r7, #28
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e04b      	b.n	8002390 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800231e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a19      	ldr	r2, [pc, #100]	@ (800239c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d013      	beq.n	8002364 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002344:	d00e      	beq.n	8002364 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a15      	ldr	r2, [pc, #84]	@ (80023a0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d009      	beq.n	8002364 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a13      	ldr	r2, [pc, #76]	@ (80023a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d004      	beq.n	8002364 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a12      	ldr	r2, [pc, #72]	@ (80023a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d10c      	bne.n	800237e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800236a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	4313      	orrs	r3, r2
 8002374:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40012c00 	.word	0x40012c00
 80023a0:	40000400 	.word	0x40000400
 80023a4:	40000800 	.word	0x40000800
 80023a8:	40014000 	.word	0x40014000

080023ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr

080023be <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <memset>:
 80023d0:	4603      	mov	r3, r0
 80023d2:	4402      	add	r2, r0
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d100      	bne.n	80023da <memset+0xa>
 80023d8:	4770      	bx	lr
 80023da:	f803 1b01 	strb.w	r1, [r3], #1
 80023de:	e7f9      	b.n	80023d4 <memset+0x4>

080023e0 <__libc_init_array>:
 80023e0:	b570      	push	{r4, r5, r6, lr}
 80023e2:	2600      	movs	r6, #0
 80023e4:	4d0c      	ldr	r5, [pc, #48]	@ (8002418 <__libc_init_array+0x38>)
 80023e6:	4c0d      	ldr	r4, [pc, #52]	@ (800241c <__libc_init_array+0x3c>)
 80023e8:	1b64      	subs	r4, r4, r5
 80023ea:	10a4      	asrs	r4, r4, #2
 80023ec:	42a6      	cmp	r6, r4
 80023ee:	d109      	bne.n	8002404 <__libc_init_array+0x24>
 80023f0:	f000 f81a 	bl	8002428 <_init>
 80023f4:	2600      	movs	r6, #0
 80023f6:	4d0a      	ldr	r5, [pc, #40]	@ (8002420 <__libc_init_array+0x40>)
 80023f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002424 <__libc_init_array+0x44>)
 80023fa:	1b64      	subs	r4, r4, r5
 80023fc:	10a4      	asrs	r4, r4, #2
 80023fe:	42a6      	cmp	r6, r4
 8002400:	d105      	bne.n	800240e <__libc_init_array+0x2e>
 8002402:	bd70      	pop	{r4, r5, r6, pc}
 8002404:	f855 3b04 	ldr.w	r3, [r5], #4
 8002408:	4798      	blx	r3
 800240a:	3601      	adds	r6, #1
 800240c:	e7ee      	b.n	80023ec <__libc_init_array+0xc>
 800240e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002412:	4798      	blx	r3
 8002414:	3601      	adds	r6, #1
 8002416:	e7f2      	b.n	80023fe <__libc_init_array+0x1e>
 8002418:	080024a0 	.word	0x080024a0
 800241c:	080024a0 	.word	0x080024a0
 8002420:	080024a0 	.word	0x080024a0
 8002424:	080024a4 	.word	0x080024a4

08002428 <_init>:
 8002428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242a:	bf00      	nop
 800242c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800242e:	bc08      	pop	{r3}
 8002430:	469e      	mov	lr, r3
 8002432:	4770      	bx	lr

08002434 <_fini>:
 8002434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002436:	bf00      	nop
 8002438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800243a:	bc08      	pop	{r3}
 800243c:	469e      	mov	lr, r3
 800243e:	4770      	bx	lr
